Index: src/main/java/com/renyigesai/immortalers_delight/potion/CulturalLegacyPotionEffect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.potion;\r\n\r\nimport com.renyigesai.immortalers_delight.block.CulturalLegacyEffectToolBlock;\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightBlocks;\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightFoodProperties;\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightMobEffect;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.world.effect.MobEffectInstance;\r\nimport net.minecraft.world.effect.MobEffects;\r\nimport net.minecraft.world.entity.Entity;\r\nimport net.minecraft.world.entity.LivingEntity;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.Blocks;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraftforge.event.enchanting.EnchantmentLevelSetEvent;\r\nimport net.minecraftforge.event.entity.living.LivingEntityUseItemEvent;\r\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\r\nimport net.minecraftforge.fml.common.Mod;\r\n\r\n@Mod.EventBusSubscriber\r\npublic class CulturalLegacyPotionEffect {\r\n\r\n    @SubscribeEvent\r\n    public static void onUseItemFinish(LivingEntityUseItemEvent.Finish event) {\r\n        if (event != null && event.getEntity() != null) {\r\n            ItemStack stack = event.getItem();\r\n            Entity entity = event.getEntity();\r\n            if (entity instanceof LivingEntity livingEntity) {\r\n                if (stack.getItem().isEdible()) {\r\n                    if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.PUFFERFISH_ROLL) {\r\n                        livingEntity.addEffect(new MobEffectInstance(MobEffects.SATURATION, 1));\r\n                    }\r\n                    if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT) {\r\n                        livingEntity.addEffect(new MobEffectInstance(MobEffects.HEAL, 1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n//    @SubscribeEvent\r\n//    public static void onEnchantmentLevelSet(EnchantmentLevelSetEvent event) {\r\n//        if (event == null || event.isCanceled()) {\r\n//            return;\r\n//        }\r\n//\r\n//        // 获取世界和附魔台的位置\r\n//        Level level = event.getLevel();\r\n//        BlockPos pos = event.getPos();\r\n//\r\n//        // 以附魔台为中心，检查 5*5 范围内的方块\r\n//        int goldBlockCount = maxAgeToolBlocksInRange(level, pos, 2); // 2 表示从中心到边缘的距离\r\n//\r\n//        // 根据金块数量计算新的附魔等级\r\n//        int newLevel = calculateNewLevel(event.getEnchantLevel(), goldBlockCount);\r\n//\r\n//        // 设置新的附魔等级\r\n//        event.setEnchantLevel(newLevel);\r\n//    }\r\n//\r\n//    /**\r\n//     * 计算指定范围内的指定方块数量\r\n//     * @param level 世界\r\n//     * @param centerPos 中心位置\r\n//     * @param range 范围（从中心到边缘的距离）\r\n//     * @return 金块数量\r\n//     */\r\n//    private static int maxAgeToolBlocksInRange(Level level, BlockPos centerPos, int range) {\r\n//        int maxAge = 0;\r\n//        for (int x = -range; x <= range; x++) {\r\n//            for (int y = -range; y <= range; y++) {\r\n//                for (int z = -range; z <= range; z++) {\r\n//                    BlockPos checkPos = centerPos.offset(x, y, z);\r\n//                    if (level.getBlockState(checkPos).getBlock() instanceof CulturalLegacyEffectToolBlock block) {\r\n//\r\n//                        maxAge++;\r\n//                    }\r\n//                }\r\n//            }\r\n//        }\r\n//        return maxAge;\r\n//    }\r\n//\r\n//    /**\r\n//     * 根据金块数量计算新的附魔等级\r\n//     * @param originalLevel 原始附魔等级\r\n//     * @param goldBlockCount 金块数量\r\n//     * @return 新的附魔等级\r\n//     */\r\n//    private static int calculateNewLevel(int originalLevel, int goldBlockCount) {\r\n//        // 简单示例：每有一个金块，附魔等级降低 1 级，但不低于 0\r\n//        int newLevel = originalLevel - goldBlockCount;\r\n//        return Math.max(0, newLevel);\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/potion/CulturalLegacyPotionEffect.java b/src/main/java/com/renyigesai/immortalers_delight/potion/CulturalLegacyPotionEffect.java
--- a/src/main/java/com/renyigesai/immortalers_delight/potion/CulturalLegacyPotionEffect.java	(revision bd6cbccc7842f3760016996ac5fc52a999a67365)
+++ b/src/main/java/com/renyigesai/immortalers_delight/potion/CulturalLegacyPotionEffect.java	(date 1746020189009)
@@ -1,6 +1,7 @@
 package com.renyigesai.immortalers_delight.potion;
 
 import com.renyigesai.immortalers_delight.block.CulturalLegacyEffectToolBlock;
+import com.renyigesai.immortalers_delight.block.SpikeTrapBlock;
 import com.renyigesai.immortalers_delight.init.ImmortalersDelightBlocks;
 import com.renyigesai.immortalers_delight.init.ImmortalersDelightFoodProperties;
 import com.renyigesai.immortalers_delight.init.ImmortalersDelightMobEffect;
@@ -9,12 +10,16 @@
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.Tilt;
 import net.minecraftforge.event.enchanting.EnchantmentLevelSetEvent;
 import net.minecraftforge.event.entity.living.LivingEntityUseItemEvent;
+import net.minecraftforge.event.entity.living.LivingEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.Mod;
 
@@ -26,14 +31,24 @@
         if (event != null && event.getEntity() != null) {
             ItemStack stack = event.getItem();
             Entity entity = event.getEntity();
-            if (entity instanceof LivingEntity livingEntity) {
+            if (entity instanceof LivingEntity livingEntity && !livingEntity.level().isClientSide()) {
                 if (stack.getItem().isEdible()) {
                     if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.PUFFERFISH_ROLL) {
                         livingEntity.addEffect(new MobEffectInstance(MobEffects.SATURATION, 1));
                     }
-                    if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT) {
+                    if (
+                            stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT) {
                         livingEntity.addEffect(new MobEffectInstance(MobEffects.HEAL, 1));
                     }
+                    if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.SCARLET_DEVILS_CAKE_SLICE) {
+                        livingEntity.heal(2);
+                    }
+                    if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.RED_STUFFED_BUN) {
+                        if (livingEntity.getRandom().nextInt(3) == 0) {
+                            livingEntity.addEffect(new MobEffectInstance(MobEffects.DAMAGE_BOOST, 3000));
+                            livingEntity.addEffect(new MobEffectInstance(MobEffects.LUCK, 600));
+                        }
+                    }
                 }
             }
         }
@@ -92,4 +107,47 @@
 //        int newLevel = originalLevel - goldBlockCount;
 //        return Math.max(0, newLevel);
 //    }
+
+    @SubscribeEvent
+    public static void onTick(LivingEvent.LivingTickEvent event) {
+        if (event == null || event.getEntity() == null || event.getEntity().level().isClientSide()) {
+            return;
+        }
+        LivingEntity entity = event.getEntity();
+        Level level = entity.level();
+        BlockState blockState = level.getBlockState(entity.getOnPos());
+        BlockState blockState1 = level.getBlockState(entity.blockPosition());
+
+        if (blockState.getBlock() == ImmortalersDelightBlocks.SPIKE_BAR.get()) {
+            if (entity instanceof Player ? !((Player) entity).isCreative() : entity.getHealth() > 2.0f) {
+                entity.hurt(entity.damageSources().cactus(), 2.0f);
+            }
+        }
+        if (blockState.getBlock() == ImmortalersDelightBlocks.LONG_SPIKE_TRAP.get() && blockState.getValue(BlockStateProperties.TILT) == Tilt.FULL) {
+            if (entity instanceof Player ? !((Player) entity).isCreative() : entity.getHealth() > 4.0f) {
+                entity.hurt(entity.damageSources().cactus(), 4.0f);
+            }
+        }
+        if (blockState.getBlock() == ImmortalersDelightBlocks.POISONOUS_LONG_SPIKE_TRAP.get() && blockState.getValue(BlockStateProperties.TILT) == Tilt.FULL) {
+            if (entity instanceof Player ? !((Player) entity).isCreative() : entity.getHealth() > 2.0f) {
+                entity.hurt(entity.damageSources().cactus(), 2.0f);
+                if(!(entity.hasEffect(ImmortalersDelightMobEffect.WEAK_POISON.get()) || entity.hasEffect(MobEffects.POISON))) entity.addEffect(new MobEffectInstance(ImmortalersDelightMobEffect.WEAK_POISON.get(), 100, 4));
+            }
+        }
+        if (blockState1.getBlock() == ImmortalersDelightBlocks.POISONOUS_LONG_SPIKE_TRAP.get() && blockState1.getValue(BlockStateProperties.TILT) == Tilt.FULL) {
+            if (entity instanceof Player ? !((Player) entity).isCreative() : entity.getHealth() > 2.0f) {
+                if(!(entity.hasEffect(ImmortalersDelightMobEffect.WEAK_POISON.get()) || entity.hasEffect(MobEffects.POISON))) entity.addEffect(new MobEffectInstance(ImmortalersDelightMobEffect.WEAK_POISON.get(), 100, 4));
+            }
+        }
+        if (blockState1.getBlock() == ImmortalersDelightBlocks.POISONOUS_METAL_CALTROP.get()) {
+            if (entity instanceof Player ? !((Player) entity).isCreative() : entity.getHealth() > 2.0f) {
+                entity.addEffect(new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN,30, 3));
+            }
+        }
+        if (blockState1.getBlock() == ImmortalersDelightBlocks.POISONOUS_SPIKE_TRAP.get() && blockState1.getValue(BlockStateProperties.TILT) == Tilt.FULL) {
+            if (entity instanceof Player ? !((Player) entity).isCreative() : entity.getHealth() > 2.0f) {
+                if(!(entity.hasEffect(ImmortalersDelightMobEffect.WEAK_POISON.get()) || entity.hasEffect(MobEffects.POISON))) entity.addEffect(new MobEffectInstance(MobEffects.POISON, 80, 1));
+            }
+        }
+    }
 }
Index: src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightBlocks.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.init;\r\n\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport com.renyigesai.immortalers_delight.block.*;\r\nimport com.renyigesai.immortalers_delight.block.ancient_stove.AncientStoveBlock;\r\nimport com.renyigesai.immortalers_delight.block.ancient_stove.AncientStoveBlockEntity;\r\nimport com.renyigesai.immortalers_delight.block.enchantal_cooler.EnchantalCoolerBlock;\r\nimport com.renyigesai.immortalers_delight.block.enchantal_cooler.EnchantalCoolerBlockEntity;\r\nimport com.renyigesai.immortalers_delight.block.hanging_sign.ImmortalersDelightCeilingHangingSignBlock;\r\nimport com.renyigesai.immortalers_delight.block.hanging_sign.ImmortalersDelightWallHangingSignBlockBlock;\r\nimport com.renyigesai.immortalers_delight.block.sign.ImmortalersDelightStandingSignBlock;\r\nimport com.renyigesai.immortalers_delight.block.sign.ImmortalersDelightWallSignBlock;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.world.flag.FeatureFlag;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.level.block.*;\r\nimport net.minecraft.world.level.block.entity.BlockEntityType;\r\nimport net.minecraft.world.level.block.state.BlockBehaviour;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraft.world.level.block.state.properties.BlockSetType;\r\nimport net.minecraft.world.level.block.state.properties.BlockStateProperties;\r\nimport net.minecraft.world.level.block.state.properties.NoteBlockInstrument;\r\nimport net.minecraft.world.level.block.state.properties.WoodType;\r\nimport net.minecraft.world.level.material.MapColor;\r\nimport net.minecraft.world.level.material.PushReaction;\r\nimport net.minecraftforge.eventbus.api.IEventBus;\r\nimport net.minecraftforge.registries.DeferredRegister;\r\nimport net.minecraftforge.registries.ForgeRegistries;\r\nimport net.minecraftforge.registries.RegistryObject;\r\nimport vectorwing.farmersdelight.common.block.CabinetBlock;\r\nimport vectorwing.farmersdelight.common.block.PieBlock;\r\n\r\nimport java.util.function.Supplier;\r\nimport java.util.function.ToIntFunction;\r\n\r\npublic class ImmortalersDelightBlocks {\r\n\r\n    public static final DeferredRegister<Block> BLOCKS =\r\n            DeferredRegister.create(ForgeRegistries.BLOCKS, ImmortalersDelightMod.MODID);\r\n\r\n    public static final DeferredRegister<BlockEntityType<?>> BLOCK_ENTITY_REGISTRY =\r\n            DeferredRegister.create(ForgeRegistries.BLOCK_ENTITY_TYPES, ImmortalersDelightMod.MODID);\r\n\r\n    public static final RegistryObject<Block> ENCHANTAL_COOLER;\r\n    public static final RegistryObject<BlockEntityType<EnchantalCoolerBlockEntity>> ENCHANTAL_COOLER_ENTITY;\r\n    public static final RegistryObject<Block> ANCIENT_STOVE;\r\n    public static final RegistryObject<BlockEntityType<AncientStoveBlockEntity>> ANCIENT_STOVE_ENTITY;\r\n    public static final RegistryObject<BlockEntityType<RotatingRoastMeatBlockEntity>> ROTATING_ROAST_MEAT_ENTITY;\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_LOG = BLOCKS.register(\"himekaido_log\",() ->\r\n            log(MapColor.WOOD, MapColor.PODZOL));\r\n\r\n    public static final RegistryObject<Block> LEISAMBOO_STALK = BLOCKS.register(\"leisamboo_stalk\",() ->\r\n            new LeisambooStalkBlock(BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).forceSolidOn().randomTicks().instabreak().strength(1.0F).sound(SoundType.BAMBOO).noOcclusion().dynamicShape()));\r\n    public static final RegistryObject<Block> LEISAMBOO_CROP = BLOCKS.register(\"leisamboo_crop\",() ->\r\n            new LeisambooCropBlock(BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).forceSolidOn().randomTicks().instabreak().strength(1.0F).sound(SoundType.BAMBOO).noOcclusion().dynamicShape()));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_WOOD = BLOCKS.register(\"himekaido_wood\",() ->\r\n            log(MapColor.WOOD, MapColor.PODZOL));\r\n\r\n    public static final RegistryObject<Block> STRIPPED_HIMEKAIDO_WOOD = BLOCKS.register(\"stripped_himekaido_wood\",() ->\r\n            log(MapColor.WOOD, MapColor.PODZOL));\r\n\r\n    public static final RegistryObject<Block> STRIPPED_HIMEKAIDO_LOG = BLOCKS.register(\"stripped_himekaido_log\",() ->\r\n            log(MapColor.WOOD, MapColor.PODZOL));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_SHRUB = BLOCKS.register(\"himekaido_shrub\",() ->\r\n            new HimekaidoShrubBlock(BlockBehaviour.Properties.copy(Blocks.SWEET_BERRY_BUSH).noCollission().randomTicks().instabreak()));\r\n    public static final RegistryObject<Block> HIMEKAIDO_FRUITED_LEAVES = BLOCKS.register(\"himekaido_fruited_leaves\",() ->\r\n        new HimekaidoLeavesFruited(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)));\r\n    public static final RegistryObject<Block> HIMEKAIDO_FLOWERING_LEAVES = BLOCKS.register(\"himekaido_flowering_leaves\",() ->\r\n        new HimekaidoLeavesGrowing((HimekaidoLeavesFruited) HIMEKAIDO_FRUITED_LEAVES.get(), BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)));\r\n    public static final RegistryObject<Block> HIMEKAIDO_LEAVES = BLOCKS.register(\"himekaido_leaves\",() ->\r\n            new HimekaidoLeavesGrowing((HimekaidoLeavesGrowing) HIMEKAIDO_FLOWERING_LEAVES.get(), BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_PLANKS = BLOCKS.register(\"himekaido_planks\",\r\n            () -> new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_STAIRS = BLOCKS.register(\"himekaido_stairs\",\r\n            () -> new StairBlock(HIMEKAIDO_PLANKS.get().defaultBlockState(),BlockBehaviour.Properties.copy(HIMEKAIDO_PLANKS.get())));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_SLAB = BLOCKS.register(\"himekaido_slab\",\r\n            () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.OAK_SLAB)));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_DOOR = BLOCKS.register(\"himekaido_door\",\r\n            () -> new DoorBlock(BlockBehaviour.Properties.copy(Blocks.OAK_DOOR),BlockSetType.OAK));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_TRAPDOOR = BLOCKS.register(\"himekaido_trapdoor\",\r\n            () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.OAK_DOOR),BlockSetType.OAK));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_FENCE = BLOCKS.register(\"himekaido_fence\",\r\n            () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.OAK_FENCE)));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_FENCE_GATE = BLOCKS.register(\"himekaido_fence_gate\",\r\n            () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.OAK_FENCE_GATE), WoodType.OAK));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_PRESSURE_PLATE = BLOCKS.register(\"himekaido_pressure_plate\",\r\n            () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING,BlockBehaviour.Properties.copy(Blocks.OAK_FENCE_GATE),BlockSetType.OAK));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_BUTTON = BLOCKS.register(\"himekaido_button\",\r\n            () ->woodenButton(BlockSetType.OAK));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_CABINET = BLOCKS.register(\"himekaido_cabinet\",\r\n            () -> new CabinetBlock(Block.Properties.copy(Blocks.BARREL)));\r\n\r\n    public static final RegistryObject<Block> MILLENIAN_BAMBOO = BLOCKS.register(\"millenian_bamboo\",\r\n            () -> new MillenianBambooBlock(BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).strength(2.0F,3.0F).sound(SoundType.BAMBOO),ImmortalersDelightItems.BOWL_OF_MILLENIAN_BAMBOO));\r\n    public static final RegistryObject<Block> HIMEKAIDO_SIGN = BLOCKS.register(\"himekaido_sign\",\r\n            () ->  new ImmortalersDelightStandingSignBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava(), ImmortalersDelightWoodType.HIMEKAIDO));\r\n    public static final RegistryObject<Block>  HIMEKAIDO_WALL_SIGN = BLOCKS.register(\"himekaido_wall_sign\",\r\n            () -> new ImmortalersDelightWallSignBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).dropsLike(HIMEKAIDO_SIGN.get()).ignitedByLava(), ImmortalersDelightWoodType.HIMEKAIDO));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_HANGING_SIGN = BLOCKS.register(\"himekaido_hanging_sign\",\r\n            () ->  new ImmortalersDelightCeilingHangingSignBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava(), ImmortalersDelightWoodType.HIMEKAIDO));\r\n    public static final RegistryObject<Block>  HIMEKAIDO_WALL_HANGING_SIGN = BLOCKS.register(\"himekaido_wall_hanging_sign\",\r\n            () -> new ImmortalersDelightWallHangingSignBlockBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).dropsLike(HIMEKAIDO_SIGN.get()).ignitedByLava(), ImmortalersDelightWoodType.HIMEKAIDO));\r\n    /*\r\n    古木\r\n    */\r\n\r\n    public static final RegistryObject<Block> ANCIENT_WOOD_LOG = BLOCKS.register(\"ancient_wood_log\",() ->\r\n            log(MapColor.WOOD, MapColor.PODZOL));\r\n\r\n    public static final RegistryObject<Block> ANCIENT_WOOD = BLOCKS.register(\"ancient_wood\",() ->\r\n            log(MapColor.WOOD, MapColor.PODZOL));\r\n\r\n    public static final RegistryObject<Block> STRIPPED_ANCIENT_WOOD = BLOCKS.register(\"stripped_ancient_wood\",() ->\r\n            log(MapColor.WOOD, MapColor.PODZOL));\r\n\r\n    public static final RegistryObject<Block> STRIPPED_ANCIENT_WOOD_LOG = BLOCKS.register(\"stripped_ancient_wood_log\",() ->\r\n            log(MapColor.WOOD, MapColor.PODZOL));\r\n\r\n    public static final RegistryObject<Block> ANCIENT_WOOD_PLANKS = BLOCKS.register(\"ancient_wood_planks\",\r\n            () -> new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)));\r\n\r\n    public static final RegistryObject<Block> ANCIENT_WOOD_CABINET = BLOCKS.register(\"ancient_wood_cabinet\",\r\n            () -> new CabinetBlock(Block.Properties.copy(Blocks.BARREL)));\r\n\r\n    public static final RegistryObject<Block> ANCIENT_WOOD_STAIRS = BLOCKS.register(\"ancient_wood_stairs\",\r\n            () -> new StairBlock(HIMEKAIDO_PLANKS.get().defaultBlockState(),BlockBehaviour.Properties.copy(ANCIENT_WOOD_PLANKS.get())));\r\n\r\n    public static final RegistryObject<Block> ANCIENT_WOOD_SLAB = BLOCKS.register(\"ancient_wood_slab\",\r\n            () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.OAK_SLAB)));\r\n\r\n    public static final RegistryObject<Block> ANCIENT_WOOD_DOOR = BLOCKS.register(\"ancient_wood_door\",\r\n            () -> new DoorBlock(BlockBehaviour.Properties.copy(Blocks.OAK_DOOR),BlockSetType.OAK));\r\n\r\n        public static final RegistryObject<Block> ANCIENT_WOOD_TRAPDOOR = BLOCKS.register(\"ancient_wood_trapdoor\",\r\n            () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.OAK_DOOR),BlockSetType.OAK));\r\n\r\n    public static final RegistryObject<Block> ANCIENT_WOOD_FENCE = BLOCKS.register(\"ancient_wood_fence\",\r\n            () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.OAK_FENCE)));\r\n\r\n    public static final RegistryObject<Block> ANCIENT_WOOD_FENCE_GATE = BLOCKS.register(\"ancient_wood_fence_gate\",\r\n            () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.OAK_FENCE_GATE), WoodType.OAK));\r\n\r\n    public static final RegistryObject<Block> ANCIENT_WOOD_PRESSURE_PLATE = BLOCKS.register(\"ancient_wood_pressure_plate\",\r\n            () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING,BlockBehaviour.Properties.copy(Blocks.OAK_PRESSURE_PLATE),BlockSetType.OAK));\r\n\r\n    public static final RegistryObject<Block> ANCIENT_WOOD_BUTTON = BLOCKS.register(\"ancient_wood_button\",\r\n            () ->woodenButton(BlockSetType.OAK));\r\n\r\n    /**\r\n     * 溪柱制品\r\n     */\r\n    public static final RegistryObject<Block> LEISAMBOO_PLANKS = BLOCKS.register(\"leisamboo_planks\",\r\n            () -> new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)));\r\n\r\n    public static final RegistryObject<Block> LEISAMBOO_STAIRS = BLOCKS.register(\"leisamboo_stairs\",\r\n            () -> new StairBlock(LEISAMBOO_PLANKS.get().defaultBlockState(),BlockBehaviour.Properties.copy(LEISAMBOO_PLANKS.get())));\r\n\r\n    public static final RegistryObject<Block> LEISAMBOO_SLAB = BLOCKS.register(\"leisamboo_slab\",\r\n            () -> new SlabBlock(BlockBehaviour.Properties.copy(Blocks.OAK_SLAB)));\r\n    public static final RegistryObject<Block> LEISAMBOO_DOOR = BLOCKS.register(\"leisamboo_door\",\r\n            () -> new DoorBlock(BlockBehaviour.Properties.copy(Blocks.OAK_DOOR),BlockSetType.OAK));\r\n\r\n    public static final RegistryObject<Block> LEISAMBOO_TRAPDOOR = BLOCKS.register(\"leisamboo_trapdoor\",\r\n            () -> new TrapDoorBlock(BlockBehaviour.Properties.copy(Blocks.OAK_DOOR),BlockSetType.OAK));\r\n\r\n    public static final RegistryObject<Block> LEISAMBOO_FENCE = BLOCKS.register(\"leisamboo_fence\",\r\n            () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.OAK_FENCE)));\r\n\r\n    public static final RegistryObject<Block> LEISAMBOO_FENCE_GATE = BLOCKS.register(\"leisamboo_fence_gate\",\r\n            () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.OAK_FENCE_GATE), WoodType.OAK));\r\n\r\n    public static final RegistryObject<Block> LEISAMBOO_PRESSURE_PLATE = BLOCKS.register(\"leisamboo_pressure_plate\",\r\n            () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING,BlockBehaviour.Properties.copy(Blocks.OAK_FENCE_GATE),BlockSetType.OAK));\r\n\r\n    public static final RegistryObject<Block> LEISAMBOO_BUTTON = BLOCKS.register(\"leisamboo_button\",\r\n            () ->woodenButton(BlockSetType.OAK));\r\n\r\n    public static final RegistryObject<Block> LEISAMBOO_CABINET = BLOCKS.register(\"leisamboo_cabinet\",\r\n            () -> new CabinetBlock(Block.Properties.copy(Blocks.BARREL)));\r\n\r\n    public static final RegistryObject<Block> LEISAMBOO_SIGN = BLOCKS.register(\"leisamboo_sign\",\r\n            () ->  new ImmortalersDelightStandingSignBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava(), ImmortalersDelightWoodType.LEISAMBOO));\r\n    public static final RegistryObject<Block>  LEISAMBOO_WALL_SIGN = BLOCKS.register(\"leisamboo_wall_sign\",\r\n            () -> new ImmortalersDelightWallSignBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).dropsLike(LEISAMBOO_SIGN.get()).ignitedByLava(), ImmortalersDelightWoodType.LEISAMBOO));\r\n\r\n    public static final RegistryObject<Block> LEISAMBOO_HANGING_SIGN = BLOCKS.register(\"leisamboo_hanging_sign\",\r\n            () ->  new ImmortalersDelightCeilingHangingSignBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava(), ImmortalersDelightWoodType.LEISAMBOO));\r\n    public static final RegistryObject<Block>  LEISAMBOO_WALL_HANGING_SIGN = BLOCKS.register(\"leisamboo_wall_hanging_sign\",\r\n            () -> new ImmortalersDelightWallHangingSignBlockBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).dropsLike(LEISAMBOO_HANGING_SIGN.get()).ignitedByLava(), ImmortalersDelightWoodType.LEISAMBOO));\r\n\r\n    public static final RegistryObject<Block> EVOLUTCORN = BLOCKS.register(\"evolutcorn\",\r\n            () -> new EvolutcornBlock(BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.CROP).pushReaction(PushReaction.DESTROY)));\r\n\r\n    public static final RegistryObject<Block> PEARLIPEARL_BUNDLE = BLOCKS.register(\"pearlipearl_bundle\",\r\n            ()-> new PearlipearlBeanBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_GREEN).instrument(NoteBlockInstrument.DIDGERIDOO).strength(0.5F).sound(SoundType.WOOD).pushReaction(PushReaction.DESTROY).randomTicks()));\r\n\r\n    public static final RegistryObject<Block> PEARLIPEARL_STALK = BLOCKS.register(\"pearlipearl_stalk\",\r\n            ()-> new PearlipearlStalkBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_GREEN).instrument(NoteBlockInstrument.DIDGERIDOO).strength(1.0F).sound(SoundType.WOOD).pushReaction(PushReaction.DESTROY).randomTicks()));\r\n\r\n    public static final RegistryObject<Block> ZEA_PANCAKE = BLOCKS.register(\"zea_pancake\",()->\r\n            new ZeaPancakeBLock(BlockBehaviour.Properties.copy(Blocks.CAKE)));\r\n\r\n    public static final RegistryObject<Block> STEWED_ROTTEN_MEAT_POT = BLOCKS.register(\"stewed_rotten_meat_pot\",()->\r\n            new StewedRottenMeatPot(BlockBehaviour.Properties.copy(Blocks.DECORATED_POT),ImmortalersDelightItems.BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT));\r\n    public static final RegistryObject<Block> BRAISED_SPIDER_EYES_BLOCK = BLOCKS.register(\"braised_spider_eyes_block\",()->\r\n            new BraisedSpiderEyesBlock(BlockBehaviour.Properties.copy(Blocks.CAKE)));\r\n\r\n    public static final RegistryObject<Block> ROTATING_ROAST_MEAT = BLOCKS.register(\"rotating_roast_meat\",()->\r\n            new RotatingRoastMeatBlock(BlockBehaviour.Properties.copy(Blocks.CAKE)));\r\n\r\n    public static final RegistryObject<Block> SNIFFER_ROTATING_ROAST_MEAT = BLOCKS.register(\"sniffer_rotating_roast_meat\",()->\r\n            new RotatingRoastMeatBlock(BlockBehaviour.Properties.copy(Blocks.CAKE)));\r\n\r\n    public static final RegistryObject<Block> TARTARE_CHICKEN_BIG_MEAL = BLOCKS.register(\"tartare_chicken_big_meal\",()->\r\n            new TartareChickenBigMealBlock(BlockBehaviour.Properties.copy(Blocks.CAKE)));\r\n\r\n    public static final RegistryObject<Block> EVOLUTCORN_GRAIN_BAG = BLOCKS.register(\"evolutcorn_grain_bag\",()->\r\n            new Block(BlockBehaviour.Properties.copy(Blocks.WHITE_WOOL)));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_CRATE = BLOCKS.register(\"himekaido_crate\",()->\r\n            new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS).strength(2.0F, 3.0F).sound(SoundType.WOOD)));\r\n\r\n    public static final RegistryObject<Block> PEARLIP_CRATE = BLOCKS.register(\"pearlip_crate\",()->\r\n            new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS).strength(2.0F, 3.0F).sound(SoundType.WOOD)));\r\n    public static final RegistryObject<Block> BEEF_CRATE = BLOCKS.register(\"beef_crate\",()->\r\n            new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS).strength(2.0F, 3.0F).sound(SoundType.WOOD)));\r\n    public static final RegistryObject<Block> COOKED_BEEF_CRATE = BLOCKS.register(\"cooked_beef_crate\",()->\r\n            new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS).strength(2.0F, 3.0F).sound(SoundType.WOOD)));\r\n    public static final RegistryObject<Block> CHICKEN_CRATE = BLOCKS.register(\"chicken_crate\",()->\r\n            new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS).strength(2.0F, 3.0F).sound(SoundType.WOOD)));\r\n    public static final RegistryObject<Block> SPIDER_EYE_CRATE = BLOCKS.register(\"spider_eye_crate\",()->\r\n            new Block(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS).strength(2.0F, 3.0F).sound(SoundType.WOOD)));\r\n\r\n    public static final RegistryObject<Block> EVOLUTCORN_BLOCK = BLOCKS.register(\"evolutcorn_block\",()->\r\n            new Block(BlockBehaviour.Properties.copy(Blocks.HAY_BLOCK)));\r\n\r\n    public static final RegistryObject<Block> CULTURAL_LEGACY = BLOCKS.register(\"cultural_legacy\",\r\n            () -> new CulturalLegacyEffectToolBlock(BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().lightLevel(ageBlockEmission(2)).instabreak().sound(SoundType.GLASS).pushReaction(PushReaction.DESTROY)));\r\n\r\n    public static final RegistryObject<Block> PEARLIP_PIE = BLOCKS.register(\"pearlip_pie\",()->\r\n            new PieBlock(BlockBehaviour.Properties.copy(Blocks.CAKE),ImmortalersDelightItems.PEARLIP_PIE_SLICE));\r\n\r\n    public static final RegistryObject<Block> HIMEKAIDO_YOGURT_PIE = BLOCKS.register(\"himekaido_yogurt_pie\",()->\r\n            new PieBlock(BlockBehaviour.Properties.copy(Blocks.CAKE),ImmortalersDelightItems.HIMEKAIDO_YOGURT_PIE_SLICE));\r\n\r\n    public static final RegistryObject<Block> KWAT_WHEAT = BLOCKS.register(\"kwat_wheat\",\r\n            () -> new KwatWheatCrop(BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.CROP).pushReaction(PushReaction.DESTROY)));\r\n\r\n    public static final RegistryObject<Block> NETHER_BREAD_CREAM_SOUP = BLOCKS.register(\"nether_bread_cream_soup\",\r\n            () -> new KwatWheatToastStewedVegetablesBlock(BlockBehaviour.Properties.copy(Blocks.CAKE)));\r\n\r\n    public static final RegistryObject<Block> POD_SHELL_BURGER_MEAT = BLOCKS.register(\"pod_shell_burger_meat\",\r\n            () -> new PodShellBurgerMeatBlock(BlockBehaviour.Properties.copy(Blocks.CAKE)));\r\n\r\n    public static final RegistryObject<Block> OXIDIZED_ANCIENT_STOVE = BLOCKS.register(\"oxidized_ancient_stove\",\r\n            () -> new OxidizedAncientStoveBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER)) {\r\n            });\r\n\r\n    //oxidized\r\n\r\n    static {\r\n        //方块实体 Block Entity\r\n\r\n        ENCHANTAL_COOLER = BLOCKS.register(\"enchantal_cooler\",()->\r\n                new EnchantalCoolerBlock(BlockBehaviour.Properties.copy(Blocks.STONE)));\r\n\r\n        ENCHANTAL_COOLER_ENTITY = BLOCK_ENTITY_REGISTRY.register(\"enchantal_cooler\",\r\n                ()-> BlockEntityType.Builder.of(EnchantalCoolerBlockEntity::new, ENCHANTAL_COOLER.get()).build(null));\r\n\r\n        ANCIENT_STOVE = BLOCKS.register(\"ancient_stove\",()->\r\n                new AncientStoveBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER)));\r\n\r\n        ANCIENT_STOVE_ENTITY = BLOCK_ENTITY_REGISTRY.register(\"ancient_stove\",\r\n                ()-> BlockEntityType.Builder.of(AncientStoveBlockEntity::new, ANCIENT_STOVE.get()).build(null));\r\n\r\n        ROTATING_ROAST_MEAT_ENTITY = BLOCK_ENTITY_REGISTRY.register(\"rotating_roast_meat\",\r\n                ()-> BlockEntityType.Builder.of(RotatingRoastMeatBlockEntity::new, ROTATING_ROAST_MEAT.get()).build(null));\r\n    }\r\n\r\n    private static ToIntFunction<BlockState> ageBlockEmission(int exLightValue) {\r\n        return (p_50763_) -> {\r\n            return p_50763_.getValue(BlockStateProperties.AGE_7) + exLightValue;\r\n        };\r\n    }\r\n    private static BasicsLogsBlock log(MapColor p_285370_, MapColor p_285126_) {\r\n        return new BasicsLogsBlock(BlockBehaviour.Properties.of().mapColor((p_152624_) -> {\r\n            return p_152624_.getValue(BasicsLogsBlock.AXIS) == Direction.Axis.Y ? p_285370_ : p_285126_;\r\n        }).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava());\r\n    }\r\n\r\n    private static ButtonBlock woodenButton(BlockSetType p_278239_, FeatureFlag... p_278229_) {\r\n        BlockBehaviour.Properties blockbehaviour$properties = BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY);\r\n        if (p_278229_.length > 0) {\r\n            blockbehaviour$properties = blockbehaviour$properties.requiredFeatures(p_278229_);\r\n        }\r\n\r\n        return new ButtonBlock(blockbehaviour$properties, p_278239_, 30, true);\r\n    }\r\n\r\n\r\n    public static void register(IEventBus eventBus) {\r\n        BLOCKS.register(eventBus);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightBlocks.java b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightBlocks.java
--- a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightBlocks.java	(revision bd6cbccc7842f3760016996ac5fc52a999a67365)
+++ b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightBlocks.java	(date 1746019209425)
@@ -11,6 +11,8 @@
 import com.renyigesai.immortalers_delight.block.sign.ImmortalersDelightStandingSignBlock;
 import com.renyigesai.immortalers_delight.block.sign.ImmortalersDelightWallSignBlock;
 import net.minecraft.core.Direction;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.flag.FeatureFlag;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
@@ -31,6 +33,8 @@
 import vectorwing.farmersdelight.common.block.CabinetBlock;
 import vectorwing.farmersdelight.common.block.PieBlock;
 
+import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.function.Supplier;
 import java.util.function.ToIntFunction;
 
@@ -229,6 +233,9 @@
     public static final RegistryObject<Block> TARTARE_CHICKEN_BIG_MEAL = BLOCKS.register("tartare_chicken_big_meal",()->
             new TartareChickenBigMealBlock(BlockBehaviour.Properties.copy(Blocks.CAKE)));
 
+    public static final RegistryObject<Block> SCARLET_DEVILS_CAKE = BLOCKS.register("scarlet_devils_cake",()->
+            new ScarletDevilsCakeBlock(BlockBehaviour.Properties.copy(Blocks.CAKE)));
+
     public static final RegistryObject<Block> EVOLUTCORN_GRAIN_BAG = BLOCKS.register("evolutcorn_grain_bag",()->
             new Block(BlockBehaviour.Properties.copy(Blocks.WHITE_WOOL)));
 
@@ -271,6 +278,33 @@
             () -> new OxidizedAncientStoveBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER)) {
             });
 
+    public static final RegistryObject<Block> POISONOUS_SPIKE_TRAP = BLOCKS.register("poisonous_spike_trap",
+            () -> new SpikeTrapBlock(2.0F,
+                    BlockBehaviour.Properties.of().mapColor(MapColor.DEEPSLATE).forceSolidOff().sound(SoundType.DEEPSLATE).strength(18.0F, 50.0F).pushReaction(PushReaction.BLOCK)) {
+            });
+    public static final RegistryObject<Block> SPIKE_TRAP = BLOCKS.register("spike_trap",
+            () -> new SpikeTrapBlock(3.0F,BlockBehaviour.Properties.of().mapColor(MapColor.DEEPSLATE).forceSolidOff().sound(SoundType.DEEPSLATE).strength(18.0F, 50.0F).pushReaction(PushReaction.BLOCK)) {
+            });
+
+    public static final RegistryObject<Block> POISONOUS_LONG_SPIKE_TRAP = BLOCKS.register("poisonous_long_spike_trap",
+            () -> new SpikeTrapBlock(true,2.0F,
+                    BlockBehaviour.Properties.copy(Blocks.BIG_DRIPLEAF).mapColor(MapColor.DEEPSLATE).sound(SoundType.DEEPSLATE).strength(18.0F, 50.0F).pushReaction(PushReaction.BLOCK)));
+    public static final RegistryObject<Block> LONG_SPIKE_TRAP = BLOCKS.register("long_spike_trap",
+            () -> new SpikeTrapBlock(true,4.0F,
+                    BlockBehaviour.Properties.copy(Blocks.BIG_DRIPLEAF).mapColor(MapColor.DEEPSLATE).sound(SoundType.DEEPSLATE).strength(18.0F, 50.0F).pushReaction(PushReaction.BLOCK)));
+//
+    public static final RegistryObject<Block> POISONOUS_METAL_CALTROP = BLOCKS.register("poisonous_metal_caltrop",
+            () -> new MetalCaltropBlock(false,2.0F,
+                    BlockBehaviour.Properties.copy(Blocks.PISTON).strength(55.0F, 1200.0F)) {
+            });
+    public static final RegistryObject<Block> METAL_CALTROP = BLOCKS.register("metal_caltrop",
+            () -> new MetalCaltropBlock(false,3.0F,
+                    BlockBehaviour.Properties.copy(Blocks.PISTON).strength(55.0F, 1200.0F).pushReaction(PushReaction.NORMAL)) {
+            });
+    public static final RegistryObject<Block> SPIKE_BAR_BASE = BLOCKS.register("spike_bar_base",
+            () -> new IronBarsBlock(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(15.0F, 50.0F).sound(SoundType.METAL).noOcclusion()));
+    public static final RegistryObject<Block> SPIKE_BAR = BLOCKS.register("spike_bar",
+            () -> new IronBarsBlock(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().strength(15.0F, 50.0F).sound(SoundType.METAL).noOcclusion()));
     //oxidized
 
     static {
Index: src/main/java/com/renyigesai/immortalers_delight/block/ScarletDevilsCakeBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/block/ScarletDevilsCakeBlock.java b/src/main/java/com/renyigesai/immortalers_delight/block/ScarletDevilsCakeBlock.java
new file mode 100644
--- /dev/null	(date 1745935872875)
+++ b/src/main/java/com/renyigesai/immortalers_delight/block/ScarletDevilsCakeBlock.java	(date 1745935872875)
@@ -0,0 +1,160 @@
+package com.renyigesai.immortalers_delight.block;
+
+import com.mojang.datafixers.util.Pair;
+import com.renyigesai.immortalers_delight.init.ImmortalersDelightItems;
+import com.renyigesai.immortalers_delight.util.ItemUtils;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.effect.MobEffects;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.HorizontalDirectionalBlock;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.VoxelShape;
+import vectorwing.farmersdelight.common.tag.ModTags;
+
+public class ScarletDevilsCakeBlock extends HorizontalDirectionalBlock {
+
+    public static final IntegerProperty BITES = IntegerProperty.create("bites",0,8);
+    public static final VoxelShape BOX = box(1.0D,0.0D,1.0D,15.0D,12.0D,15.0D);
+
+    public ScarletDevilsCakeBlock(Properties p_54120_) {
+        super(p_54120_);
+        super.registerDefaultState(defaultBlockState().setValue(BITES,0).setValue(FACING, Direction.NORTH));
+    }
+
+    @Override
+    public VoxelShape getShape(BlockState state, BlockGetter getter, BlockPos pos, CollisionContext context) {
+        return BOX;
+    }
+
+    @Override
+    public InteractionResult use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hitResult) {
+        ItemStack hand_stack = player.getItemInHand(hand);
+            if (hand_stack.is(ModTags.KNIVES)) {
+                return takeServing(state, level, pos, player);
+            }
+            if (!hand_stack.is(ModTags.KNIVES)){
+                return eat(state, level, pos, player);
+            }
+            return super.use(state, level, pos, player, hand, hitResult);
+    }
+
+    public InteractionResult eat(BlockState state, Level level, BlockPos pos, Player player){
+        int bites = state.getValue(BITES);
+        if (!player.canEat(false)) {return InteractionResult.PASS;}
+        int eatCount = 1;
+        for (int i = 1;bites + i <= 8; i++){
+            if (player.canEat(false)){
+                eatCount = i;
+                player.getFoodData().eat(ImmortalersDelightItems.SCARLET_DEVILS_CAKE_SLICE.get(),
+                        new ItemStack(ImmortalersDelightItems.SCARLET_DEVILS_CAKE_SLICE.get()));
+                level.gameEvent(player, GameEvent.EAT, pos);
+                level.playSound(null, pos, SoundEvents.GENERIC_EAT, SoundSource.PLAYERS, 0.8F, 0.8F);
+            }else {
+                break;
+            }
+        }
+        addFoodPoisonEffect(new ItemStack(ImmortalersDelightItems.SCARLET_DEVILS_CAKE_SLICE.get()),level,player,eatCount);
+        if (bites + eatCount < 9) {
+            setBlock(bites + eatCount,state,level,pos);
+        }else {
+            level.destroyBlock(pos, false);
+            vectorwing.farmersdelight.common.utility.ItemUtils.spawnItemEntity(level,
+                    new ItemStack(Items.BOWL),pos.getX() + 0.5,pos.getY() + 0.5,pos.getZ() + 0.5,0.0,0.0,0.0);
+            level.playSound(null,pos, SoundEvents.WOOL_BREAK, SoundSource.PLAYERS, 0.8F, 0.8F);
+        }
+        return InteractionResult.SUCCESS;
+    }
+    /**
+     * 该方法用于处理实体食用物品后添加对应的药水效果。
+     * 当实体食用某个可食用物品时，会根据物品的属性尝试为实体添加相应的药水效果。
+     *
+     * @param p_21064_ 被食用的物品栈，包含了具体的物品及其数量等信息。
+     * @param p_21065_ 实体所在的游戏世界，用于判断是否为客户端，以及获取随机数生成器。
+     * @param p_21066_ 食用物品的实体，即要添加药水效果的对象。
+     */
+    private void addFoodPoisonEffect(ItemStack p_21064_, Level p_21065_, LivingEntity p_21066_, int timeBuffer) {
+        // 从物品栈中获取具体的物品
+        Item item = p_21064_.getItem();
+        // 检查该物品是否为可食用物品
+        if (item.isEdible()) {
+            // 遍历物品的食物属性中定义的所有药水效果及其概率
+            if (!p_21065_.isClientSide && p_21064_.getFoodProperties(p_21066_) != null) {
+                for (Pair<MobEffectInstance, Float> pair : p_21064_.getFoodProperties(p_21066_).getEffects()) {
+                    // 条件判断：
+                    // 1. 当前不是客户端，因为药水效果的添加通常在服务器端处理，以保证数据一致性。
+                    // 2. 药水效果实例不为空，确保有有效的药水效果。
+                    if (pair.getFirst() != null) {
+                        // 创建一个新的药水效果实例，使用原有的药水效果实例作为模板。
+                        // 然后将该药水效果添加到食用物品的实体上。
+                        if (timeBuffer > 1) {
+                            int time = pair.getFirst().getDuration() * timeBuffer;
+                            int lv = pair.getFirst().getAmplifier();
+                            p_21066_.addEffect(new MobEffectInstance(pair.getFirst().getEffect(),time,lv));
+                            //如果时间倍率大于1，会将持续时间乘以倍率
+                        } else p_21066_.addEffect(new MobEffectInstance(pair.getFirst()));
+                    }
+                }
+                p_21066_.addEffect(new MobEffectInstance(MobEffects.HEAL,1));
+            }
+        }
+    }
+    public InteractionResult takeServing(BlockState state, Level level, BlockPos pos, Player player){
+        int bites = state.getValue(BITES);
+        if (bites < 8){
+            ItemUtils.givePlayerItem(player,new ItemStack(ImmortalersDelightItems.SCARLET_DEVILS_CAKE_SLICE.get()));
+            setBlock(bites + 1,state,level,pos);
+        }else {
+            level.destroyBlock(pos, false);
+            vectorwing.farmersdelight.common.utility.ItemUtils.spawnItemEntity(level,
+                    new ItemStack(Items.BOWL),pos.getX() + 0.5,pos.getY() + 0.5,pos.getZ() + 0.5,0.0,0.0,0.0);
+        }
+        level.playSound(null,pos, SoundEvents.WOOL_BREAK, SoundSource.PLAYERS, 0.8F, 0.8F);
+        return InteractionResult.SUCCESS;
+    }
+
+    public void setBlock(int variate,BlockState state, Level level, BlockPos pos){
+        level.setBlock(pos, state.setValue(BITES, variate), 3);
+    }
+
+    @Override
+    public BlockState getStateForPlacement(BlockPlaceContext pContext) {
+        return this.defaultBlockState().setValue(FACING, pContext.getHorizontalDirection());
+    }
+
+    @Override
+    public BlockState updateShape(BlockState stateIn, Direction facing, BlockState facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+        return facing == Direction.DOWN && !stateIn.canSurvive(level, currentPos) ? Blocks.AIR.defaultBlockState() : super.updateShape(stateIn, facing, facingState, level, currentPos, facingPos);
+    }
+
+    @Override
+    public boolean canSurvive(BlockState state, LevelReader level, BlockPos pos) {
+        return level.getBlockState(pos.below()).isSolid();
+    }
+
+    @Override
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
+        builder.add(BITES,FACING);
+    }
+}
Index: src/main/java/com/renyigesai/immortalers_delight/block/CulturalLegacyEffectToolBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.block;\r\n\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightItems;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.core.particles.ParticleTypes;\r\nimport net.minecraft.server.level.ServerLevel;\r\nimport net.minecraft.sounds.SoundEvent;\r\nimport net.minecraft.sounds.SoundSource;\r\nimport net.minecraft.tags.BlockTags;\r\nimport net.minecraft.util.ParticleUtils;\r\nimport net.minecraft.util.RandomSource;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.minecraft.world.InteractionResult;\r\nimport net.minecraft.world.effect.MobEffect;\r\nimport net.minecraft.world.effect.MobEffects;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.level.*;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.minecraft.world.level.block.Blocks;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraft.world.level.block.state.StateDefinition;\r\nimport net.minecraft.world.level.block.state.properties.BlockStateProperties;\r\nimport net.minecraft.world.level.block.state.properties.BooleanProperty;\r\nimport net.minecraft.world.level.block.state.properties.IntegerProperty;\r\nimport net.minecraft.world.level.material.FluidState;\r\nimport net.minecraft.world.level.storage.loot.LootParams;\r\nimport net.minecraft.world.phys.BlockHitResult;\r\nimport net.minecraft.world.phys.shapes.CollisionContext;\r\nimport net.minecraft.world.phys.shapes.Shapes;\r\nimport net.minecraft.world.phys.shapes.VoxelShape;\r\nimport net.minecraftforge.common.MinecraftForge;\r\nimport net.minecraftforge.event.enchanting.EnchantmentLevelSetEvent;\r\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\r\nimport net.minecraftforge.fml.common.Mod;\r\nimport vectorwing.farmersdelight.common.registry.ModSounds;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.OptionalInt;\r\n\r\n@Mod.EventBusSubscriber\r\npublic class CulturalLegacyEffectToolBlock extends ReapCropBlock{\r\n    /*\r\n    用于显示附魔台粒子的列表\r\n     */\r\n    public static final List<BlockPos> BOOKSHELF_OFFSETS = BlockPos.betweenClosedStream(-2, 0, -2, 2, 1, 2).filter((p_207914_) -> {\r\n        return Math.abs(p_207914_.getX()) == 2 || Math.abs(p_207914_.getZ()) == 2;\r\n    }).map(BlockPos::immutable).toList();\r\n\r\n    /*\r\n     结构空位的轮廓形状\r\n     */\r\n    protected static final VoxelShape OUTLINE_SHAPE = Block.box(6.0D, 6.0D, 6.0D, 10.0D, 10.0D, 10.0D);\r\n\r\n    public CulturalLegacyEffectToolBlock(Properties p_52247_) {\r\n        super(p_52247_);\r\n        MinecraftForge.EVENT_BUS.register(this);\r\n    }\r\n    public boolean isRandomlyTicking(BlockState pState) {\r\n        return true;\r\n    }\r\n    /*\r\n     执行随机 tick 逻辑，移除方块\r\n     */\r\n    public void randomTick(BlockState pState, ServerLevel pLevel, BlockPos pPos, RandomSource pRandom) {\r\n        /*\r\n        执行生长逻辑\r\n         */\r\n        if (!pLevel.isAreaLoaded(pPos, 1)) return; // Forge: prevent loading unloaded chunks when checking neighbor's light\r\n        if (pLevel.getRawBrightness(pPos, 0) >= 9) {\r\n            int i = this.getAge(pState);\r\n            if (i < this.getMaxAge()) {\r\n                float f = getGrowthSpeed(this, pLevel, pPos);\r\n                if (net.minecraftforge.common.ForgeHooks.onCropsGrowPre(pLevel, pPos, pState, pRandom.nextInt((int)(25.0F / f) + 1) == 0)) {\r\n                    pLevel.setBlock(pPos,Blocks.AIR.defaultBlockState(),2);\r\n                    net.minecraftforge.common.ForgeHooks.onCropsGrowPost(pLevel, pPos, pState);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*\r\n     获取树叶方块的光照强度，这里返回1，表示树叶有一定的透光性\r\n     */\r\n    public int getLightBlock(BlockState p_54460_, BlockGetter p_54461_, BlockPos p_54462_) {\r\n        return 1;\r\n    }\r\n    /*\r\n     在客户端定期调用，用于显示附魔台粒子效果\r\n     */\r\n    public void animateTick(BlockState pState, Level pLevel, BlockPos pPos, RandomSource pRandom) {\r\n        super.animateTick(pState, pLevel, pPos, pRandom);\r\n\r\n        for(BlockPos blockpos : BOOKSHELF_OFFSETS) {\r\n            if (pRandom.nextInt(16) == 0 && isValidBookShelf(pLevel, pPos, blockpos)) {\r\n                pLevel.addParticle(ParticleTypes.ENCHANT, (double)pPos.getX() + 0.5D, (double)pPos.getY() + 2.0D, (double)pPos.getZ() + 0.5D, (double)((float)blockpos.getX() + pRandom.nextFloat()) - 0.5D, (double)((float)blockpos.getY() - pRandom.nextFloat() - 1.0F), (double)((float)blockpos.getZ() + pRandom.nextFloat()) - 0.5D);\r\n            }\r\n        }\r\n\r\n    }\r\n    public static boolean isValidBookShelf(Level pLevel, BlockPos pTablePos, BlockPos pOffsetPos) {\r\n        return pLevel.getBlockState(pTablePos.offset(pOffsetPos)).getEnchantPowerBonus(pLevel, pTablePos.offset(pOffsetPos)) != 0 && pLevel.getBlockState(pTablePos.offset(pOffsetPos.getX() / 2, pOffsetPos.getY(), pOffsetPos.getZ() / 2)).is(BlockTags.ENCHANTMENT_POWER_TRANSMITTER);\r\n    }\r\n    /*\r\n     判断作物是否能在给定环境中存活\r\n     重写存活条件以确保能跟树叶一样浮空放置\r\n     */\r\n    @Override\r\n    public boolean canSurvive(BlockState pState, LevelReader pLevel, BlockPos pPos) {\r\n        return (true);\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public void onEnchantmentLevelSet(EnchantmentLevelSetEvent event) {\r\n        if (event == null || event.isCanceled()) {\r\n            return;\r\n        }\r\n\r\n        // 获取世界和附魔台的位置\r\n        Level level = event.getLevel();\r\n        BlockPos pos = event.getPos();\r\n\r\n        // 以附魔台为中心，检查 5*5 范围内的方块\r\n        int goldBlockCount = maxAgeToolBlocksInRange(level, pos, 2); // 2 表示从中心到边缘的距离\r\n\r\n        // 根据金块数量计算新的附魔等级\r\n        int newLevel = calculateNewLevel(event.getEnchantLevel(), goldBlockCount);\r\n\r\n        // 设置新的附魔等级\r\n        event.setEnchantLevel(newLevel);\r\n    }\r\n\r\n    /**\r\n     * 处理指定范围内的指定方块\r\n     * @param level 世界\r\n     * @param centerPos 中心位置\r\n     * @param range 范围（从中心到边缘的距离）\r\n     * @return 最大Age\r\n     */\r\n    private int maxAgeToolBlocksInRange(Level level, BlockPos centerPos, int range) {\r\n        int maxAge = 0;\r\n        for (int x = -range; x <= range; x++) {\r\n            for (int y = -range; y <= range; y++) {\r\n                for (int z = -range; z <= range; z++) {\r\n                    BlockPos checkPos = centerPos.offset(x, y, z);\r\n                    if (level.getBlockState(checkPos).getBlock() instanceof CulturalLegacyEffectToolBlock) {\r\n                        int ageHere = this.getAge(level.getBlockState(checkPos));\r\n                        maxAge = maxAge > ageHere + 1 ? maxAge : ageHere + 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return maxAge;\r\n    }\r\n\r\n    /**\r\n     * 范围内最大AGE的当前方块设置附魔等级\r\n     * @param originalLevel 原始附魔等级\r\n     * @param maxAge 范围内最大Age\r\n     * @return 新的附魔等级\r\n     */\r\n    private static int calculateNewLevel(int originalLevel, int maxAge) {\r\n        // 根据范围内最大AGE的当前方块设置附魔等级。\r\n        int newLevel = originalLevel + 8 + 4 * (maxAge - 1);\r\n        return Math.min(30, newLevel);\r\n    }\r\n    @Override\r\n    protected ItemLike getBaseSeedId() {\r\n        return ImmortalersDelightItems.BOWL_OF_MILLENIAN_BAMBOO.get();\r\n    }\r\n\r\n    /*\r\n    获取仙人掌的轮廓形状\r\n     */\r\n    public VoxelShape getShape(BlockState pState, BlockGetter pLevel, BlockPos pPos, CollisionContext pContext) {\r\n        return OUTLINE_SHAPE;\r\n    }\r\n\r\n    @Override\r\n    public List<ItemStack> getDrops(BlockState p_287732_, LootParams.Builder p_287596_) {\r\n        return super.getDrops(p_287732_, p_287596_);\r\n    }\r\n\r\n    @Override\r\n    public boolean onDestroyedByPlayer(BlockState state, Level level, BlockPos pos, Player player, boolean willHarvest, FluidState fluid) {\r\n        return super.onDestroyedByPlayer(state, level, pos, player, willHarvest, fluid);\r\n    }\r\n    @Override\r\n    public boolean isValidBonemealTarget(LevelReader p_255715_, BlockPos p_52259_, BlockState p_52260_, boolean p_52261_) {\r\n        return false;\r\n    }\r\n    @Override\r\n    public void performBonemeal(ServerLevel p_221040_, RandomSource p_221041_, BlockPos p_221042_, BlockState p_221043_) {\r\n        if (this.getAge(p_221043_) < this.getMaxAge()) {\r\n            p_221040_.setBlock(p_221042_, this.getStateForAge(this.getAge(p_221043_) + 1), 2);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/block/CulturalLegacyEffectToolBlock.java b/src/main/java/com/renyigesai/immortalers_delight/block/CulturalLegacyEffectToolBlock.java
--- a/src/main/java/com/renyigesai/immortalers_delight/block/CulturalLegacyEffectToolBlock.java	(revision bd6cbccc7842f3760016996ac5fc52a999a67365)
+++ b/src/main/java/com/renyigesai/immortalers_delight/block/CulturalLegacyEffectToolBlock.java	(date 1745935887198)
@@ -124,11 +124,13 @@
         // 以附魔台为中心，检查 5*5 范围内的方块
         int goldBlockCount = maxAgeToolBlocksInRange(level, pos, 2); // 2 表示从中心到边缘的距离
 
-        // 根据金块数量计算新的附魔等级
-        int newLevel = calculateNewLevel(event.getEnchantLevel(), goldBlockCount);
+        if (goldBlockCount > 0) {
+            // 如果有金,根据金块数量计算新的附魔等级
+            int newLevel = calculateNewLevel(event.getEnchantLevel(), goldBlockCount);
 
-        // 设置新的附魔等级
-        event.setEnchantLevel(newLevel);
+            // 设置新的附魔等级
+            event.setEnchantLevel(newLevel);
+        }
     }
 
     /**
Index: src/main/java/com/renyigesai/immortalers_delight/block/MetalCaltropBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/block/MetalCaltropBlock.java b/src/main/java/com/renyigesai/immortalers_delight/block/MetalCaltropBlock.java
new file mode 100644
--- /dev/null	(date 1746019209410)
+++ b/src/main/java/com/renyigesai/immortalers_delight/block/MetalCaltropBlock.java	(date 1746019209410)
@@ -0,0 +1,614 @@
+package com.renyigesai.immortalers_delight.block;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import com.renyigesai.immortalers_delight.init.ImmortalersDelightItems;
+import com.renyigesai.immortalers_delight.potion.immortaleffects.GasPoisonEffect;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.tags.BlockTags;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.SignalGetter;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.DirectionalBlock;
+import net.minecraft.world.level.block.Mirror;
+import net.minecraft.world.level.block.Rotation;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.piston.MovingPistonBlock;
+import net.minecraft.world.level.block.piston.PistonHeadBlock;
+import net.minecraft.world.level.block.piston.PistonMovingBlockEntity;
+import net.minecraft.world.level.block.piston.PistonStructureResolver;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.BooleanProperty;
+import net.minecraft.world.level.block.state.properties.PistonType;
+import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.level.material.PushReaction;
+import net.minecraft.world.level.pathfinder.PathComputationType;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.Shapes;
+import net.minecraft.world.phys.shapes.VoxelShape;
+
+/**
+ * 活塞基础方块类，继承自 DirectionalBlock，用于处理活塞方块的行为，包括放置、触发、移动方块等操作。
+ */
+public class MetalCaltropBlock extends DirectionalBlock {
+    // 定义实体伤害值
+    private float entity_damage = 1.0F;
+    // 定义活塞的扩展状态属性，用于表示活塞是否处于扩展状态
+    public static final BooleanProperty EXTENDED = BlockStateProperties.EXTENDED;
+    // 触发活塞扩展的事件编号
+    public static final int TRIGGER_EXTEND = 0;
+    // 触发活塞收缩的事件编号
+    public static final int TRIGGER_CONTRACT = 1;
+    // 触发活塞掉落的事件编号
+    public static final int TRIGGER_DROP = 2;
+    // 活塞平台的厚度
+    public static final float PLATFORM_THICKNESS = 4.0F;
+    // 活塞面向东方时的碰撞形状
+    protected static final VoxelShape EAST_AABB = Block.box(1.0D, 1.0D, 1.0D, 12.0D, 15.0D, 15.0D);
+    // 活塞面向西方时的碰撞形状
+    protected static final VoxelShape WEST_AABB = Block.box(4.0D, 1.0D, 1.0D, 15.0D, 15.0D, 15.0D);
+    // 活塞面向南方时的碰撞形状
+    protected static final VoxelShape SOUTH_AABB = Block.box(1.0D, 1.0D, 1.0D, 15.0D, 15.0D, 12.0D);
+    // 活塞面向北方时的碰撞形状
+    protected static final VoxelShape NORTH_AABB = Block.box(1.0D, 1.0D, 4.0D, 15.0D, 15.0D, 15.0D);
+    // 活塞面向上方时的碰撞形状
+    protected static final VoxelShape UP_AABB = Block.box(1.0D, 1.0D, 1.0D, 15.0D, 12.0D, 15.0D);
+    // 活塞面向下方时的碰撞形状
+    protected static final VoxelShape DOWN_AABB = Block.box(1.0D, 4.0D, 1.0D, 15.0D, 15.0D, 15.0D);
+    // 表示该活塞是否为粘性活塞
+    private final boolean isSticky;
+
+    /**
+     * 构造函数，初始化活塞方块的属性。
+     * @param pIsSticky 是否为粘性活塞
+     * @param pProperties 方块的行为属性
+     */
+    public MetalCaltropBlock(boolean pIsSticky, Properties pProperties) {
+        super(pProperties);
+        // 注册默认的方块状态，包括面向方向和扩展状态
+        this.registerDefaultState(this.stateDefinition.any().setValue(FACING, Direction.NORTH).setValue(EXTENDED, Boolean.valueOf(false)));
+        this.isSticky = pIsSticky;
+    }
+
+    public MetalCaltropBlock(boolean pIsSticky, float entity_damage,Properties pProperties) {
+        super(pProperties);
+        // 注册默认的方块状态，包括面向方向和扩展状态
+        this.registerDefaultState(this.stateDefinition.any().setValue(FACING, Direction.NORTH).setValue(EXTENDED, Boolean.valueOf(false)));
+        this.isSticky = pIsSticky;
+        this.entity_damage = entity_damage;
+    }
+
+    /**
+     * 根据方块状态返回其碰撞形状。
+     * @param pState 方块状态
+     * @param pLevel 方块所在的世界
+     * @param pPos 方块的位置
+     * @param pContext 碰撞上下文
+     * @return 方块的碰撞形状
+     */
+    public VoxelShape getShape(BlockState pState, BlockGetter pLevel, BlockPos pPos, CollisionContext pContext) {
+        if (!pState.getValue(EXTENDED)) {
+            // 根据活塞的面向方向返回对应的碰撞形状
+            switch ((Direction)pState.getValue(FACING)) {
+                case DOWN:
+                    return DOWN_AABB;
+                case UP:
+                default:
+                    return UP_AABB;
+                case NORTH:
+                    return NORTH_AABB;
+                case SOUTH:
+                    return SOUTH_AABB;
+                case WEST:
+                    return WEST_AABB;
+                case EAST:
+                    return EAST_AABB;
+            }
+        } else {
+            // 未扩展时返回完整方块的形状
+            return Shapes.block();
+        }
+    }
+
+    /**
+     * 当方块被放置后调用，检查是否需要扩展活塞。
+     * @param pLevel 方块所在的世界
+     * @param pPos 方块的位置
+     * @param pState 方块状态
+     * @param pPlacer 放置方块的实体
+     * @param pStack 放置方块的物品栈
+     */
+//    public void setPlacedBy(Level pLevel, BlockPos pPos, BlockState pState, LivingEntity pPlacer, ItemStack pStack) {
+//        if (!pLevel.isClientSide) {
+//            // 在服务器端检查是否需要扩展活塞
+//            this.checkIfExtend(pLevel, pPos, pState);
+//        }
+//    }
+
+    /**
+     * 当邻居方块发生变化时调用，检查是否需要扩展或收缩活塞。
+     * @param pState 方块状态
+     * @param pLevel 方块所在的世界
+     * @param pPos 方块的位置
+     * @param pBlock 发生变化的邻居方块
+     * @param pFromPos 邻居方块的位置
+     * @param pIsMoving 方块是否正在移动
+     */
+//    public void neighborChanged(BlockState pState, Level pLevel, BlockPos pPos, Block pBlock, BlockPos pFromPos, boolean pIsMoving) {
+//        if (!pLevel.isClientSide) {
+//            // 在服务器端检查是否需要扩展或收缩活塞
+//            this.checkIfExtend(pLevel, pPos, pState);
+//        }
+//    }
+
+    /**
+     * 当方块被放置时调用，检查是否需要扩展活塞。
+     * @param pState 方块状态
+     * @param pLevel 方块所在的世界
+     * @param pPos 方块的位置
+     * @param pOldState 旧的方块状态
+     * @param pIsMoving 方块是否正在移动
+     */
+//    public void onPlace(BlockState pState, Level pLevel, BlockPos pPos, BlockState pOldState, boolean pIsMoving) {
+//        if (!pOldState.is(pState.getBlock())) {
+//            if (!pLevel.isClientSide && pLevel.getBlockEntity(pPos) == null) {
+//                // 在服务器端且方块实体为空时检查是否需要扩展活塞
+//                this.checkIfExtend(pLevel, pPos, pState);
+//            }
+//        }
+//    }
+
+    /**
+     * 获取方块放置时的状态。
+     * @param pContext 方块放置上下文
+     * @return 方块放置时的状态
+     */
+    public BlockState getStateForPlacement(BlockPlaceContext pContext) {
+        return this.defaultBlockState()
+                .setValue(FACING, pContext.getNearestLookingDirection().getOpposite())
+                .setValue(EXTENDED, Boolean.valueOf(false));
+    }
+
+    /**
+     * 检查活塞是否需要扩展或收缩。
+     * @param pLevel 方块所在的世界
+     * @param pPos 方块的位置
+     * @param pState 方块状态
+     */
+//    private void checkIfExtend(Level pLevel, BlockPos pPos, BlockState pState) {
+//        // 获取活塞的面向方向
+//        Direction direction = pState.getValue(FACING);
+//        // 检查活塞周围的方块是否提供信号
+//        boolean flag = this.getNeighborSignal(pLevel, pPos, direction);
+//        if (flag && !pState.getValue(EXTENDED)) {
+//            // 如果有信号且活塞未扩展，尝试扩展活塞
+//            if ((new PistonStructureResolver(pLevel, pPos, direction, true)).resolve()) {
+//                pLevel.blockEvent(pPos, this, 0, direction.get3DDataValue());
+//            }
+//        } else if (!flag && pState.getValue(EXTENDED)) {
+//            // 如果没有信号且活塞已扩展，尝试收缩活塞
+//            BlockPos blockpos = pPos.relative(direction, 2);
+//            BlockState blockstate = pLevel.getBlockState(blockpos);
+//            int i = 1;
+//            if (blockstate.is(Blocks.MOVING_PISTON) && blockstate.getValue(FACING) == direction) {
+//                BlockEntity blockentity = pLevel.getBlockEntity(blockpos);
+//                if (blockentity instanceof PistonMovingBlockEntity) {
+//                    PistonMovingBlockEntity pistonmovingblockentity = (PistonMovingBlockEntity)blockentity;
+//                    if (pistonmovingblockentity.isExtending() && (pistonmovingblockentity.getProgress(0.0F) < 0.5F || pLevel.getGameTime() == pistonmovingblockentity.getLastTicked() || ((ServerLevel)pLevel).isHandlingTick())) {
+//                        i = 2;
+//                    }
+//                }
+//            }
+//            pLevel.blockEvent(pPos, this, i, direction.get3DDataValue());
+//        }
+//    }
+
+    /**
+     * 检查活塞周围的方块是否提供信号。
+     * @param pSignalGetter 信号获取器
+     * @param pPos 方块的位置
+     * @param pDirection 活塞的面向方向
+     * @return 是否有信号
+     */
+    private boolean getNeighborSignal(SignalGetter pSignalGetter, BlockPos pPos, Direction pDirection) {
+        // 检查除面向方向外的其他方向是否有信号
+        for(Direction direction : Direction.values()) {
+            if (direction != pDirection && pSignalGetter.hasSignal(pPos.relative(direction), direction)) {
+                return true;
+            }
+        }
+        // 检查下方是否有信号
+        if (pSignalGetter.hasSignal(pPos, Direction.DOWN)) {
+            return true;
+        } else {
+            BlockPos blockpos = pPos.above();
+            // 检查上方周围的方块是否有信号
+            for(Direction direction1 : Direction.values()) {
+                if (direction1 != Direction.DOWN && pSignalGetter.hasSignal(blockpos.relative(direction1), direction1)) {
+                    return true;
+                }
+            }
+            return false;
+        }
+    }
+
+    /**
+     * 处理方块事件，包括活塞的扩展、收缩和掉落事件。
+     * @param pState 方块状态
+     * @param pLevel 方块所在的世界
+     * @param pPos 方块的位置
+     * @param pId 事件编号
+     * @param pParam 事件参数
+     * @return 是否处理成功
+     */
+//    public boolean triggerEvent(BlockState pState, Level pLevel, BlockPos pPos, int pId, int pParam) {
+//        // 获取活塞的面向方向
+//        Direction direction = pState.getValue(FACING);
+//        // 设置活塞为扩展状态
+//        BlockState blockstate = pState.setValue(EXTENDED, Boolean.valueOf(true));
+//        if (!pLevel.isClientSide) {
+//            // 在服务器端检查是否有信号
+//            boolean flag = this.getNeighborSignal(pLevel, pPos, direction);
+//            if (flag && (pId == 1 || pId == 2)) {
+//                // 如果有信号且是收缩或掉落事件，设置方块为扩展状态
+//                pLevel.setBlock(pPos, blockstate, 2);
+//                return false;
+//            }
+//            if (!flag && pId == 0) {
+//                // 如果没有信号且是扩展事件，不处理
+//                return false;
+//            }
+//        }
+//        if (pId == 0) {
+//            // 扩展事件
+//            if (net.minecraftforge.event.ForgeEventFactory.onPistonMovePre(pLevel, pPos, direction, true)) return false;
+//            if (!this.moveBlocks(pLevel, pPos, direction, true)) {
+//                return false;
+//            }
+//            pLevel.setBlock(pPos, blockstate, 67);
+//            pLevel.playSound((Player)null, pPos, SoundEvents.PISTON_EXTEND, SoundSource.BLOCKS, 0.5F, pLevel.random.nextFloat() * 0.25F + 0.6F);
+//            pLevel.gameEvent(GameEvent.BLOCK_ACTIVATE, pPos, GameEvent.Context.of(blockstate));
+//        } else if (pId == 1 || pId == 2) {
+//            // 收缩或掉落事件
+//            if (net.minecraftforge.event.ForgeEventFactory.onPistonMovePre(pLevel, pPos, direction, false)) return false;
+//            BlockEntity blockentity1 = pLevel.getBlockEntity(pPos.relative(direction));
+//            if (blockentity1 instanceof PistonMovingBlockEntity) {
+//                ((PistonMovingBlockEntity)blockentity1).finalTick();
+//            }
+//            BlockState blockstate1 = Blocks.MOVING_PISTON.defaultBlockState().setValue(MovingPistonBlock.FACING, direction).setValue(MovingPistonBlock.TYPE, this.isSticky ? PistonType.STICKY : PistonType.DEFAULT);
+//            pLevel.setBlock(pPos, blockstate1, 20);
+//            pLevel.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(pPos, blockstate1, this.defaultBlockState().setValue(FACING, Direction.from3DDataValue(pParam & 7)), direction, false, true));
+//            pLevel.blockUpdated(pPos, blockstate1.getBlock());
+//            blockstate1.updateNeighbourShapes(pLevel, pPos, 2);
+//            if (this.isSticky) {
+//                BlockPos blockpos = pPos.offset(direction.getStepX() * 2, direction.getStepY() * 2, direction.getStepZ() * 2);
+//                BlockState blockstate2 = pLevel.getBlockState(blockpos);
+//                boolean flag1 = false;
+//                if (blockstate2.is(Blocks.MOVING_PISTON)) {
+//                    BlockEntity blockentity = pLevel.getBlockEntity(blockpos);
+//                    if (blockentity instanceof PistonMovingBlockEntity) {
+//                        PistonMovingBlockEntity pistonmovingblockentity = (PistonMovingBlockEntity)blockentity;
+//                        if (pistonmovingblockentity.getDirection() == direction && pistonmovingblockentity.isExtending()) {
+//                            pistonmovingblockentity.finalTick();
+//                            flag1 = true;
+//                        }
+//                    }
+//                }
+//                if (!flag1) {
+//                    if (pId != 1 || blockstate2.isAir() || !isPushable(blockstate2, pLevel, blockpos, direction.getOpposite(), false, direction) || blockstate2.getPistonPushReaction() != PushReaction.NORMAL && !blockstate2.is(Blocks.PISTON) && !blockstate2.is(Blocks.STICKY_PISTON)) {
+//                        pLevel.removeBlock(pPos.relative(direction), false);
+//                    } else {
+//                        this.moveBlocks(pLevel, pPos, direction, false);
+//                    }
+//                }
+//            } else {
+//                pLevel.removeBlock(pPos.relative(direction), false);
+//            }
+//            pLevel.playSound((Player)null, pPos, SoundEvents.PISTON_CONTRACT, SoundSource.BLOCKS, 0.5F, pLevel.random.nextFloat() * 0.15F + 0.6F);
+//            pLevel.gameEvent(GameEvent.BLOCK_DEACTIVATE, pPos, GameEvent.Context.of(blockstate1));
+//        }
+//        net.minecraftforge.event.ForgeEventFactory.onPistonMovePost(pLevel, pPos, direction, (pId == 0));
+//        return true;
+//    }
+
+       /**
+    * Checks if the piston can push the given BlockState.
+    * 检查活塞是否可以推动给定的方块状态。
+    * 
+    * @param pState            要检查的方块状态
+    * @param pLevel            方块所在的世界
+    * @param pPos              方块的位置
+    * @param pMovementDirection 活塞推动的方向
+    * @param pAllowDestroy     是否允许破坏方块
+    * @param pPistonFacing     活塞的朝向
+    * @return 如果可以推动返回true，否则返回false
+    */
+//   public static boolean isPushable(BlockState pState, Level pLevel, BlockPos pPos, Direction pMovementDirection, boolean pAllowDestroy, Direction pPistonFacing) {
+//      // 检查方块位置是否在世界的有效高度范围内，并且在世界边界内
+//      if (pPos.getY() >= pLevel.getMinBuildHeight() && pPos.getY() <= pLevel.getMaxBuildHeight() - 1 && pLevel.getWorldBorder().isWithinBounds(pPos)) {
+//         // 如果方块是空气，直接返回true，因为空气可以被推动
+//         if (pState.isAir()) {
+//            return true;
+//         // 排除一些无法被推动的方块，如黑曜石、哭泣的黑曜石、重生锚和强化深板岩
+//         } else if (!pState.is(Blocks.OBSIDIAN) && !pState.is(Blocks.CRYING_OBSIDIAN) && !pState.is(Blocks.RESPAWN_ANCHOR) && !pState.is(Blocks.REINFORCED_DEEPSLATE)) {
+//            // 检查推动方向是否为向下且方块位于世界的最低高度，若是则不能推动
+//            if (pMovementDirection == Direction.DOWN && pPos.getY() == pLevel.getMinBuildHeight()) {
+//               return false;
+//            // 检查推动方向是否为向上且方块位于世界的最高高度，若是则不能推动
+//            } else if (pMovementDirection == Direction.UP && pPos.getY() == pLevel.getMaxBuildHeight() - 1) {
+//               return false;
+//            } else {
+//               // 排除活塞方块，如果不是活塞方块
+//               if (!pState.is(Blocks.PISTON) && !pState.is(Blocks.STICKY_PISTON)) {
+//                  // 如果方块的破坏速度为 -1.0F，表示不可破坏，不能推动
+//                  if (pState.getDestroySpeed(pLevel, pPos) == -1.0F) {
+//                     return false;
+//                  }
+//                  // 根据方块的活塞推动反应类型进行判断
+//                  switch (pState.getPistonPushReaction()) {
+//                     // 若反应类型为 BLOCK，表示方块会阻挡推动，不能推动
+//                     case BLOCK:
+//                        return false;
+//                     // 若反应类型为 DESTROY，根据是否允许破坏方块来决定是否可以推动
+//                     case DESTROY:
+//                        return pAllowDestroy;
+//                     // 若反应类型为 PUSH_ONLY，只有推动方向与活塞朝向一致时才能推动
+//                     case PUSH_ONLY:
+//                        return pMovementDirection == pPistonFacing;
+//                  }
+//               // 如果是活塞方块且处于伸展状态，不能推动
+//               } else if (pState.getValue(EXTENDED)) {
+//                  return false;
+//               }
+//               // 若方块没有方块实体，则可以推动
+//               return !pState.hasBlockEntity();
+//            }
+//         } else {
+//            return false;
+//         }
+//      } else {
+//         return false;
+//      }
+//   }
+
+   /**
+    * 移动方块的方法，用于处理活塞伸展或收缩时方块的移动操作。
+    * 
+    * @param pLevel    方块所在的世界
+    * @param pPos      活塞的位置
+    * @param pFacing   活塞的朝向
+    * @param pExtending  是否为伸展操作
+    * @return 如果方块移动成功返回true，否则返回false
+    */
+//   private boolean moveBlocks(Level pLevel, BlockPos pPos, Direction pFacing, boolean pExtending) {
+//      // 获取活塞朝向的相邻方块位置
+//      BlockPos blockpos = pPos.relative(pFacing);
+//      // 如果是收缩操作且相邻方块是活塞头，则将其替换为空气
+//      if (!pExtending && pLevel.getBlockState(blockpos).is(Blocks.PISTON_HEAD)) {
+//         pLevel.setBlock(blockpos, Blocks.AIR.defaultBlockState(), 20);
+//      }
+//      // 创建一个活塞结构解析器，用于解析需要推动和破坏的方块
+//      PistonStructureResolver pistonstructureresolver = new PistonStructureResolver(pLevel, pPos, pFacing, pExtending);
+//      // 解析需要推动和破坏的方块，如果解析失败则返回false
+//      if (!pistonstructureresolver.resolve()) {
+//         return false;
+//      } else {
+//         // 创建一个映射，用于存储方块位置和对应的方块状态
+//         Map<BlockPos, BlockState> map = Maps.newHashMap();
+//         // 获取需要推动的方块位置列表
+//         List<BlockPos> list = pistonstructureresolver.getToPush();
+//         // 创建一个列表，用于存储需要推动的方块状态
+//         List<BlockState> list1 = Lists.newArrayList();
+//         // 遍历需要推动的方块位置列表，将方块状态添加到列表中，并存储到映射中
+//         for(int i = 0; i < list.size(); ++i) {
+//            BlockPos blockpos1 = list.get(i);
+//            BlockState blockstate = pLevel.getBlockState(blockpos1);
+//            list1.add(blockstate);
+//            map.put(blockpos1, blockstate);
+//         }
+//         // 获取需要破坏的方块位置列表
+//         List<BlockPos> list2 = pistonstructureresolver.getToDestroy();
+//         // 创建一个数组，用于存储所有需要处理的方块状态
+//         BlockState[] ablockstate = new BlockState[list.size() + list2.size()];
+//         // 根据是否伸展操作确定方块移动的方向
+//         Direction direction = pExtending ? pFacing : pFacing.getOpposite();
+//         int j = 0;
+//         // 遍历需要破坏的方块位置列表，依次处理这些方块
+//         for(int k = list2.size() - 1; k >= 0; --k) {
+//            BlockPos blockpos2 = list2.get(k);
+//            BlockState blockstate1 = pLevel.getBlockState(blockpos2);
+//            // 获取方块实体，如果有的话
+//            BlockEntity blockentity = blockstate1.hasBlockEntity() ? pLevel.getBlockEntity(blockpos2) : null;
+//            // 掉落方块的资源
+//            dropResources(blockstate1, pLevel, blockpos2, blockentity);
+//            // 将方块替换为空气
+//            pLevel.setBlock(blockpos2, Blocks.AIR.defaultBlockState(), 18);
+//            // 触发方块破坏的游戏事件
+//            pLevel.gameEvent(GameEvent.BLOCK_DESTROY, blockpos2, GameEvent.Context.of(blockstate1));
+//            // 如果方块不是火，则添加方块破坏的效果
+//            if (!blockstate1.is(BlockTags.FIRE)) {
+//               pLevel.addDestroyBlockEffect(blockpos2, blockstate1);
+//            }
+//            // 将方块状态存储到数组中
+//            ablockstate[j++] = blockstate1;
+//         }
+//         // 遍历需要推动的方块位置列表，依次处理这些方块
+//         for(int l = list.size() - 1; l >= 0; --l) {
+//            BlockPos blockpos3 = list.get(l);
+//            BlockState blockstate5 = pLevel.getBlockState(blockpos3);
+//            // 计算方块移动后的位置
+//            blockpos3 = blockpos3.relative(direction);
+//            // 从映射中移除移动后的位置
+//            map.remove(blockpos3);
+//            // 获取移动活塞方块的默认状态，并设置朝向
+//            BlockState blockstate8 = Blocks.MOVING_PISTON.defaultBlockState().setValue(FACING, pFacing);
+//            // 将方块设置为移动活塞方块
+//            pLevel.setBlock(blockpos3, blockstate8, 68);
+//            // 创建移动活塞方块实体
+//            pLevel.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(blockpos3, blockstate8, list1.get(l), pFacing, pExtending, false));
+//            // 将方块状态存储到数组中
+//            ablockstate[j++] = blockstate5;
+//         }
+//         // 如果是伸展操作
+//         if (pExtending) {
+//            // 根据活塞是否为粘性活塞确定活塞头的类型
+//            PistonType pistontype = this.isSticky ? PistonType.STICKY : PistonType.DEFAULT;
+//            // 获取活塞头方块的默认状态，并设置朝向和类型
+//            BlockState blockstate4 = Blocks.PISTON_HEAD.defaultBlockState().setValue(PistonHeadBlock.FACING, pFacing).setValue(PistonHeadBlock.TYPE, pistontype);
+//            // 获取移动活塞方块的默认状态，并设置朝向和类型
+//            BlockState blockstate6 = Blocks.MOVING_PISTON.defaultBlockState().setValue(MovingPistonBlock.FACING, pFacing).setValue(MovingPistonBlock.TYPE, this.isSticky ? PistonType.STICKY : PistonType.DEFAULT);
+//            // 从映射中移除活塞朝向的相邻方块位置
+//            map.remove(blockpos);
+//            // 将活塞朝向的相邻方块设置为移动活塞方块
+//            pLevel.setBlock(blockpos, blockstate6, 68);
+//            // 创建移动活塞方块实体
+//            pLevel.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(blockpos, blockstate6, blockstate4, pFacing, true, true));
+//         }
+//         // 获取空气方块的默认状态
+//         BlockState blockstate3 = Blocks.AIR.defaultBlockState();
+//         // 遍历映射中的所有方块位置，将这些位置的方块设置为空气
+//         for(BlockPos blockpos4 : map.keySet()) {
+//            pLevel.setBlock(blockpos4, blockstate3, 82);
+//         }
+//         // 遍历映射中的所有方块位置和状态，更新方块的邻居形状
+//         for(Map.Entry<BlockPos, BlockState> entry : map.entrySet()) {
+//            BlockPos blockpos5 = entry.getKey();
+//            BlockState blockstate2 = entry.getValue();
+//            blockstate2.updateIndirectNeighbourShapes(pLevel, blockpos5, 2);
+//            blockstate3.updateNeighbourShapes(pLevel, blockpos5, 2);
+//            blockstate3.updateIndirectNeighbourShapes(pLevel, blockpos5, 2);
+//         }
+//         j = 0;
+//         // 遍历需要破坏的方块状态数组，更新方块的间接邻居形状和邻居方块
+//         for(int i1 = list2.size() - 1; i1 >= 0; --i1) {
+//            BlockState blockstate7 = ablockstate[j++];
+//            BlockPos blockpos6 = list2.get(i1);
+//            blockstate7.updateIndirectNeighbourShapes(pLevel, blockpos6, 2);
+//            pLevel.updateNeighborsAt(blockpos6, blockstate7.getBlock());
+//         }
+//         // 遍历需要推动的方块状态数组，更新邻居方块
+//         for(int j1 = list.size() - 1; j1 >= 0; --j1) {
+//            pLevel.updateNeighborsAt(list.get(j1), ablockstate[j++].getBlock());
+//         }
+//         // 如果是伸展操作，更新活塞头方块的邻居方块
+//         if (pExtending) {
+//            pLevel.updateNeighborsAt(blockpos, Blocks.PISTON_HEAD);
+//         }
+//         // 方块移动成功，返回true
+//         return true;
+//      }
+//   }
+
+   public void entityInside(BlockState state, Level pLevel, BlockPos pPos, Entity pEntity) {
+       if (pEntity instanceof LivingEntity livingentity) {
+           //造成伤害并添加buff，对非玩家生物造成的伤害不会致死
+           if (livingentity instanceof Player || livingentity.getHealth() > entity_damage) {
+               livingentity.hurt(pLevel.damageSources().cactus(), entity_damage);
+           }
+       }
+   }
+   /**
+    * Returns the blockstate with the given rotation from the passed blockstate. If inapplicable, returns the passed
+    * blockstate.
+    * 根据给定的旋转方向旋转方块状态。如果不适用，则返回传入的方块状态。
+    * 
+    * @param pState 要旋转的方块状态
+    * @param pRot   旋转方向
+    * @return 旋转后的方块状态
+    * @deprecated call via {@link BlockStateBase#rotate} whenever
+    * possible. Implementing/overriding is fine.
+    */
+   @Deprecated
+   public BlockState rotate(BlockState pState, Rotation pRot) {
+      // 根据旋转方向更新方块的朝向属性
+      return pState.setValue(FACING, pRot.rotate(pState.getValue(FACING)));
+   }
+
+   /**
+    * 根据给定的旋转方向旋转方块状态，考虑方块是否伸展的情况。
+    * 
+    * @param state     要旋转的方块状态
+    * @param world     方块所在的世界访问器
+    * @param pos       方块的位置
+    * @param direction 旋转方向
+    * @return 旋转后的方块状态
+    */
+   public BlockState rotate(BlockState state, net.minecraft.world.level.LevelAccessor world, BlockPos pos, Rotation direction) {
+       // 如果方块处于伸展状态，则不进行旋转，直接返回原状态；否则调用父类的旋转方法
+       return state.getValue(EXTENDED) ? state : super.rotate(state, world, pos, direction);
+   }
+
+   /**
+    * Returns the blockstate with the given mirror of the passed blockstate. If inapplicable, returns the passed
+    * blockstate.
+    * 根据给定的镜像方式镜像方块状态。如果不适用，则返回传入的方块状态。
+    * 
+    * @param pState 要镜像的方块状态
+    * @param pMirror 镜像方式
+    * @return 镜像后的方块状态
+    * @deprecated call via {@link BlockStateBase#mirror} whenever
+    * possible. Implementing/overriding is fine.
+    */
+   @Deprecated
+   public BlockState mirror(BlockState pState, Mirror pMirror) {
+      // 根据镜像方式获取旋转方向，然后旋转方块状态
+      return pState.rotate(pMirror.getRotation(pState.getValue(FACING)));
+   }
+
+   /**
+    * 创建方块状态定义，添加方块的朝向和伸展属性。
+    * 
+    * @param pBuilder 方块状态定义构建器
+    */
+   protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> pBuilder) {
+      // 向构建器中添加方块的朝向和伸展属性
+      pBuilder.add(FACING, EXTENDED);
+   }
+
+   /**
+    * 判断方块是否使用形状进行光照遮挡。
+    * 
+    * @param pState 方块状态
+    * @return 如果方块处于伸展状态则返回true，否则返回false
+    */
+   public boolean useShapeForLightOcclusion(BlockState pState) {
+      // 根据方块的伸展属性判断是否使用形状进行光照遮挡
+      return pState.getValue(EXTENDED);
+   }
+
+   /**
+    * 判断方块是否可用于路径计算。
+    * 
+    * @param pState 方块状态
+    * @param pLevel 方块所在的世界
+    * @param pPos   方块的位置
+    * @param pType  路径计算类型
+    * @return 始终返回false，表示方块不可用于路径计算
+    */
+   public boolean isPathfindable(BlockState pState, BlockGetter pLevel, BlockPos pPos, PathComputationType pType) {
+      // 活塞方块不可用于路径计算，返回false
+      return false;
+   }
+}
\ No newline at end of file
Index: src/main/java/com/renyigesai/immortalers_delight/block/SpikeTrapBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/block/SpikeTrapBlock.java b/src/main/java/com/renyigesai/immortalers_delight/block/SpikeTrapBlock.java
new file mode 100644
--- /dev/null	(date 1746020412443)
+++ b/src/main/java/com/renyigesai/immortalers_delight/block/SpikeTrapBlock.java	(date 1746020412443)
@@ -0,0 +1,391 @@
+package com.renyigesai.immortalers_delight.block;
+
+import com.google.common.collect.ImmutableMap;
+import it.unimi.dsi.fastutil.objects.Object2IntArrayMap;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import javax.annotation.Nullable;
+import net.minecraft.Util;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.util.Mth;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.projectile.Projectile;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelHeightAccessor;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.*;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.BooleanProperty;
+import net.minecraft.world.level.block.state.properties.EnumProperty;
+import net.minecraft.world.level.block.state.properties.Tilt;
+import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.level.material.FluidState;
+import net.minecraft.world.level.material.Fluids;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.shapes.BooleanOp;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.Shapes;
+import net.minecraft.world.phys.shapes.VoxelShape;
+
+// 大型垂滴叶方块类，继承自HorizontalDirectionalBlock，实现了BonemealableBlock和SimpleWaterloggedBlock接口
+public class SpikeTrapBlock extends HorizontalDirectionalBlock implements BonemealableBlock, SimpleWaterloggedBlock {
+    // 定义一个布尔属性，表示方块是否被水logged（即是否被水填充）
+    private static final BooleanProperty WATERLOGGED = BlockStateProperties.WATERLOGGED;
+    // 定义一个枚举属性，表示方块的倾斜状态
+    private static final EnumProperty<Tilt> TILT = BlockStateProperties.TILT;
+    // 定义一个常量，表示不进行方块刻（tick）的标识
+    private static final int NO_TICK = -1;
+    // 定义一个映射，存储不同倾斜状态到下一个倾斜状态的延迟时间（以方块刻为单位）
+    private static final Object2IntMap<Tilt> DELAY_UNTIL_NEXT_TILT_STATE = Util.make(new Object2IntArrayMap<>(), (p_152305_) -> {
+        p_152305_.defaultReturnValue(-1);
+        p_152305_.put(Tilt.UNSTABLE, 10);
+        p_152305_.put(Tilt.PARTIAL, 10);
+        p_152305_.put(Tilt.FULL, 100);
+    });
+    // 定义最大生成高度的常量
+    private static final int MAX_GEN_HEIGHT = 5;
+    // 定义茎的宽度常量
+    private static final int STEM_WIDTH = 6;
+    // 定义实体伤害值
+    private float entity_damage = 1.0F;
+
+    // 定义是否为长钉陷阱
+    private boolean isLongType = false;
+    // 定义最低的叶子顶部Y坐标常量
+    private static final int LOWEST_LEAF_TOP = 13;
+    protected static final VoxelShape NORTH_SHAPE = Block.box(1.0D, 0.0D, 1.0D, 15.0D, 16.0D, 15.0D);
+    protected static final VoxelShape SOUTH_SHAPE = Block.box(1.0D, 0.0D, 1.0D, 15.0D, 16.0D, 15.0D);
+    protected static final VoxelShape EAST_SHAPE = Block.box(1.0D, 0.0D, 1.0D, 15.0D, 16.0D, 15.0D);
+    protected static final VoxelShape WEST_SHAPE = Block.box(1.0D, 0.0D, 1.0D, 15.0D, 16.0D, 15.0D);
+    // 定义不同倾斜状态对应的叶子形状的映射
+    private static final Map<Tilt, VoxelShape> LEAF_SHAPES = ImmutableMap.of(
+        Tilt.NONE, Block.box(0.0D, 11.0D, 0.0D, 16.0D, 15.0D, 16.0D),
+        Tilt.UNSTABLE, Block.box(0.0D, 11.0D, 0.0D, 16.0D, 15.0D, 16.0D), 
+        Tilt.PARTIAL, Block.box(0.0D, 11.0D, 0.0D, 16.0D, 13.0D, 16.0D), 
+        Tilt.FULL, Block.box(0.0D, 5.0D, 0.0D, 16.0D, 9.0D, 16.0D));
+    // 定义茎的切片形状
+    private static final VoxelShape STEM_SLICER = Block.box(0.0D, 13.0D, 0.0D, 16.0D, 16.0D, 16.0D);
+    // 定义不同方向对应的茎的形状的映射
+    private static final Map<Direction, VoxelShape> STEM_SHAPES = ImmutableMap.of(
+            Direction.NORTH, Shapes.joinUnoptimized(SpikeTrapBlock.NORTH_SHAPE, STEM_SLICER, BooleanOp.ONLY_FIRST),
+            Direction.SOUTH, Shapes.joinUnoptimized(SpikeTrapBlock.SOUTH_SHAPE, STEM_SLICER, BooleanOp.ONLY_FIRST),
+            Direction.EAST, Shapes.joinUnoptimized(SpikeTrapBlock.EAST_SHAPE, STEM_SLICER, BooleanOp.ONLY_FIRST),
+            Direction.WEST, Shapes.joinUnoptimized(SpikeTrapBlock.WEST_SHAPE, STEM_SLICER, BooleanOp.ONLY_FIRST)
+    );
+    // 定义一个缓存，存储每个方块状态对应的形状
+    private final Map<BlockState, VoxelShape> shapesCache;
+
+    // 构造函数，初始化方块的属性和默认状态，并缓存形状
+    public SpikeTrapBlock(Properties pProperties) {
+        super(pProperties);
+        // 注册默认状态，设置初始的水logged为false，朝向为北方，倾斜状态为NONE
+        this.registerDefaultState(this.stateDefinition.any().setValue(WATERLOGGED, Boolean.valueOf(false)).setValue(FACING, Direction.NORTH).setValue(TILT, Tilt.NONE));
+        // 计算并缓存每个状态的形状
+        this.shapesCache = this.getShapeForEachState(SpikeTrapBlock::calculateShape);
+    }
+    public SpikeTrapBlock(Float damage,Properties pProperties) {
+        super(pProperties);
+        // 注册默认状态，设置初始的水logged为false，朝向为北方，倾斜状态为NONE
+        this.registerDefaultState(this.stateDefinition.any().setValue(WATERLOGGED, Boolean.valueOf(false)).setValue(FACING, Direction.NORTH).setValue(TILT, Tilt.NONE));
+        // 计算并缓存每个状态的形状
+        this.shapesCache = this.getShapeForEachState(SpikeTrapBlock::calculateShape);
+        this.entity_damage = damage;
+    }
+
+
+    public SpikeTrapBlock(boolean isLong, Float damage, Properties pProperties) {
+        super(pProperties);
+        // 注册默认状态，设置初始的水logged为false，朝向为北方，倾斜状态为NONE
+        this.registerDefaultState(this.stateDefinition.any().setValue(WATERLOGGED, Boolean.valueOf(false)).setValue(FACING, Direction.NORTH).setValue(TILT, Tilt.NONE));
+        // 计算并缓存每个状态的形状
+        this.shapesCache = this.getShapeForEachState(SpikeTrapBlock::calculateShape);
+        this.entity_damage = damage;
+        this.isLongType = isLong;
+    }
+
+    // 计算方块形状的静态方法，根据倾斜状态和朝向返回对应的形状
+    private static VoxelShape calculateShape(BlockState p_152318_) {
+        return Shapes.or(LEAF_SHAPES.get(p_152318_.getValue(TILT)), STEM_SHAPES.get(p_152318_.getValue(FACING)));
+    }
+
+    // 以随机高度放置大型垂滴叶的静态方法
+    public static void placeWithRandomHeight(LevelAccessor pLevel, RandomSource pRandom, BlockPos pPos, Direction pDirection) {
+        // 生成一个在2到5之间的随机高度
+        int i = Mth.nextInt(pRandom, 2, 5);
+        // 创建一个可变的方块位置对象
+        BlockPos.MutableBlockPos blockpos$mutableblockpos = pPos.mutable();
+        int j = 0;
+
+        // 检查并找到可以放置的位置，直到达到最大高度或者不能放置为止
+        while(j < i && canPlaceAt(pLevel, blockpos$mutableblockpos, pLevel.getBlockState(blockpos$mutableblockpos))) {
+            ++j;
+            blockpos$mutableblockpos.move(Direction.UP);
+        }
+
+        int k = pPos.getY() + j - 1;
+        blockpos$mutableblockpos.setY(pPos.getY());
+
+        // 放置茎方块
+        while(blockpos$mutableblockpos.getY() < k) {
+            SpikeTrapBlock.place(pLevel, blockpos$mutableblockpos, pLevel.getFluidState(blockpos$mutableblockpos), pDirection);
+            blockpos$mutableblockpos.move(Direction.UP);
+        }
+
+        // 放置叶子方块
+        place(pLevel, blockpos$mutableblockpos, pLevel.getFluidState(blockpos$mutableblockpos), pDirection);
+    }
+
+    // 判断方块是否可以被替换的静态方法
+    private static boolean canReplace(BlockState pState) {
+        return pState.isAir() || pState.is(Blocks.WATER) || pState.is(Blocks.SMALL_DRIPLEAF);
+    }
+
+    // 判断是否可以在指定位置放置方块的静态方法
+    protected static boolean canPlaceAt(LevelHeightAccessor pLevel, BlockPos pPos, BlockState pState) {
+        return !pLevel.isOutsideBuildHeight(pPos) && canReplace(pState);
+    }
+
+    // 在指定位置放置方块的静态方法
+    protected static boolean place(LevelAccessor pLevel, BlockPos pPos, FluidState pFluidState, Direction pDirection) {
+        // 创建方块状态，设置水logged和朝向
+        BlockState blockstate = Blocks.BIG_DRIPLEAF.defaultBlockState().setValue(WATERLOGGED, Boolean.valueOf(pFluidState.isSourceOfType(Fluids.WATER))).setValue(FACING, pDirection);
+        // 设置方块状态到指定位置
+        return pLevel.setBlock(pPos, blockstate, 3);
+    }
+
+    // 当有投射物击中时的处理方法
+    public void onProjectileHit(Level pLevel, BlockState pState, BlockHitResult pHit, Projectile pProjectile) {
+        // 设置倾斜状态为FULL，并安排下一次方块刻和播放声音
+        this.setTiltAndScheduleTick(pState, pLevel, pHit.getBlockPos(), Tilt.FULL, SoundEvents.BIG_DRIPLEAF_TILT_DOWN);
+    }
+
+    // 获取方块的流体状态的方法
+    public FluidState getFluidState(BlockState pState) {
+        // 如果方块是水logged的，返回水的源流体状态，否则返回父类的流体状态
+        return pState.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(pState);
+    }
+
+    // 判断方块是否可以在指定位置生存的方法
+    public boolean canSurvive(BlockState pState, LevelReader pLevel, BlockPos pPos) {
+        // 获取下方方块的位置和状态
+        BlockPos blockpos = pPos.below();
+        BlockState blockstate = pLevel.getBlockState(blockpos);
+        // 判断下方方块是否是大型垂滴叶、大型垂滴叶茎或者可放置大型垂滴叶的方块
+        //return blockstate.is(this) || blockstate.is(Blocks.BIG_DRIPLEAF_STEM) || blockstate.is(BlockTags.BIG_DRIPLEAF_PLACEABLE);
+        return true;
+    }
+
+    // 更新方块状态的方法，根据邻居方块的状态和方向返回新的状态
+    public BlockState updateShape(BlockState pState, Direction pDirection, BlockState pNeighborState, LevelAccessor pLevel, BlockPos pPos, BlockPos pNeighborPos) {
+        // 如果下方方块不能支撑当前方块，返回空气方块状态
+        if (pDirection == Direction.DOWN && !pState.canSurvive(pLevel, pPos)) {
+            return Blocks.AIR.defaultBlockState();
+        } else {
+            // 如果方块是水logged的，安排水的方块刻
+            if (pState.getValue(WATERLOGGED)) {
+                pLevel.scheduleTick(pPos, Fluids.WATER, Fluids.WATER.getTickDelay(pLevel));
+            }
+
+            // 如果上方方块是大型垂滴叶，返回大型垂滴叶茎的状态
+            //return pDirection == Direction.UP && pNeighborState.is(this) ? Blocks.BIG_DRIPLEAF_STEM.withPropertiesOf(pState) : super.updateShape(pState, pDirection, pNeighborState, pLevel, pPos, pNeighborPos);
+            //如果上方不是空气，返回激活状态
+            boolean isGround = pDirection == Direction.UP && isFaceFull(pNeighborState.getCollisionShape(pLevel, pPos.above()), Direction.DOWN);
+            //if (isGround) this.setTiltAndScheduleTick(pState, (Level) pLevel, pPos, Tilt.FULL, SoundEvents.BIG_DRIPLEAF_TILT_DOWN);
+            return isGround ? this.withPropertiesOf(pState).setValue(TILT, Tilt.FULL) : super.updateShape(pState, pDirection, pNeighborState, pLevel, pPos, pNeighborPos);
+        }
+    }
+
+    // 判断是否可以对当前方块使用骨粉的方法
+    public boolean isValidBonemealTarget(LevelReader pLevel, BlockPos pPos, BlockState pState, boolean pIsClient) {
+        // 获取上方方块的状态
+        BlockState blockstate = pLevel.getBlockState(pPos.above());
+        // 判断上方方块是否可以被替换
+        //return canReplace(blockstate);
+        return  false;
+    }
+
+    // 判断使用骨粉是否成功的方法，这里总是返回true
+    public boolean isBonemealSuccess(Level pLevel, RandomSource pRandom, BlockPos pPos, BlockState pState) {
+        //return true;
+        return false;
+    }
+
+    // 使用骨粉后的处理方法，在上方放置茎和叶子方块
+    public void performBonemeal(ServerLevel pLevel, RandomSource pRandom, BlockPos pPos, BlockState pState) {
+//        // 获取上方方块的位置和状态
+//        BlockPos blockpos = pPos.above();
+//        BlockState blockstate = pLevel.getBlockState(blockpos);
+//        // 如果上方可以放置方块
+//        if (canPlaceAt(pLevel, blockpos, blockstate)) {
+//            // 获取当前方块的朝向
+//            Direction direction = pState.getValue(FACING);
+//            // 放置茎方块
+//            SpikeTrapBlock.place(pLevel, pPos, pState.getFluidState(), direction);
+//            // 放置叶子方块
+//            place(pLevel, blockpos, blockstate.getFluidState(), direction);
+//        }
+
+    }
+
+    // 当有实体进入方块时的处理方法
+    public void entityInside(BlockState pState, Level pLevel, BlockPos pPos, Entity pEntity) {
+        // 仅在服务端处理
+        if (!pLevel.isClientSide) {
+            // 如果当前倾斜状态为NONE，且实体可以使方块倾斜，并且没有邻居信号
+            if (pState.getValue(TILT) == Tilt.NONE && canEntityTilt(pPos, pEntity) && !pLevel.hasNeighborSignal(pPos)) {
+                // 设置倾斜状态为UNSTABLE，并安排下一次方块刻，不播放声音
+                this.setTiltAndScheduleTick(pState, pLevel, pPos, Tilt.UNSTABLE, (SoundEvent)null);
+            }
+            if (pEntity instanceof LivingEntity livingentity) {
+                if (pState.getValue(TILT) == Tilt.FULL) {
+                    //造成伤害并添加buff，对非玩家生物造成的伤害不会致死
+                    if (livingentity instanceof Player || livingentity.getHealth() > entity_damage) {
+                        livingentity.hurt(pLevel.damageSources().cactus(), entity_damage);
+                    }
+                }
+            }
+        }
+    }
+
+    // 方块刻的处理方法
+    public void tick(BlockState pState, ServerLevel pLevel, BlockPos pPos, RandomSource pRandom) {
+        // 如果有邻居信号，重置倾斜状态
+        if (pLevel.hasNeighborSignal(pPos)) {
+            resetTilt(pState, pLevel, pPos);
+        } else {
+            // 获取当前倾斜状态
+            Tilt tilt = pState.getValue(TILT);
+            // 根据不同的倾斜状态进行处理
+            if (tilt == Tilt.UNSTABLE) {
+                this.setTiltAndScheduleTick(pState, pLevel, pPos, Tilt.PARTIAL, SoundEvents.BIG_DRIPLEAF_TILT_DOWN);
+            } else if (tilt == Tilt.PARTIAL) {
+                //在弹出时会造成范围伤害
+                List<LivingEntity> list = pLevel.getEntitiesOfClass(LivingEntity.class, new AABB(pPos.above()).inflate(3.0D, 3.0D, 3.0D));
+                if (!list.isEmpty()) {
+                    for (LivingEntity livingentity : list) {
+                        //造成伤害并添加buff，对非玩家生物造成的伤害不会致死
+                        if (livingentity instanceof Player || livingentity.getHealth() > entity_damage) {
+                            livingentity.hurt(pLevel.damageSources().cactus(), entity_damage);
+                        }
+                    }
+                }
+                this.setTiltAndScheduleTick(pState, pLevel, pPos, Tilt.FULL, SoundEvents.BIG_DRIPLEAF_TILT_DOWN);
+            } else if (tilt == Tilt.FULL) {
+                resetTilt(pState, pLevel, pPos);
+            }
+
+        }
+    }
+
+    // 当邻居方块改变时的处理方法
+    public void neighborChanged(BlockState pState, Level pLevel, BlockPos pPos, Block pNeighborBlock, BlockPos pNeighborPos, boolean pMovedByPiston) {
+        // 如果有邻居信号，重置倾斜状态
+        if (pLevel.hasNeighborSignal(pPos)) {
+            resetTilt(pState, pLevel, pPos);
+        }
+
+    }
+
+    // 播放倾斜声音的静态方法
+    private static void playTiltSound(Level pLevel, BlockPos pPos, SoundEvent pSound) {
+        // 生成一个在0.8到1.2之间的随机音量
+        float f = Mth.randomBetween(pLevel.random, 0.8F, 1.2F);
+        // 播放声音
+        pLevel.playSound((Player)null, pPos, pSound, SoundSource.BLOCKS, 1.0F, f);
+    }
+
+    // 判断实体是否可以使方块倾斜的静态方法
+    private static boolean canEntityTilt(BlockPos pPos, Entity pEntity) {
+        return pEntity.onGround() && pEntity.position().y > (double)((float)pPos.getY() + 0.6875F);
+    }
+
+    // 设置倾斜状态并安排下一次方块刻的方法
+    private void setTiltAndScheduleTick(BlockState pState, Level pLevel, BlockPos pPos, Tilt pTilt, @Nullable SoundEvent pSound) {
+        // 设置倾斜状态
+        setTilt(pState, pLevel, pPos, pTilt);
+        // 如果有声音，播放声音
+        if (pSound != null) {
+            playTiltSound(pLevel, pPos, pSound);
+        }
+
+        // 获取到下一个倾斜状态的延迟时间
+        int i = DELAY_UNTIL_NEXT_TILT_STATE.getInt(pTilt);
+        // 如果延迟时间不为-1，安排方块刻
+        if (i != -1) {
+            pLevel.scheduleTick(pPos, this, i);
+        }
+
+    }
+
+    // 重置倾斜状态的静态方法
+    private static void resetTilt(BlockState pState, Level pLevel, BlockPos pPos) {
+        // 设置倾斜状态为NONE
+        setTilt(pState, pLevel, pPos, Tilt.NONE);
+        // 如果当前倾斜状态不是NONE，播放倾斜上升的声音
+        if (pState.getValue(TILT) != Tilt.NONE) {
+            playTiltSound(pLevel, pPos, SoundEvents.BIG_DRIPLEAF_TILT_UP);
+        }
+
+    }
+    // 设置倾斜状态的静态方法
+    private static void setTilt(BlockState pState, Level pLevel, BlockPos pPos, Tilt pTilt) {
+        // 获取当前方块状态的倾斜状态
+        Tilt tilt = pState.getValue(TILT);
+        // 更新方块状态为新的倾斜状态
+        pLevel.setBlock(pPos, pState.setValue(TILT, pTilt), 2);
+        // 如果新的倾斜状态会引起振动且与旧的倾斜状态不同
+        if (pTilt.causesVibration() && pTilt != tilt) {
+            // 触发方块改变的游戏事件
+            pLevel.gameEvent((Entity)null, GameEvent.BLOCK_CHANGE, pPos);
+        }
+    }
+
+    // 获取方块的碰撞形状的方法
+    public VoxelShape getCollisionShape(BlockState pState, BlockGetter pLevel, BlockPos pPos, CollisionContext pContext) {
+        // 根据当前方块状态的倾斜状态从LEAF_SHAPES中获取对应的形状
+        return LEAF_SHAPES.get(pState.getValue(TILT));
+    }
+
+    // 获取方块的形状的方法
+    public VoxelShape getShape(BlockState pState, BlockGetter pLevel, BlockPos pPos, CollisionContext pContext) {
+        // 从形状缓存中获取当前方块状态对应的形状
+        return this.shapesCache.get(pState);
+    }
+
+    // 获取放置方块时的状态的方法
+    public BlockState getStateForPlacement(BlockPlaceContext pContext) {
+        // 获取点击位置下方方块的状态
+        BlockState blockstate = pContext.getLevel().getBlockState(pContext.getClickedPos().below());
+        // 获取点击位置的流体状态
+        FluidState fluidstate = pContext.getLevel().getFluidState(pContext.getClickedPos());
+        // 判断下方方块是否是大型垂滴叶或大型垂滴叶茎
+        boolean flag = blockstate.is(Blocks.BIG_DRIPLEAF) || blockstate.is(Blocks.BIG_DRIPLEAF_STEM);
+        // 创建方块状态，设置水logged和朝向
+        return this.defaultBlockState().setValue(WATERLOGGED, Boolean.valueOf(fluidstate.isSourceOfType(Fluids.WATER))).setValue(FACING, flag ? blockstate.getValue(FACING) : pContext.getHorizontalDirection().getOpposite());
+    }
+
+    // 创建方块状态定义的方法，用于添加方块的属性
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> pBuilder) {
+        // 添加水logged、朝向和倾斜状态属性
+        pBuilder.add(WATERLOGGED, FACING, TILT);
+    }
+
+}
\ No newline at end of file
Index: src/main/resources/assets/immortalers_delight/lang/zh_cn.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"creativetab_immortalers_delight_tab\": \"千古乐事\",\r\n  \"item.immortalers_delight.evolutcorn\": \"白垩玉黍\",\r\n  \"item.immortalers_delight.evolutcorn_grains\": \"白垩玉黍粒\",\r\n  \"item.immortalers_delight.roast_evolutcorn_chops\": \"烤白垩玉黍粒\",\r\n  \"item.immortalers_delight.ancient_fiber\": \"远古纤维\",\r\n  \"item.immortalers_delight.roast_evolutcorn\": \"烤白垩玉黍\",\r\n  \"item.immortalers_delight.bowl_of_millenian_bamboo\": \"碗装千年竹\",\r\n  \"item.immortalers_delight.cretaceous_zea_ball\": \"玉黍饭团\",\r\n  \"item.immortalers_delight.colorful_grilled_skewers\": \"缤纷谷串\",\r\n  \"item.immortalers_delight.popolutcorn\": \"爆黍花\",\r\n  \"item.immortalers_delight.zea_pancake_slice\": \"玉黍烙切片\",\r\n  \"item.immortalers_delight.evolutcorn_pie_crust\": \"玉黍酥皮\",\r\n  \"item.immortalers_delight.evolutcorn_beer\": \"玉黍啤酒\",\r\n  \"item.immortalers_delight.pearlip_pie_slice\": \"珍珠棱蕉派切片\",\r\n  \"item.immortalers_delight.peatic_musa_salad\": \"热带沙拉\",\r\n  \"item.immortalers_delight.pearlip\": \"珍珠棱蕉\",\r\n  \"item.immortalers_delight.pearlip_shell\": \"珍珠棱蕉壳\",\r\n  \"item.immortalers_delight.pearlipearl\": \"棱珠\",\r\n  \"item.immortalers_delight.pearlip_pumpkin_pie\": \"珍珠棱蕉南瓜饼\",\r\n  \"item.immortalers_delight.pearlipearl_tart\": \"棱珠蛋挞\",\r\n  \"item.immortalers_delight.pearlip_milk_shake\": \"珍珠棱蕉奶昔\",\r\n  \"item.immortalers_delight.pearlip_jelly\": \"珍珠棱蕉果冻\",\r\n  \"item.immortalers_delight.pearlipearl_eggsteam\": \"蕉香蒸蛋\",\r\n  \"item.immortalers_delight.himekaido_cuts\": \"姬海棠果粒\",\r\n  \"item.immortalers_delight.himekaido_seed\": \"姬海棠种子\",\r\n  \"item.immortalers_delight.rotten_flesh_cuts\": \"腐肉碎\",\r\n  \"item.immortalers_delight.himekaido_jelly\": \"姬海棠果酱\",\r\n  \"item.immortalers_delight.yogurt\": \"酸奶\",\r\n  \"item.immortalers_delight.himekaido\": \"姬海棠果\",\r\n  \"item.immortalers_delight.baked_poisonous_potato\": \"烤毒马铃薯\",\r\n  \"item.immortalers_delight.braised_spider_eyes_in_gravy\": \"碗装四眼丸子\",\r\n  \"item.immortalers_delight.tartare_chicken\": \"鞑靼鸡肉\",\r\n  \"item.immortalers_delight.dipped_rotten_flesh\": \"酱蘸腐肉\",\r\n  \"item.immortalers_delight.crispy_yogurt_rotten_flesh\": \"腐肉酸奶脆\",\r\n  \"item.immortalers_delight.meaty_rotten_tomato_broth\": \"烂茄肉汤\",\r\n  \"item.immortalers_delight.stuffed_poisonous_potato\": \"填馅毒马铃薯\",\r\n  \"item.immortalers_delight.pufferfish_roll\": \"河豚寿司\",\r\n  \"item.immortalers_delight.bowl_of_stewed_rotten_meat_in_clay_pot\": \"碗装的瓦罐烂肉炖\",\r\n  \"item.immortalers_delight.golden_himekaido\": \"金姬海棠果\",\r\n  \"item.immortalers_delight.himekaido_yogurt_pie_slice\": \"姬海棠酸奶派切片\",\r\n  \"item.immortalers_delight.dreumk_wine\": \"醉梦姬\",\r\n  \"item.immortalers_delight.kwat_wheat_seeds\": \"瓦斯麦种子\",\r\n  \"item.immortalers_delight.kwat_wheat\": \"瓦斯麦\",\r\n  \"item.immortalers_delight.golden_fabric\": \"金丝织缕\",\r\n  \"item.immortalers_delight.golden_fabric_veil\": \"绯炵金纱\",\r\n  \"item.immortalers_delight.enchanted_golden_himekaido\": \"金魔法果\",\r\n  \"item.immortalers_delight.contains_tea_leisamboo\": \"含茶竹节\",\r\n  \"item.immortalers_delight.empty_bamboo_cup\": \"空竹杯\",\r\n  \"item.immortalers_delight.leisamboo_tea\": \"溪竹茶\",\r\n  \"item.immortalers_delight.iced_black_tea\": \"冰红茶\",\r\n  \"item.immortalers_delight.pearlipearl_milk_tea\": \"棱珠奶茶\",\r\n  \"item.immortalers_delight.pearlipearl_milk_green\": \"棱珠奶绿\",\r\n  \"item.immortalers_delight.stove_black_tea\": \"炉红茶\",\r\n  \"item.immortalers_delight.leaf_green_tea\": \"叶绿茶\",\r\n  \"item.immortalers_delight.british_yellow_tea\": \"英黄茶\",\r\n  \"item.immortalers_delight.leaf_tea\": \"树叶茶\",\r\n  \"item.immortalers_delight.clear_water_vodka\": \"清水伏特加\",\r\n  \"item.immortalers_delight.raw_sniffer_slice\": \"生嗅探兽肉片\",\r\n  \"item.immortalers_delight.cooked_sniffer_slice\": \"熟嗅探兽肉片\",\r\n  \"item.immortalers_delight.raw_sniffer_steak\": \"生嗅探兽肉排\",\r\n  \"item.immortalers_delight.cooked_sniffer_steak\": \"熟嗅探兽肉排\",\r\n  \"item.immortalers_delight.rotating_roast_meat\": \"旋转烤嗅探兽肉\",\r\n  \"item.immortalers_delight.sniffer_hide\": \"嗅探兽毛皮\",\r\n  \"item.immortalers_delight.pitcher_pod_petal\": \"瓶子草荚果瓣\",\r\n  \"item.immortalers_delight.vulcan_coktail\": \"火神鸡尾酒\",\r\n  \"item.immortalers_delight.kwat_wheat_dough\": \"瓦斯麦面团\",\r\n  \"item.immortalers_delight.kwat_wheat_paste\": \"瓦斯麦浆\",\r\n  \"item.immortalers_delight.kwat_wheat_doufu\": \"瓦斯麦豆腐\",\r\n  \"item.immortalers_delight.fry_kwat_wheat_doufu\": \"炸瓦斯麦豆腐\",\r\n  \"item.immortalers_delight.jade_and_ruby_soup\": \"翡翠红玉汤\",\r\n  \"item.immortalers_delight.kwat_wheat_toast\": \"瓦斯麦吐司\",\r\n  \"item.immortalers_delight.kwat_wheat_toast_slice\": \"瓦斯麦吐司片\",\r\n  \"item.immortalers_delight.nether_cream_soup\": \"下界奶油浓汤\",\r\n  \"item.immortalers_delight.nether_cream_bread\": \"下界奶油面包\",\r\n  \"item.immortalers_delight.himekaido_boat\": \"姬海棠木船\",\r\n  \"item.immortalers_delight.himekaido_chest_boat\": \"姬海棠木运输船\",\r\n  \"item.immortalers_delight.torchflower_mustard\": \"火花芥末\",\r\n  \"item.immortalers_delight.hot_hi_soup\": \"热嗨汤\",\r\n  \"item.immortalers_delight.incandescence_sushi\": \"火热寿司\",\r\n  \"item.immortalers_delight.torchflower_cookie\": \"火花芥末曲奇\",\r\n  \"item.immortalers_delight.torchflower_cake\": \"火把花饼\",\r\n  \"item.immortalers_delight.torchflower_curry_rice\": \"火把花咖喱饭\",\r\n  \"item.immortalers_delight.extra_spicy_pasta\": \"特辣意面\",\r\n  \"item.immortalers_delight.himekaido_boat\": \"姬海棠木船\",\r\n  \"item.immortalers_delight.himekaido_chest_boat\": \"姬海棠木运输船\",\r\n  \"item.immortalers_delight.torchflower_mustard\": \"火花芥末\",\r\n  \"item.immortalers_delight.hot_hi_soup\": \"热嗨汤\",\r\n  \"item.immortalers_delight.incandescence_sushi\": \"火热寿司\",\r\n  \"item.immortalers_delight.torchflower_cookie\": \"火花芥末曲奇\",\r\n  \"item.immortalers_delight.torchflower_cake\": \"火把花饼\",\r\n  \"item.immortalers_delight.torchflower_curry_rice\": \"火把花咖喱饭\",\r\n  \"item.immortalers_delight.mashed_potatoes\": \"马铃薯泥\",\r\n  \"item.immortalers_delight.mashed_poisonous_potato\": \"毒马铃薯泥\",\r\n  \"item.immortalers_delight.mashed_potato_with_jam\": \"果酱薯泥\",\r\n  \"item.immortalers_delight.mashed_poisonous_potato_with_jam\": \"果酱毒薯泥\",\r\n  \"item.immortalers_delight.extra_spicy_pasta\": \"特辣意面\",\r\n  \"item.immortalers_delight.sutffed_kwat_wheat_doufu\": \"酿瓦斯麦豆腐\",\r\n  \"item.immortalers_delight.pitcher_plant_barbecue\": \"瓶子草烤肉\",\r\n  \"item.immortalers_delight.leisamboo_tea_cake\": \"溪竹茶饼\",\r\n  \"item.immortalers_delight.ice_pearlip\": \"冻棱蕉\",\r\n  \"item.immortalers_delight.chocolate_pearlip_sticks\": \"巧克力棱蕉棒\",\r\n  \"item.immortalers_delight.pod_shell_burger_meat_cube\": \"荚壳汉堡肉切块\",\r\n  \"item.immortalers_delight.nether_kvass\": \"地狱格瓦斯\",\r\n  \"item.immortalers_delight.purgatory_ale\": \"炼狱麦酒\",\r\n  \"block.immortalers_delight.pod_shell_burger_meat\": \"荚壳汉堡肉\",\r\n  \"block.immortalers_delight.himekaido_log\": \"姬海棠原木\",\r\n  \"block.immortalers_delight.stripped_himekaido_log\": \"去皮姬海棠原木\",\r\n  \"block.immortalers_delight.himekaido_wood\": \"姬海棠木头\",\r\n  \"block.immortalers_delight.stripped_himekaido_wood\": \"去皮姬海棠木头\",\r\n  \"block.immortalers_delight.himekaido_planks\": \"姬海棠木板\",\r\n  \"block.immortalers_delight.himekaido_stairs\": \"姬海棠木楼梯\",\r\n  \"block.immortalers_delight.himekaido_slab\": \"姬海棠台阶\",\r\n  \"block.immortalers_delight.himekaido_door\": \"姬海棠木门\",\r\n  \"block.immortalers_delight.himekaido_trapdoor\": \"姬海棠木活板门\",\r\n  \"block.immortalers_delight.himekaido_fence\": \"姬海棠木栅栏\",\r\n  \"block.immortalers_delight.himekaido_fence_gate\": \"姬海棠木栅栏门\",\r\n  \"block.immortalers_delight.himekaido_cabinet\": \"姬海棠木厨柜\",\r\n  \"block.immortalers_delight.himekaido_pressure_plate\": \"姬海棠木压力板\",\r\n  \"block.immortalers_delight.himekaido_button\": \"姬海棠木按钮\",\r\n  \"block.immortalers_delight.himekaido_sign\": \"姬海棠木告示牌\",\r\n  \"block.immortalers_delight.himekaido_hanging_sign\": \"悬挂式姬海棠木告示牌\",\r\n  \"block.immortalers_delight.leisamboo_planks\": \"棱蕉木板\",\r\n  \"block.immortalers_delight.leisamboo_stairs\": \"棱蕉木楼梯\",\r\n  \"block.immortalers_delight.leisamboo_slab\": \"棱蕉台阶\",\r\n  \"block.immortalers_delight.leisamboo_door\": \"棱蕉木门\",\r\n  \"block.immortalers_delight.leisamboo_trapdoor\": \"棱蕉木活板门\",\r\n  \"block.immortalers_delight.leisamboo_fence\": \"棱蕉木栅栏\",\r\n  \"block.immortalers_delight.leisamboo_fence_gate\": \"棱蕉木栅栏门\",\r\n  \"block.immortalers_delight.leisamboo_cabinet\": \"棱蕉木厨柜\",\r\n  \"block.immortalers_delight.leisamboo_pressure_plate\": \"棱蕉木压力板\",\r\n  \"block.immortalers_delight.leisamboo_button\": \"棱蕉木按钮\",\r\n  \"block.immortalers_delight.leisamboo_sign\": \"棱蕉木告示牌\",\r\n  \"block.immortalers_delight.leisamboo_hanging_sign\": \"悬挂式棱蕉木告示牌\",\r\n  \"block.immortalers_delight.evolutcorn\": \"白垩玉黍\",\r\n  \"block.immortalers_delight.zea_pancake\": \"玉黍烙\",\r\n  \"block.immortalers_delight.pearlip_pie\": \"珍珠棱蕉派\",\r\n  \"block.immortalers_delight.millenian_bamboo\": \"千年竹\",\r\n  \"block.immortalers_delight.himekaido_leaves\": \"姬海棠树叶\",\r\n  \"block.immortalers_delight.himekaido_fruited_leaves\": \"结果的姬海棠树叶\",\r\n  \"block.immortalers_delight.himekaido_flowering_leaves\": \"盛开的姬海棠树叶\",\r\n  \"block.immortalers_delight.himekaido_shrub\": \"姬海棠灌木\",\r\n  \"block.immortalers_delight.stewed_rotten_meat_pot\": \"瓦罐烂肉炖\",\r\n  \"block.immortalers_delight.braised_spider_eyes_block\": \"四眼丸子\",\r\n  \"block.immortalers_delight.spoon_block.tips.1\": \"你需要一个碗以食用它。\",\r\n  \"block.immortalers_delight.evolutcorn_grain_bag\": \"白垩玉黍粒袋\",\r\n  \"block.immortalers_delight.himekaido_crate\": \"箱装姬海棠\",\r\n  \"block.immortalers_delight.pearlip_crate\": \"箱装珍珠棱蕉\",\r\n  \"block.immortalers_delight.evolutcorn_block\": \"白垩玉黍块\",\r\n  \"block.immortalers_delight.enchantal_cooler\": \"魔凝机\",\r\n  \"block.immortalers_delight.leisamboo_stalk\": \"溪竹\",\r\n  \"block.immortalers_delight.leisamboo_crop\": \"溪竹\",\r\n  \"block.immortalers_delight.himekaido_yogurt_pie\": \"姬海棠酸奶派\",\r\n  \"block.immortalers_delight.kwat_wheat\": \"瓦斯麦\",\r\n  \"block.immortalers_delight.nether_bread_cream_soup\": \"下界奶油面包浓汤\",\r\n  \"block.immortalers_delight.oxidized_ancient_stove\": \"氧化的古代炉灶\",\r\n  \"block.immortalers_delight.ancient_stove\": \"古代炉灶\",\r\n  \"block.immortalers_delight.ancient_wood_log\": \"古木原木\",\r\n  \"block.immortalers_delight.ancient_wood\": \"古木\",\r\n  \"block.immortalers_delight.stripped_ancient_wood\": \"去皮古木\",\r\n  \"block.immortalers_delight.stripped_ancient_wood_log\": \"去皮古木原木\",\r\n  \"block.immortalers_delight.ancient_wood_planks\": \"古木板\",\r\n  \"block.immortalers_delight.ancient_wood_cabinet\": \"古木橱柜\",\r\n  \"block.immortalers_delight.ancient_wood_stairs\": \"古木楼梯\",\r\n  \"block.immortalers_delight.ancient_wood_slab\": \"古木台阶\",\r\n  \"block.immortalers_delight.ancient_wood_door\": \"古木门\",\r\n  \"block.immortalers_delight.ancient_wood_trapdoor\": \"古木活板门\",\r\n  \"block.immortalers_delight.ancient_wood_fence\": \"古木栅栏\",\r\n  \"block.immortalers_delight.ancient_wood_fence_gate\": \"古木栅栏门\",\r\n  \"block.immortalers_delight.ancient_wood_pressure_plate\": \"古木压力板\",\r\n  \"block.immortalers_delight.ancient_wood_button\": \"古木按钮\",\r\n  \"entity.immortalers_delight.immortal_chest_boat\": \"运输船\",\r\n  \"effect.immortalers_delight.incandescence\": \"灼热\",\r\n  \"effect.immortalers_delight.weak_poison\": \"弱中毒\",\r\n  \"effect.immortalers_delight.weak_wither\": \"弱凋零\",\r\n  \"effect.immortalers_delight.relieve_poison\": \"解毒\",\r\n  \"effect.immortalers_delight.resistance_to_undead\": \"尸毒抵抗\",\r\n  \"effect.immortalers_delight.resistance_to_arthropod\": \"虫毒抵抗\",\r\n  \"effect.immortalers_delight.resistance_to_abyssal\": \"渊毒抵抗\",\r\n  \"effect.immortalers_delight.resistance_to_illager\": \"厄毒抵抗\",\r\n  \"effect.immortalers_delight.magical_reverse\": \"奇迹般的转变\",\r\n  \"effect.immortalers_delight.gas_poison\": \"绯烬烈灼\",\r\n  \"effect.immortalers_delight.inebriated\": \"酩酊\",\r\n  \"effect.immortalers_delight.keep_a_fast\": \"俭省\",\r\n  \"effect.immortalers_delight.burn_the_boats\": \"破釜\",\r\n  \"effect.immortalers_delight.cultural_legacy\": \"文化底蕴\",\r\n  \"effect.immortalers_delight.warm_current_surges\": \"燃起来了\",\r\n  \"effect.immortalers_delight.resistance_to_surroundings\": \"醇厚\",\r\n  \"advancements.immortalers_delight.immortalers_delight.title\": \"千古乐事\",\r\n  \"advancements.immortalers_delight.immortalers_delight.descr\": \"远古之味，静待出土。\",\r\n  \"advancements.immortalers_delight.it_is_more_unusual_than_unusual_food_s_delight.title\": \"这比奇食乐事更懂奇食\",\r\n  \"advancements.immortalers_delight.it_is_more_unusual_than_unusual_food_s_delight.descr\": \"原来千古乐事是千古以来最奇怪的乐事的意思吗？\",\r\n  \"advancements.immortalers_delight.ealdaec_gemhus.title\": \"古炊凡家\",\r\n  \"advancements.immortalers_delight.ealdaec_gemhus.descr\": \"千秋一粟。\",\r\n  \"advancements.immortalers_delight.treow_meregrot.title\": \"木上珍蚌\",\r\n  \"advancements.immortalers_delight.treow_meregrot.descr\": \"获得来自丛林的黑色宝珠。\",\r\n  \"advancements.immortalers_delight.wundor_forbodaeppel.title\": \"乐园禁果\",\r\n  \"advancements.immortalers_delight.wundor_forbodaeppel.descr\": \"获得来自森林的奇迹之籽\",\r\n  \"advancement.immortalers_delight.get_himekaido_trees\": \"拔苗助长\",\r\n  \"advancement.immortalers_delight.get_himekaido_trees.desc\": \"肥沃的土地、额外的肥料——追求卓越总要伴随牺牲。\",\r\n  \"advancement.immortalers_delight.get_stewed_rotten_meat_pot\": \"注意卫生\",\r\n  \"advancement.immortalers_delight.get_stewed_rotten_meat_pot.desc\": \"纹饰虽美，但作为餐具，还是洁净更重要。\",\r\n  \"advancements.immortalers_delight.crimson_clouds.title\": \"绯红烟云\",\r\n  \"advancements.immortalers_delight.crimson_clouds.descr\": \"在绯红森林获得不同寻常的小麦种子。\",\r\n  \"advancements.immortalers_delight.ice_extract.title\": \"冷翠\",\r\n  \"advancements.immortalers_delight.ice_extract.descr\": \"获得魔凝机。\",\r\n  \"advancements.immortalers_delight.the_eternal_flow.title\": \"千古一流\",\r\n  \"advancements.immortalers_delight.the_eternal_flow.descr\": \"在河流获得含茶竹节。\",\r\n  \"container.enchantal_cooler\": \"魔凝机\",\r\n  \"potion.potency.4\": \"V\",\r\n  \"potion.potency.5\": \"VI\",\r\n  \"potion.potency.6\": \"VII\",\r\n  \"potion.potency.7\": \"VIII\",\r\n  \"potion.potency.8\": \"IX\",\r\n  \"potion.potency.9\": \"X\",\r\n  \"farmersdelight.tooltip.golden_himekaido\": \"食用后，免疫并反转 II 级以下的有害效果\",\r\n  \"farmersdelight.tooltip.enchanted_golden_himekaido\": \"食用后 1 秒内，免疫并反转 V 级以下的有害效果(包括瞬时效果)\",\r\n  \"farmersdelight.tooltip.golden_fabric\": \"制成面纱以抵御绯烬尘霾\",\r\n  \"effect.immortalers_delight.incandescence.description\": \"进食时可以获得或延长力量效果。\",\r\n  \"effect.immortalers_delight.weak_poison.description\": \"更低危害的中毒，伤害更低且不会使得生命值低于50%。每40tick将给予1点魔法伤害，每级伤害值翻倍，在生命不大于生命上限的50%时会停止伤害，且该伤害不会令生命值低于50%。\",\r\n  \"effect.immortalers_delight.weak_wither.description\": \"更低危害的凋零，伤害更低且不会致死。每50tick给予1点凋零伤害，每等级翻倍，当生命值不大于1时会停止伤害，其伤害不会令生命值小于1。\",\r\n  \"effect.immortalers_delight.relieve_poison.description\": \"解除等级更低的中毒效果，将等级更低的凋零效果转变为弱凋零。\",\r\n  \"effect.immortalers_delight.resistance_to_undead.description\": \"减免亡灵生物造成的伤害，减伤比例约25%每级，不会达到100%\",\r\n  \"effect.immortalers_delight.resistance_to_arthropod.description\": \"减免节肢生物造成的伤害，减伤比例约25%每级，不会达到100%。与节肢杀手对应地：受到节肢生物伤害时会派生短时间速度IV效果。\",\r\n  \"effect.immortalers_delight.resistance_to_abyssal.description\": \"减免水生生物造成的伤害，减伤比例约25%每级，不会达到100%。在受到水生生物伤害时会派生短时间水下呼吸效果。\",\r\n  \"effect.immortalers_delight.resistance_to_illager.description\": \"减免灾厄村民造成的伤害，减伤比例约25%每级，不会达到100%。\\n你知道吗：恼鬼不属于灾厄村民，尽管它不会被灾厄村民误伤\",\r\n  \"effect.immortalers_delight.magical_reverse.description\": \"移除并尝试反转等级更低的负面效果（反转仅对原版和农夫乐事的效果生效）。持续时间不会被延长。\",\r\n  \"effect.immortalers_delight.gas_poison.description\": \"不可被牛奶解除。每32tick强制减扣6%最大生命值，每秒随机派生下列的一项效果：失明、反胃、虚弱、缓慢、饥饿。派生的效果也不可被牛奶解除。对怪物的伤害上限为每次1.2。\",\r\n  \"effect.immortalers_delight.inebriated.description\": \"不可被牛奶解除。在持续时长为3分钟以下时不生效。每64tick造成8%最大生命值的真实伤害，该伤害不会令生命值低于8%在生物生命值低于8%时停止伤害。派生下列的所有效果：失明、反胃、虚弱、缓慢、中毒。派生的效果也不可被牛奶解除。对怪物的伤害上限为每次1.6。\\n你知道吗：饮酒获得该效果会使得该效果的时间叠加而不是取最长，请节制饮酒。\",\r\n  \"effect.immortalers_delight.keep_a_fast.description\": \"获得该效果时将使得玩家的饥饿值被压缩到原有值的一半，且持续期间饥饿值的消耗将降为［效果等级+1］分之一（与耐久附魔相似，不影响回复生命等行为）。在效果结束时使玩家的饥饿值复原（翻倍），溢出的饥饿值将回收以立即为玩家恢复生命，回收的比例随效果等级提高。\",\r\n  \"effect.immortalers_delight.burn_the_boats.description\": \"在生命值低于一定比例时，给予生物15秒力量III、速度III、急迫III、跳跃提升III、抗性提升III。使得生命条部分被盾牌与燃火的剑覆盖，覆盖的部分标记了触发该效果的生命值。\",\r\n  \"effect.immortalers_delight.cultural_legacy.description\": \"在附魔台附近时，提升附魔台的附魔等级，效果结束时获得一定量经验。\\n需要在附魔台的书架检测范围内生效，检测约4秒一次。1级效果可以提升8级附魔等级，此后每级效果提升4级附魔等级，最高生效8级，即最多提升36级附魔等级。\\n该效果可令附魔台的第一、二条附魔选项也达到30级（需要4级效果，2级效果仅能使得第二条附魔达到30级），使得可以消耗2等级甚至1等级进行30级附魔。\",\r\n  \"effect.immortalers_delight.warm_current_surges.description\": \"燃起来了\",\r\n  \"death.attack.drunk\": \"%1$s 醉倒在柏油路上\",\r\n  \"death.attack.drunk.item\": \"%1$ 被 %2$s 杀死 %3$s\",\r\n  \"death.attack.drunk.player\": \"%1$ 在试图逃跑时死亡 %2$s\",\r\n  \"death.attack.gas\": \"%1$s 被瓦斯毒气熏成了腊肉\",\r\n  \"death.attack.gas.item\": \"%1$ 被 %2$s 杀死 %3$s\",\r\n  \"death.attack.gas.player\": \"%1$ 在试图逃跑时死亡 %2$s\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/immortalers_delight/lang/zh_cn.json b/src/main/resources/assets/immortalers_delight/lang/zh_cn.json
--- a/src/main/resources/assets/immortalers_delight/lang/zh_cn.json	(revision bd6cbccc7842f3760016996ac5fc52a999a67365)
+++ b/src/main/resources/assets/immortalers_delight/lang/zh_cn.json	(date 1746021175398)
@@ -104,6 +104,12 @@
   "item.immortalers_delight.nether_kvass": "地狱格瓦斯",
   "item.immortalers_delight.purgatory_ale": "炼狱麦酒",
   "block.immortalers_delight.pod_shell_burger_meat": "荚壳汉堡肉",
+  "item.immortalers_delight.elixir_of_immortality": "蓬莱之药",
+  "item.immortalers_delight.pale_dew_wine": "秋露白",
+  "item.immortalers_delight.scarlet_devils_cake": "红魔鬼蛋糕",
+  "item.immortalers_delight.scarlet_devils_cake_slice": "红魔鬼蛋糕切片",
+  "item.immortalers_delight.red_stuffed_bun": "大红包子",
+  "item.immortalers_delight.spicy_pudding": "辛烈布丁",
   "block.immortalers_delight.himekaido_log": "姬海棠原木",
   "block.immortalers_delight.stripped_himekaido_log": "去皮姬海棠原木",
   "block.immortalers_delight.himekaido_wood": "姬海棠木头",
@@ -169,6 +175,7 @@
   "block.immortalers_delight.ancient_wood_fence_gate": "古木栅栏门",
   "block.immortalers_delight.ancient_wood_pressure_plate": "古木压力板",
   "block.immortalers_delight.ancient_wood_button": "古木按钮",
+  "block.immortalers_delight.scarlet_devils_cake": "红魔鬼蛋糕",
   "entity.immortalers_delight.immortal_chest_boat": "运输船",
   "effect.immortalers_delight.incandescence": "灼热",
   "effect.immortalers_delight.weak_poison": "弱中毒",
@@ -213,6 +220,7 @@
   "potion.potency.7": "VIII",
   "potion.potency.8": "IX",
   "potion.potency.9": "X",
+  "farmersdelight.tooltip.elixir_of_immortality": "[独一]在每场游戏中仅能发挥一次效果，此后再次使用时效果将劣化。",
   "farmersdelight.tooltip.golden_himekaido": "食用后，免疫并反转 II 级以下的有害效果",
   "farmersdelight.tooltip.enchanted_golden_himekaido": "食用后 1 秒内，免疫并反转 V 级以下的有害效果(包括瞬时效果)",
   "farmersdelight.tooltip.golden_fabric": "制成面纱以抵御绯烬尘霾",
Index: src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightFoodProperties.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.init;\r\n\r\nimport net.minecraft.world.effect.MobEffect;\r\nimport net.minecraft.world.effect.MobEffectInstance;\r\nimport net.minecraft.world.effect.MobEffects;\r\nimport net.minecraft.world.food.FoodProperties;\r\nimport vectorwing.farmersdelight.common.registry.ModEffects;\r\n\r\npublic class ImmortalersDelightFoodProperties {\r\n\r\n    public static final FoodProperties BOWL_OF_MILLENIAN_BAMBOO = new FoodProperties.Builder().nutrition(6)\r\n            .saturationMod(0.65f)\r\n            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),1200,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(ModEffects.NOURISHMENT.get(),1200,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.CULTURAL_LEGACY.get(),6000,0),1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties EVOLUTCORN = new FoodProperties.Builder().nutrition(2)\r\n            .saturationMod(0.75f).build();\r\n\r\n    public static final FoodProperties ROAST_EVOLUTCORN = new FoodProperties.Builder().nutrition(4)\r\n            .saturationMod(0.625f).build();\r\n\r\n    public static final FoodProperties EVOLUTCORN_GRAINS = new FoodProperties.Builder().nutrition(2)\r\n            .saturationMod(0.75f).build();\r\n\r\n    public static final FoodProperties ROAST_EVOLUTCORN_CHOPS = new FoodProperties.Builder().nutrition(4)\r\n            .saturationMod(0.625f).build();\r\n\r\n    public static final FoodProperties CRETACEOUS_ZEA_BALL = new FoodProperties.Builder().nutrition(6)\r\n            .saturationMod(0.45f)\r\n            .effect(()-> new MobEffectInstance(ModEffects.NOURISHMENT.get(),800,0),1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties COLORFUL_GRILLED_SKEWERS = new FoodProperties.Builder().nutrition(9)\r\n            .saturationMod(0.85f).build();\r\n\r\n    public static final FoodProperties PEARLIP = new FoodProperties.Builder().nutrition(1)\r\n            .saturationMod(0.4f).build();\r\n\r\n    public static final FoodProperties POPOLUTCORN = new FoodProperties.Builder().nutrition(4).fast()\r\n            .saturationMod(0.625f).effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600,0),1.0F).build();\r\n\r\n    public static final FoodProperties PEARLIPEARL = new FoodProperties.Builder().nutrition(1).fast()\r\n            .saturationMod(0.15f).build();\r\n\r\n    public static final FoodProperties PEATIC_MUSA_SALAD = new FoodProperties.Builder().nutrition(6).fast()\r\n            .saturationMod(0.6f).effect(()-> new MobEffectInstance(MobEffects.HEAL,1,0),1.0F).build();\r\n\r\n    public static final FoodProperties PEARLIP_MILK_SHAKE = new FoodProperties.Builder().alwaysEat()\r\n            .effect(()-> new MobEffectInstance(MobEffects.REGENERATION,600,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(MobEffects.DAMAGE_RESISTANCE,600,0),1F).build();\r\n\r\n    public static final FoodProperties PEARLIP_PUMPKIN_PIE = new FoodProperties.Builder().nutrition(3).fast()\r\n            .saturationMod(1.0f).build();\r\n\r\n    public static final FoodProperties PEARLIPEARL_TART = new FoodProperties.Builder().nutrition(8)\r\n            .saturationMod(0.625f).build();\r\n\r\n    public static final FoodProperties PEARLIPEARL_EGGSTEAM = new FoodProperties.Builder().nutrition(2)\r\n            .saturationMod(0.3f).effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),1200,0),1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties PEARLIP_JELLY = new FoodProperties.Builder().nutrition(2)\r\n            .saturationMod(0.2f).effect(()-> new MobEffectInstance(MobEffects.JUMP,1200,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1200,0),1.0F)\r\n            .build();\r\n\r\n    /*\r\n    姬海棠系列食物\r\n     */\r\n    public static final FoodProperties HIMEKAIDO = new FoodProperties.Builder()\r\n            .nutrition(3)\r\n            .saturationMod(0.6f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RELIEVE_POISON.get(), 25, 0);\r\n            }, 1.0F)\r\n            .build();\r\n    public static final FoodProperties HIMEKAIDO_JELLY = new FoodProperties.Builder().alwaysEat()\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),120,1),1.0F)\r\n            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,4,0),1.0F).build();\r\n    public static final FoodProperties YOGURT = new FoodProperties.Builder().alwaysEat()\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),400,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,4,0),0.51F).build();\r\n    public static final FoodProperties BAKED_POISONOUS_POTATO = new FoodProperties.Builder()\r\n            .nutrition(6)\r\n            .saturationMod(0.55f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.WEAK_POISON.get(), 80, 0);\r\n            }, 0.6F)\r\n            .build();\r\n    public static final FoodProperties DIPPED_ROTTEN_FLESH = new FoodProperties.Builder()\r\n            .nutrition(4)\r\n            .saturationMod(0.45f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_UNDEAD.get(),320,0);\r\n            }, 0.6F)\r\n            .build();\r\n\r\n    public static final FoodProperties CRISPY_YOGURT_ROTTEN_FLESH = new FoodProperties.Builder()\r\n            .nutrition(6)\r\n            .saturationMod(0.6f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_UNDEAD.get(),720,0);\r\n            }, 1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties MEATY_ROTTEN_TOMATO_BROTH = new FoodProperties.Builder()\r\n            .nutrition(8)\r\n            .saturationMod(0.4f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_UNDEAD.get(),560,0);\r\n            }, 1.0F)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ILLAGER.get(),360,0);\r\n            }, 1.0F)\r\n            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),1800,0),1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties BRAISED_SPIDER_EYES_IN_GRAVY = new FoodProperties.Builder()\r\n            .nutrition(4)\r\n            .saturationMod(0.5f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ARTHROPOD.get(),560,0);\r\n            }, 1.0F)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_UNDEAD.get(),360,0);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.REGENERATION,150,0),1.0F)\r\n            .build();\r\n    public static final FoodProperties TARTARE_CHICKEN = new FoodProperties.Builder()\r\n            .nutrition(8)\r\n            .saturationMod(0.875f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ARTHROPOD.get(),640,1);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.REGENERATION,450,0),1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties STUFFED_POISONOUS_POTATO = new FoodProperties.Builder()\r\n            .nutrition(10)\r\n            .saturationMod(0.6f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_UNDEAD.get(),360,0);\r\n            }, 1.0F)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ILLAGER.get(),800,0);\r\n            }, 1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties PUFFERFISH_ROLL = new FoodProperties.Builder()\r\n            .nutrition(4)\r\n            .saturationMod(1.2f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ABYSSAL.get(),2000,0);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.HEALTH_BOOST,600,0),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.REGENERATION,250,1),1.0F)\r\n            .build();\r\n    public static final FoodProperties BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT = new FoodProperties.Builder()\r\n            .nutrition(8)\r\n            .saturationMod(1.2f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ModEffects.NOURISHMENT.get(),2000,0);\r\n            }, 1.0F)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ABYSSAL.get(),1600,1);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.HEALTH_BOOST,2400,0),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.REGENERATION,250,1),1.0F)\r\n            .build();\r\n    public static final FoodProperties GOLDEN_HIMEKAIDO = new FoodProperties.Builder()\r\n            .nutrition(4)\r\n            .saturationMod(1.2f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.MAGICAL_REVERSE.get(),3,1);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.ABSORPTION,2400,0),1.0F)\r\n            .alwaysEat()\r\n            .build();\r\n    public static final FoodProperties ENCHANTED_GOLDEN_HIMEKAIDO = new FoodProperties.Builder()\r\n            .nutrition(8)\r\n            .saturationMod(1.25f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.MAGICAL_REVERSE.get(),20,3);\r\n            }, 1.0F)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RELIEVE_POISON.get(),6000,0);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.ABSORPTION,2400,1),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.HEALTH_BOOST,2400,1),1.0F)\r\n            .alwaysEat()\r\n            .build();\r\n    public static final FoodProperties KWAT_WHEAT = new FoodProperties.Builder().alwaysEat()\r\n            .nutrition(3)\r\n            .saturationMod(0.1f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.GAS_POISON.get(),100,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,3,0),1.0F).build();\r\n    public static final FoodProperties RAW_SNIFFER_SLICE = new FoodProperties.Builder()\r\n            .nutrition(2)\r\n            .saturationMod(0.5f)\r\n            .effect(new MobEffectInstance(MobEffects.DIG_SPEED,60,0),1.0F)\r\n            .build();\r\n    public static final FoodProperties COOKED_SNIFFER_SLICE = new FoodProperties.Builder()\r\n            .nutrition(3)\r\n            .saturationMod(1.45f)\r\n            .effect(new MobEffectInstance(MobEffects.DIG_SPEED,80,0),1.0F).build();\r\n\r\n    public static final FoodProperties RAW_SNIFFER_STEAK = new FoodProperties.Builder()\r\n            .nutrition(4)\r\n            .saturationMod(0.5f)\r\n            .effect(new MobEffectInstance(MobEffects.DIG_SPEED,120,0),1.0F).build();\r\n\r\n    public static final FoodProperties COOKED_SNIFFER_STEAK = new FoodProperties.Builder()\r\n            .nutrition(9)\r\n            .saturationMod(0.8f)\r\n            .effect(new MobEffectInstance(MobEffects.DIG_SPEED,300,0),1.0F).build();\r\n\r\n    public static final FoodProperties CLEAR_WATER_VODKA = new FoodProperties.Builder()\r\n            .alwaysEat()\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),12000,0),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.REGENERATION,1500,0),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.ABSORPTION,900,9),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.HEAL,1,1),1.0F).build();\r\n\r\n    public static final FoodProperties ZEA_PANCAKE_SLICE = new FoodProperties.Builder().nutrition(3).saturationMod(0.65f).build();\r\n\r\n    public static final FoodProperties PEARLIP_PIE_SLICE = new FoodProperties.Builder().nutrition(3).saturationMod(0.65f).build();\r\n\r\n    public static final FoodProperties HIMEKAIDO_YOGURT_PIE_SLICE = new FoodProperties.Builder().nutrition(3).saturationMod(0.65f).build();\r\n\r\n    public static final FoodProperties EVOLUTCORN_BEER = new FoodProperties.Builder()\r\n            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,2700,2),1F)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),1800),1F).build();\r\n\r\n    public static final FoodProperties DREUMK_WINE = new FoodProperties.Builder()\r\n            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,1800,2),1F)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),1800),1F)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),6000),1.0F).build();\r\n\r\n    public static final FoodProperties VULCAN_COKTAIL = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),600),1F)\r\n            .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),9600),1F).build();\r\n\r\n    public static final FoodProperties LEAF_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1800),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.DIG_SPEED,360),1F).build();\r\n\r\n    public static final FoodProperties LEISAMBOO_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.NIGHT_VISION,1800),1F)\r\n            .effect(() ->new MobEffectInstance(MobEffects.DIG_SPEED,340),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.DIG_SLOWDOWN,540),1F).build();\r\n\r\n    public static final FoodProperties ICED_BLACK_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,1440,2),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN,1200,1),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.JUMP,20,3),1F).build();\r\n\r\n    public static final FoodProperties PEARLIPEARL_MILK_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,2000,1),1F)\r\n            .effect(() ->new MobEffectInstance(MobEffects.SATURATION,3),1F)\r\n            .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.RESISTANCE_TO_SURROUNDINGS.get(),2000,1),1F).build();\r\n\r\n    public static final FoodProperties PEARLIPEARL_MILK_GREEN = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1600,1),1F)\r\n            .effect(() ->new MobEffectInstance(MobEffects.SATURATION,1,2),1F)\r\n            .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.RESISTANCE_TO_SURROUNDINGS.get(),4200),1F).build();\r\n\r\n    public static final FoodProperties STOVE_BLACK_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,2200),1F)\r\n            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),600,0),1.0F).build();\r\n\r\n    public static final FoodProperties LEAF_GREEN_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1350,1),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.NIGHT_VISION,480),1F).build();\r\n\r\n    public static final FoodProperties BRITISH_YELLOW_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.DIG_SPEED,1800),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.FIRE_RESISTANCE,300),1F).build();\r\n\r\n    public static final FoodProperties KWAT_WHEAT_DOUFU = new FoodProperties.Builder().nutrition(1).saturationMod(1F).build();\r\n\r\n    public static final FoodProperties FRY_KWAT_WHEAT_DOUFU = new FoodProperties.Builder().nutrition(4).saturationMod(0.5F)\r\n            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,400,1),1F).build();\r\n\r\n    public static final FoodProperties JADE_AND_RUBY_SOUP = new FoodProperties.Builder().nutrition(6).saturationMod(0.5F)\r\n            .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.KEEP_A_FAST.get(),200,1),1F)\r\n            .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),800),1F)\r\n            .effect(()->new MobEffectInstance(ModEffects.COMFORT.get(),800),1F).build();\r\n\r\n    public static final FoodProperties KWAT_WHEAT_TOAST = new FoodProperties.Builder().nutrition(12).saturationMod(0.6f).build();\r\n\r\n    public static final FoodProperties KWAT_WHEAT_TOAST_SLICE = new FoodProperties.Builder().nutrition(4).saturationMod(0.4f).build();\r\n\r\n    public static final FoodProperties NETHER_CREAM_SOUP = new FoodProperties.Builder().nutrition(6).saturationMod(0.75f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600,1),1F)\r\n            .effect(()->new MobEffectInstance(ModEffects.COMFORT.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties NETHER_CREAM_BREAD = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),2400),1F)\r\n            .effect(new MobEffectInstance(MobEffects.SATURATION,60),1F).build();\r\n\r\n    public static final FoodProperties HOT_HI_SOUP = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600),1F).build();\r\n\r\n    public static final FoodProperties INCANDESCENCE_SUSHI = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600),1F).build();\r\n\r\n    public static final FoodProperties TORCHFLOWER_CAKE = new FoodProperties.Builder().nutrition(4).saturationMod(0.5f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600),1F)\r\n            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties TORCHFLOWER_CURRY_RICE = new FoodProperties.Builder().nutrition(15).saturationMod(1f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),1200),1F).build();\r\n    public static final FoodProperties HOT_HI_SOUP = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),600),1F).build();\r\n\r\n    public static final FoodProperties INCANDESCENCE_SUSHI = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),600),1F).build();\r\n\r\n    public static final FoodProperties TORCHFLOWER_CAKE = new FoodProperties.Builder().nutrition(4).saturationMod(0.5f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),600),1F)\r\n            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties TORCHFLOWER_CURRY_RICE = new FoodProperties.Builder().nutrition(15).saturationMod(1f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties EXTRA_SPICY_PASTA = new FoodProperties.Builder().nutrition(12).saturationMod(0.35f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),1200),1F).build();\r\n    public static final FoodProperties EXTRA_SPICY_PASTA = new FoodProperties.Builder().nutrition(12).saturationMod(0.35f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties TORCHFLOWER_COOKIE = new FoodProperties.Builder().nutrition(1).saturationMod(0.5f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),200),1F).fast().build();\r\n\r\n    //TORCHFLOWER_COOKIE\r\n    public static final FoodProperties TORCHFLOWER_COOKIE = new FoodProperties.Builder().nutrition(1).saturationMod(0.5f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),200),1F).fast().build();\r\n\r\n    public static final FoodProperties MASHED_POTATOES = new FoodProperties.Builder().nutrition(1).saturationMod(0.5f).fast().build();\r\n\r\n    public static final FoodProperties MASHED_POISONOUS_POTATO = new FoodProperties.Builder().nutrition(1).saturationMod(0.5f)\r\n            .effect(new MobEffectInstance(MobEffects.POISON,600),0.3F).fast().build();\r\n\r\n    public static final FoodProperties MASHED_POTATO_WITH_JAM = new FoodProperties.Builder().nutrition(6).saturationMod(0.6f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties MASHED_POISONOUS_POTATO_WITH_JAM = new FoodProperties.Builder().nutrition(6).saturationMod(0.6f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RESISTANCE_TO_ILLAGER.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties SUTFFED_DOUFU = new FoodProperties.Builder().nutrition(6).saturationMod(0.65F)\r\n            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,1200,1),1F).build();\r\n\r\n    public static final FoodProperties ICE_PEARLIP = new FoodProperties.Builder().nutrition(4).saturationMod(0.25F).fast().build();\r\n\r\n    public static final FoodProperties CHOCOLATE_PEARLIP_STICKS = new FoodProperties.Builder().nutrition(6).saturationMod(0.165F).fast().build();\r\n\r\n    public static final FoodProperties NETHER_KVASS = new FoodProperties.Builder()\r\n            .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600,1),1F)\r\n            .effect(new MobEffectInstance(MobEffects.CONFUSION,100),1F)\r\n            .build();\r\n\r\n    public static final FoodProperties PITCHER_PLANT_BARBECUE = new FoodProperties.Builder().nutrition(8).saturationMod(0.375F)\r\n            .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.BURN_THE_BOATS.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties POD_SHELL_BURGER_MEAT_CUBE = new FoodProperties.Builder().nutrition(6).saturationMod(0.55F)\r\n            .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.BURN_THE_BOATS.get(),1800),1F).build();\r\n\r\n    public static final FoodProperties PURGATORY_ALE = new FoodProperties.Builder()\r\n            .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),3600),1F)\r\n            .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),2400),1F).build();\r\n\r\n    //PURGATORY_ALE\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightFoodProperties.java b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightFoodProperties.java
--- a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightFoodProperties.java	(revision bd6cbccc7842f3760016996ac5fc52a999a67365)
+++ b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightFoodProperties.java	(date 1745935686690)
@@ -78,10 +78,10 @@
             .build();
     public static final FoodProperties HIMEKAIDO_JELLY = new FoodProperties.Builder().alwaysEat()
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),120,1),1.0F)
-            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,4,0),1.0F).build();
+            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,5,0),1.0F).build();
     public static final FoodProperties YOGURT = new FoodProperties.Builder().alwaysEat()
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),400,0),1.0F)
-            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,4,0),0.51F).build();
+            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,4,0),1.0F).build();
     public static final FoodProperties BAKED_POISONOUS_POTATO = new FoodProperties.Builder()
             .nutrition(6)
             .saturationMod(0.55f)
@@ -219,9 +219,9 @@
     public static final FoodProperties CLEAR_WATER_VODKA = new FoodProperties.Builder()
             .alwaysEat()
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),12000,0),1.0F)
-            .effect(new MobEffectInstance(MobEffects.REGENERATION,1500,0),1.0F)
-            .effect(new MobEffectInstance(MobEffects.ABSORPTION,900,9),1.0F)
-            .effect(new MobEffectInstance(MobEffects.HEAL,1,1),1.0F).build();
+            .effect(()-> new MobEffectInstance(MobEffects.REGENERATION,1500,0),1.0F)
+            .effect(()-> new MobEffectInstance(MobEffects.ABSORPTION,900,9),1.0F)
+            .effect(()-> new MobEffectInstance(MobEffects.HEAL,1,1),1.0F).build();
 
     public static final FoodProperties ZEA_PANCAKE_SLICE = new FoodProperties.Builder().nutrition(3).saturationMod(0.65f).build();
 
@@ -230,60 +230,86 @@
     public static final FoodProperties HIMEKAIDO_YOGURT_PIE_SLICE = new FoodProperties.Builder().nutrition(3).saturationMod(0.65f).build();
 
     public static final FoodProperties EVOLUTCORN_BEER = new FoodProperties.Builder()
-            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,2700,2),1F)
+            .alwaysEat()
+            .effect(()-> new MobEffectInstance(MobEffects.DAMAGE_BOOST,2700,2),1F)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),1800),1F).build();
 
     public static final FoodProperties DREUMK_WINE = new FoodProperties.Builder()
-            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,1800,2),1F)
+            .alwaysEat()
+            //.effect(()-> new MobEffectInstance(MobEffects.DAMAGE_BOOST,1800,2),1F)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),1800),1F)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),6000),1.0F).build();
 
     public static final FoodProperties VULCAN_COKTAIL = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(() ->new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),600),1F)
             .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),9600),1F).build();
 
     public static final FoodProperties LEAF_TEA = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1800),1F)
             .effect(() -> new MobEffectInstance(MobEffects.DIG_SPEED,360),1F).build();
 
     public static final FoodProperties LEISAMBOO_TEA = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(() ->new MobEffectInstance(MobEffects.NIGHT_VISION,1800),1F)
             .effect(() ->new MobEffectInstance(MobEffects.DIG_SPEED,340),1F)
             .effect(() -> new MobEffectInstance(MobEffects.DIG_SLOWDOWN,540),1F).build();
 
-    public static final FoodProperties ICED_BLACK_TEA = new FoodProperties.Builder()
-            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,1440,2),1F)
-            .effect(() -> new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN,1200,1),1F)
-            .effect(() -> new MobEffectInstance(MobEffects.JUMP,20,3),1F).build();
-
-    public static final FoodProperties PEARLIPEARL_MILK_TEA = new FoodProperties.Builder()
-            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,2000,1),1F)
-            .effect(() ->new MobEffectInstance(MobEffects.SATURATION,3),1F)
-            .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.RESISTANCE_TO_SURROUNDINGS.get(),2000,1),1F).build();
-
-    public static final FoodProperties PEARLIPEARL_MILK_GREEN = new FoodProperties.Builder()
-            .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1600,1),1F)
-            .effect(() ->new MobEffectInstance(MobEffects.SATURATION,1,2),1F)
+     public static final FoodProperties PEARLIPEARL_MILK_GREEN = new FoodProperties.Builder()
+             .alwaysEat()
+            .effect(() -> new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1600,1),1F)
+            .effect(() -> new MobEffectInstance(MobEffects.SATURATION,1,2),1F)
             .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.RESISTANCE_TO_SURROUNDINGS.get(),4200),1F).build();
 
+    public static final FoodProperties PEARLIPEARL_MILK_TEA = new FoodProperties.Builder()
+            .alwaysEat()
+            .effect(() ->new MobEffectInstance(MobEffects.JUMP,1500,2),1F)
+            .effect(() ->new MobEffectInstance(MobEffects.SATURATION,3),1F)
+            .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.RESISTANCE_TO_SURROUNDINGS.get(),2000,1),1F).build();
+
+    public static final FoodProperties ICED_BLACK_TEA = new FoodProperties.Builder()
+            .alwaysEat()
+            .effect(() ->new MobEffectInstance(MobEffects.JUMP,480,9),1F)
+            .effect(() -> new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN,1000,2),1F).build();
+
     public static final FoodProperties STOVE_BLACK_TEA = new FoodProperties.Builder()
-            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,2200),1F)
+            .alwaysEat()
+            .effect(() ->new MobEffectInstance(MobEffects.JUMP,2000,1),1F)
             .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),600,0),1.0F).build();
 
+
     public static final FoodProperties LEAF_GREEN_TEA = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1350,1),1F)
             .effect(() -> new MobEffectInstance(MobEffects.NIGHT_VISION,480),1F).build();
 
     public static final FoodProperties BRITISH_YELLOW_TEA = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(() ->new MobEffectInstance(MobEffects.DIG_SPEED,1800),1F)
             .effect(() -> new MobEffectInstance(MobEffects.FIRE_RESISTANCE,300),1F).build();
 
+    public static final FoodProperties SCARLET_DEVILS_CAKE_SLICE = new FoodProperties.Builder()
+            .nutrition(5).saturationMod(0.6F)
+            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,500,1),1F)
+            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),600,0),1F)
+            .build();
+
+//    public static final FoodProperties ICED_BLACK_TEA = new FoodProperties.Builder()
+//            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,1440,2),1F)
+//            .effect(() -> new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN,1200,1),1F)
+//            .effect(() -> new MobEffectInstance(MobEffects.JUMP,20,3),1F).build();
+//
+    public static final FoodProperties RED_STUFFED_BUN = new FoodProperties.Builder()
+        .nutrition(10).saturationMod(0.77F)
+        .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,1800),1F).build();
+
     public static final FoodProperties KWAT_WHEAT_DOUFU = new FoodProperties.Builder().nutrition(1).saturationMod(1F).build();
 
     public static final FoodProperties FRY_KWAT_WHEAT_DOUFU = new FoodProperties.Builder().nutrition(4).saturationMod(0.5F)
             .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,400,1),1F).build();
 
-    public static final FoodProperties JADE_AND_RUBY_SOUP = new FoodProperties.Builder().nutrition(6).saturationMod(0.5F)
+    public static final FoodProperties JADE_AND_RUBY_SOUP = new FoodProperties.Builder().alwaysEat().nutrition(6).saturationMod(0.5F)
             .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.KEEP_A_FAST.get(),200,1),1F)
             .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),800),1F)
             .effect(()->new MobEffectInstance(ModEffects.COMFORT.get(),800),1F).build();
@@ -298,20 +324,8 @@
 
     public static final FoodProperties NETHER_CREAM_BREAD = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),2400),1F)
-            .effect(new MobEffectInstance(MobEffects.SATURATION,60),1F).build();
+            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,60),1F).build();
 
-    public static final FoodProperties HOT_HI_SOUP = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)
-            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600),1F).build();
-
-    public static final FoodProperties INCANDESCENCE_SUSHI = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)
-            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600),1F).build();
-
-    public static final FoodProperties TORCHFLOWER_CAKE = new FoodProperties.Builder().nutrition(4).saturationMod(0.5f)
-            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600),1F)
-            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),1200),1F).build();
-
-    public static final FoodProperties TORCHFLOWER_CURRY_RICE = new FoodProperties.Builder().nutrition(15).saturationMod(1f)
-            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),1200),1F).build();
     public static final FoodProperties HOT_HI_SOUP = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),600),1F).build();
 
@@ -324,15 +338,9 @@
 
     public static final FoodProperties TORCHFLOWER_CURRY_RICE = new FoodProperties.Builder().nutrition(15).saturationMod(1f)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),1200),1F).build();
-
-    public static final FoodProperties EXTRA_SPICY_PASTA = new FoodProperties.Builder().nutrition(12).saturationMod(0.35f)
-            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),1200),1F).build();
-    public static final FoodProperties EXTRA_SPICY_PASTA = new FoodProperties.Builder().nutrition(12).saturationMod(0.35f)
+   public static final FoodProperties EXTRA_SPICY_PASTA = new FoodProperties.Builder().nutrition(12).saturationMod(0.35f)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),1200),1F).build();
 
-    public static final FoodProperties TORCHFLOWER_COOKIE = new FoodProperties.Builder().nutrition(1).saturationMod(0.5f)
-            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),200),1F).fast().build();
-
     //TORCHFLOWER_COOKIE
     public static final FoodProperties TORCHFLOWER_COOKIE = new FoodProperties.Builder().nutrition(1).saturationMod(0.5f)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),200),1F).fast().build();
@@ -340,7 +348,7 @@
     public static final FoodProperties MASHED_POTATOES = new FoodProperties.Builder().nutrition(1).saturationMod(0.5f).fast().build();
 
     public static final FoodProperties MASHED_POISONOUS_POTATO = new FoodProperties.Builder().nutrition(1).saturationMod(0.5f)
-            .effect(new MobEffectInstance(MobEffects.POISON,600),0.3F).fast().build();
+            .effect(()-> new MobEffectInstance(MobEffects.POISON,600),0.3F).fast().build();
 
     public static final FoodProperties MASHED_POTATO_WITH_JAM = new FoodProperties.Builder().nutrition(6).saturationMod(0.6f)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),1200),1F).build();
@@ -349,15 +357,16 @@
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RESISTANCE_TO_ILLAGER.get(),1200),1F).build();
 
     public static final FoodProperties SUTFFED_DOUFU = new FoodProperties.Builder().nutrition(6).saturationMod(0.65F)
-            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,1200,1),1F).build();
+            .effect(()->new MobEffectInstance(MobEffects.DAMAGE_BOOST,1200,1),1F).build();
 
     public static final FoodProperties ICE_PEARLIP = new FoodProperties.Builder().nutrition(4).saturationMod(0.25F).fast().build();
 
     public static final FoodProperties CHOCOLATE_PEARLIP_STICKS = new FoodProperties.Builder().nutrition(6).saturationMod(0.165F).fast().build();
 
     public static final FoodProperties NETHER_KVASS = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600,1),1F)
-            .effect(new MobEffectInstance(MobEffects.CONFUSION,100),1F)
+            .effect(()->new MobEffectInstance(MobEffects.CONFUSION,100),1F)
             .build();
 
     public static final FoodProperties PITCHER_PLANT_BARBECUE = new FoodProperties.Builder().nutrition(8).saturationMod(0.375F)
@@ -367,6 +376,7 @@
             .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.BURN_THE_BOATS.get(),1800),1F).build();
 
     public static final FoodProperties PURGATORY_ALE = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),3600),1F)
             .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),2400),1F).build();
 
Index: src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.init;\r\n\r\nimport com.google.common.collect.Sets;\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport com.renyigesai.immortalers_delight.entities.ImmortalersBoat;\r\nimport com.renyigesai.immortalers_delight.entities.ImmortalersChestBoat;\r\nimport com.renyigesai.immortalers_delight.item.*;\r\nimport com.renyigesai.immortalers_delight.util.datautil.worlddata.BaseImmortalWorldData;\r\nimport net.minecraft.world.food.FoodProperties;\r\nimport net.minecraft.world.item.*;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.minecraftforge.registries.DeferredRegister;\r\nimport net.minecraftforge.registries.ForgeRegistries;\r\nimport net.minecraftforge.registries.RegistryObject;\r\nimport vectorwing.farmersdelight.common.item.ConsumableItem;\r\nimport vectorwing.farmersdelight.common.item.DrinkableItem;\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.function.Supplier;\r\n\r\n\r\npublic class ImmortalersDelightItems {\r\n\r\n\r\n    public static final DeferredRegister<Item> REGISTER = DeferredRegister.create(ForgeRegistries.ITEMS, ImmortalersDelightMod.MODID);\r\n    public static LinkedHashSet<RegistryObject<Item>> CREATIVE_TAB_ITEMS = Sets.newLinkedHashSet();\r\n    public static final RegistryObject<Item> HIMEKAIDO_LOG;\r\n    public static final RegistryObject<Item> HIMEKAIDO_WOOD;\r\n    public static final RegistryObject<Item> STRIPPED_HIMEKAIDO_WOOD;\r\n    public static final RegistryObject<Item> STRIPPED_HIMEKAIDO_LOG;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FRUITED_LEAVES;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FLOWERING_LEAVES;\r\n    public static final RegistryObject<Item> HIMEKAIDO_LEAVES;\r\n    public static final RegistryObject<Item> HIMEKAIDO_PLANKS;\r\n    public static final RegistryObject<Item> HIMEKAIDO_STAIRS;\r\n    public static final RegistryObject<Item> HIMEKAIDO_SLAB;\r\n    public static final RegistryObject<Item> HIMEKAIDO_DOOR;\r\n    public static final RegistryObject<Item> HIMEKAIDO_TRAPDOOR;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FENCE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FENCE_GATE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_PRESSURE_PLATE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_BUTTON;\r\n    public static final RegistryObject<Item> HIMEKAIDO_CABINET;\r\n    public static final RegistryObject<Item> HIMEKAIDO_BOAT;\r\n    public static final RegistryObject<Item> HIMEKAIDO_CHEST_BOAT;\r\n    public static final RegistryObject<Item> MILLENIAN_BAMBOO;\r\n    public static final RegistryObject<Item> STEWED_ROTTEN_MEAT_POT;\r\n    public static final RegistryObject<Item> BRAISED_SPIDER_EYES_BLOCK;\r\n    public static final RegistryObject<Item> EVOLUTCORN_GRAIN_BAG;\r\n    public static final RegistryObject<Item> HIMEKAIDO_CRATE;\r\n    public static final RegistryObject<Item> PEARLIP_CRATE;\r\n    public static final RegistryObject<Item> EVOLUTCORN_BLOCK;\r\n    public static final RegistryObject<Item> HIMEKAIDO_SIGN;\r\n    public static final RegistryObject<Item> HIMEKAIDO_HANGING_SIGN;\r\n    public static final RegistryObject<Item> LEISAMBOO_PLANKS;\r\n    public static final RegistryObject<Item> LEISAMBOO_STAIRS;\r\n    public static final RegistryObject<Item> LEISAMBOO_SLAB;\r\n    public static final RegistryObject<Item> LEISAMBOO_FENCE;\r\n    public static final RegistryObject<Item> LEISAMBOO_FENCE_GATE;\r\n    public static final RegistryObject<Item> LEISAMBOO_PRESSURE_PLATE;\r\n    public static final RegistryObject<Item> LEISAMBOO_BUTTON;\r\n    public static final RegistryObject<Item> LEISAMBOO_SIGN;\r\n    public static final RegistryObject<Item> LEISAMBOO_HANGING_SIGN;\r\n    public static final RegistryObject<Item> ANCIENT_FIBER;\r\n    public static final RegistryObject<Item> BOWL_OF_MILLENIAN_BAMBOO;\r\n    public static final RegistryObject<Item> PITCHER_POD_PETAL;\r\n    /*\r\n    玉米系列物品\r\n    */\r\n    public static final RegistryObject<Item> EVOLUTCORN;\r\n    public static final RegistryObject<Item> ROAST_EVOLUTCORN;\r\n    public static final RegistryObject<Item> EVOLUTCORN_GRAINS;\r\n    public static final RegistryObject<Item> ROAST_EVOLUTCORN_CHOPS;\r\n    public static final RegistryObject<Item> POPOLUTCORN;\r\n    public static final RegistryObject<Item> CRETACEOUS_ZEA_BALL;\r\n    public static final RegistryObject<Item> COLORFUL_GRILLED_SKEWERS;\r\n    public static final RegistryObject<Item> ZEA_PANCAKE;\r\n    public static final RegistryObject<Item> ZEA_PANCAKE_SLICE;\r\n    public static final RegistryObject<Item> EVOLUTCORN_PIE_CRUST;\r\n    public static final RegistryObject<Item> EVOLUTCORN_BEER;\r\n    /*\r\n    香蕉系列物品\r\n    */\r\n    public static final RegistryObject<Item> PEARLIP;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL;\r\n    public static final RegistryObject<Item> PEARLIPEARL;\r\n    public static final RegistryObject<Item> PEATIC_MUSA_SALAD;\r\n    public static final RegistryObject<Item> PEARLIP_MILK_SHAKE;\r\n    public static final RegistryObject<Item> PEARLIP_PUMPKIN_PIE;\r\n    public static final RegistryObject<Item> PEARLIPEARL_TART;\r\n    public static final RegistryObject<Item> PEARLIPEARL_EGGSTEAM;\r\n    public static final RegistryObject<Item> PEARLIP_JELLY;\r\n    public static final RegistryObject<Item> PEARLIP_PIE;\r\n    public static final RegistryObject<Item> PEARLIP_PIE_SLICE;\r\n    public static final RegistryObject<Item> ICE_PEARLIP;\r\n    public static final RegistryObject<Item> CHOCOLATE_PEARLIP_STICKS;\r\n    /*\r\n    姬海棠系列物品\r\n     */\r\n    public static final RegistryObject<Item> MASHED_POTATOES;\r\n    public static final RegistryObject<Item> MASHED_POISONOUS_POTATO;\r\n    public static final RegistryObject<Item> MASHED_POTATO_WITH_JAM;\r\n    public static final RegistryObject<Item> MASHED_POISONOUS_POTATO_WITH_JAM;\r\n    public static final RegistryObject<Item> ROTTEN_FLESH_CUTS;\r\n    public static final RegistryObject<Item> HIMEKAIDO_JELLY;\r\n    public static final RegistryObject<Item> YOGURT;\r\n    public static final RegistryObject<Item> HIMEKAIDO;\r\n    public static final RegistryObject<Item> BAKED_POISONOUS_POTATO;\r\n    public static final RegistryObject<Item> BRAISED_SPIDER_EYES_IN_GRAVY;\r\n    public static final RegistryObject<Item> DIPPED_ROTTEN_FLESH;\r\n    public static final RegistryObject<Item> CRISPY_YOGURT_ROTTEN_FLESH;\r\n    public static final RegistryObject<Item> MEATY_ROTTEN_TOMATO_BROTH;\r\n    public static final RegistryObject<Item> STUFFED_POISONOUS_POTATO;\r\n    public static final RegistryObject<Item> PUFFERFISH_ROLL;\r\n    public static final RegistryObject<Item> GOLDEN_HIMEKAIDO;\r\n    public static final RegistryObject<Item> ENCHANTED_GOLDEN_HIMEKAIDO;\r\n    public static final RegistryObject<Item> HIMEKAIDO_SEED;\r\n    public static final RegistryObject<Item> BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT;\r\n    public static final RegistryObject<Item> TARTARE_CHICKEN;\r\n    public static final RegistryObject<Item> ENCHANTAL_COOLER;\r\n    public static final RegistryObject<Item> ANCIENT_STOVE;\r\n    public static final RegistryObject<Item> OXIDIZED_ANCIENT_STOVE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_YOGURT_PIE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_YOGURT_PIE_SLICE;\r\n    public static final RegistryObject<Item> DREUMK_WINE;\r\n    /*\r\n    古木相关\r\n    */\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_LOG;\r\n    public static final RegistryObject<Item> STRIPPED_ANCIENT_WOOD_LOG;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD;\r\n    public static final RegistryObject<Item> STRIPPED_ANCIENT_WOOD;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_PLANKS;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_CABINET;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_STAIRS;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_SLAB;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_DOOR;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_TRAPDOOR;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_FENCE;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_FENCE_GATE;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_PRESSURE_PLATE;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_BUTTON;\r\n\r\n    /*\r\n     溪竹相关物品\r\n     */\r\n    public static final RegistryObject<Item> LEAF_TEA;\r\n    public static final RegistryObject<Item> CONTAINS_TEA_LEISAMBOO;\r\n    public static final RegistryObject<Item> EMPTY_BAMBOO_CUP;\r\n    public static final RegistryObject<Item> LEISAMBOO_TEA;\r\n    public static final RegistryObject<Item> ICED_BLACK_TEA;\r\n    public static final RegistryObject<Item> PEARLIPEARL_MILK_TEA;\r\n    public static final RegistryObject<Item> PEARLIPEARL_MILK_GREEN;\r\n    public static final RegistryObject<Item> STOVE_BLACK_TEA;\r\n    public static final RegistryObject<Item> LEAF_GREEN_TEA;\r\n    public static final RegistryObject<Item> BRITISH_YELLOW_TEA;\r\n    public static final RegistryObject<Item> LEISAMBOO_TEA_CAKE;\r\n\r\n    /*\r\n    瓦斯麦相关物品\r\n    */\r\n    public static final RegistryObject<Item> KWAT_WHEAT_SEEDS;\r\n    public static final RegistryObject<Item> KWAT_WHEAT;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_DOUGH;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_PASTE;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_DOUFU;\r\n    public static final RegistryObject<Item> FRY_KWAT_WHEAT_DOUFU;\r\n    public static final RegistryObject<Item> SUTFFED_KWAT_WHEAT_DOUFU;\r\n    public static final RegistryObject<Item> JADE_AND_RUBY_SOUP;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_TOAST;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_TOAST_SLICE;\r\n    public static final RegistryObject<Item> NETHER_BREAD_CREAM_SOUP;\r\n    public static final RegistryObject<Item> NETHER_CREAM_SOUP;\r\n    public static final RegistryObject<Item> NETHER_CREAM_BREAD;\r\n    /*\r\n    火把花相关物品\r\n    */\r\n    public static final RegistryObject<Item> TORCHFLOWER_MUSTARD;\r\n    public static final RegistryObject<Item> HOT_HI_SOUP;\r\n    public static final RegistryObject<Item> INCANDESCENCE_SUSHI;\r\n    public static final RegistryObject<Item> TORCHFLOWER_CAKE;\r\n    public static final RegistryObject<Item> TORCHFLOWER_CURRY_RICE;\r\n    public static final RegistryObject<Item> EXTRA_SPICY_PASTA;\r\n    public static final RegistryObject<Item> TORCHFLOWER_COOKIE;\r\n\r\n\r\n    public static final RegistryObject<Item> PITCHER_PLANT_BARBECUE;\r\n    public static final RegistryObject<Item> POD_SHELL_BURGER_MEAT;\r\n    public static final RegistryObject<Item> POD_SHELL_BURGER_MEAT_CUBE;\r\n\r\n    public static final RegistryObject<Item> GOLDEN_FABRIC;\r\n    public static final RegistryObject<Item> GOLDEN_FABRIC_VEIL;\r\n    public static final RegistryObject<Item> RAW_SNIFFER_SLICE;\r\n    public static final RegistryObject<Item> COOKED_SNIFFER_SLICE;\r\n    public static final RegistryObject<Item> RAW_SNIFFER_STEAK;\r\n    public static final RegistryObject<Item> COOKED_SNIFFER_STEAK;\r\n    public static final RegistryObject<Item> SNIFFER_HIDE;\r\n    public static final RegistryObject<Item> CLEAR_WATER_VODKA;\r\n    public static final RegistryObject<Item> SNIFFER_ROTATING_ROAST_MEAT;\r\n    public static final RegistryObject<Item> VULCAN_COKTAIL;\r\n    public static final RegistryObject<Item> NETHER_KVASS;\r\n    public static final RegistryObject<Item> PURGATORY_ALE;\r\n    //public static final RegistryObject<Item> TEST_DAMAGE_ITEM;\r\n\r\n\r\n    static {\r\n\r\n        ENCHANTAL_COOLER = block(ImmortalersDelightBlocks.ENCHANTAL_COOLER);\r\n\r\n        ANCIENT_STOVE = block(ImmortalersDelightBlocks.ANCIENT_STOVE);\r\n\r\n        OXIDIZED_ANCIENT_STOVE = block(ImmortalersDelightBlocks.OXIDIZED_ANCIENT_STOVE);\r\n\r\n        EVOLUTCORN_GRAIN_BAG = registerWithTab(\"evolutcorn_grain_bag\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.EVOLUTCORN_GRAIN_BAG.get(), basicItem()));\r\n\r\n        HIMEKAIDO_CRATE = registerWithTab(\"himekaido_crate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_CRATE.get(), basicItem()));\r\n\r\n        PEARLIP_CRATE = registerWithTab(\"pearlip_crate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.PEARLIP_CRATE.get(), basicItem()));\r\n\r\n        EVOLUTCORN_BLOCK = registerWithTab(\"evolutcorn_block\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.EVOLUTCORN_BLOCK.get(), basicItem()));\r\n\r\n        HIMEKAIDO_LOG = registerWithTab(\"himekaido_log\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_LOG.get(), basicItem()));\r\n        HIMEKAIDO_WOOD = registerWithTab(\"himekaido_wood\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_WOOD.get(), basicItem()));\r\n\r\n        STRIPPED_HIMEKAIDO_WOOD = registerWithTab(\"stripped_himekaido_wood\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.STRIPPED_HIMEKAIDO_WOOD.get(), basicItem()));\r\n\r\n        STRIPPED_HIMEKAIDO_LOG = registerWithTab(\"stripped_himekaido_log\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.STRIPPED_HIMEKAIDO_LOG.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FRUITED_LEAVES = registerWithTab(\"himekaido_fruited_leaves\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FRUITED_LEAVES.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FLOWERING_LEAVES = registerWithTab(\"himekaido_flowering_leaves\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FLOWERING_LEAVES.get(), basicItem()));\r\n\r\n        HIMEKAIDO_LEAVES = registerWithTab(\"himekaido_leaves\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_LEAVES.get(), basicItem()));\r\n\r\n        HIMEKAIDO_PLANKS = registerWithTab(\"himekaido_planks\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_PLANKS.get(), basicItem()));\r\n        HIMEKAIDO_CABINET = registerWithTab(\"himekaido_cabinet\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_CABINET.get(), basicItem()));\r\n        HIMEKAIDO_STAIRS = registerWithTab(\"himekaido_stairs\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_STAIRS.get(), basicItem()));\r\n\r\n        HIMEKAIDO_SLAB = registerWithTab(\"himekaido_slab\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_SLAB.get(), basicItem()));\r\n\r\n        HIMEKAIDO_DOOR = registerWithTab(\"himekaido_door\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_DOOR.get(), basicItem()));\r\n\r\n        HIMEKAIDO_TRAPDOOR = registerWithTab(\"himekaido_trapdoor\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_TRAPDOOR.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FENCE = registerWithTab(\"himekaido_fence\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FENCE.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FENCE_GATE = registerWithTab(\"himekaido_fence_gate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FENCE_GATE.get(), basicItem()));\r\n\r\n        HIMEKAIDO_PRESSURE_PLATE = registerWithTab(\"himekaido_pressure_plate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_PRESSURE_PLATE.get(), basicItem()));\r\n\r\n        HIMEKAIDO_BUTTON = registerWithTab(\"himekaido_button\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_BUTTON.get(), basicItem()));\r\n        HIMEKAIDO_SIGN = registerWithTab(\"himekaido_sign\",() ->\r\n                new SignItem((new Item.Properties()).stacksTo(16),\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_SIGN.get(),\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_WALL_SIGN.get()\r\n                        ));\r\n        HIMEKAIDO_HANGING_SIGN = registerWithTab(\"himekaido_hanging_sign\",() ->\r\n                new HangingSignItem(\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_HANGING_SIGN.get(),\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_WALL_HANGING_SIGN.get(),\r\n                        (new Item.Properties()).stacksTo(16)\r\n                ));\r\n        HIMEKAIDO_BOAT = registerWithTab(\"himekaido_boat\",()->\r\n                new ImmortalersBoatItem(ImmortalersBoat.Type.HIMEKAIDO, basicItem().stacksTo(1)));\r\n\r\n        HIMEKAIDO_CHEST_BOAT = registerWithTab(\"himekaido_chest_boat\",()->\r\n                new ImmortalersChestBoatItem(ImmortalersChestBoat.Type.HIMEKAIDO, basicItem().stacksTo(1)));\r\n\r\n        LEISAMBOO_PLANKS = registerWithTab(\"leisamboo_planks\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_PLANKS.get(), basicItem()));\r\n\r\n        LEISAMBOO_STAIRS = registerWithTab(\"leisamboo_stairs\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_STAIRS.get(), basicItem()));\r\n\r\n        LEISAMBOO_SLAB = registerWithTab(\"leisamboo_slab\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_SLAB.get(), basicItem()));\r\n\r\n        LEISAMBOO_FENCE = registerWithTab(\"leisamboo_fence\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_FENCE.get(), basicItem()));\r\n\r\n        LEISAMBOO_FENCE_GATE = registerWithTab(\"leisamboo_fence_gate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_FENCE_GATE.get(), basicItem()));\r\n\r\n        LEISAMBOO_PRESSURE_PLATE = registerWithTab(\"leisamboo_pressure_plate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_PRESSURE_PLATE.get(), basicItem()));\r\n\r\n        LEISAMBOO_BUTTON = registerWithTab(\"leisamboo_button\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_BUTTON.get(), basicItem()));\r\n        LEISAMBOO_SIGN = registerWithTab(\"leisamboo_sign\",() ->\r\n                new SignItem((new Item.Properties()).stacksTo(16),\r\n                        ImmortalersDelightBlocks.LEISAMBOO_SIGN.get(),\r\n                        ImmortalersDelightBlocks.LEISAMBOO_WALL_SIGN.get()\r\n                ));\r\n        LEISAMBOO_HANGING_SIGN = registerWithTab(\"leisamboo_hanging_sign\",() ->\r\n                new HangingSignItem(\r\n                        ImmortalersDelightBlocks.LEISAMBOO_HANGING_SIGN.get(),\r\n                        ImmortalersDelightBlocks.LEISAMBOO_WALL_HANGING_SIGN.get(),\r\n                        (new Item.Properties()).stacksTo(16)\r\n                ));\r\n\r\n        /*\r\n        古木\r\n        */\r\n        ANCIENT_WOOD_LOG = block(ImmortalersDelightBlocks.ANCIENT_WOOD_LOG);\r\n        STRIPPED_ANCIENT_WOOD_LOG = block(ImmortalersDelightBlocks.STRIPPED_ANCIENT_WOOD_LOG);\r\n        ANCIENT_WOOD = block(ImmortalersDelightBlocks.ANCIENT_WOOD);\r\n        STRIPPED_ANCIENT_WOOD = block(ImmortalersDelightBlocks.STRIPPED_ANCIENT_WOOD);\r\n        ANCIENT_WOOD_PLANKS = block(ImmortalersDelightBlocks.ANCIENT_WOOD_PLANKS);\r\n        ANCIENT_WOOD_CABINET = block(ImmortalersDelightBlocks.ANCIENT_WOOD_CABINET);\r\n        ANCIENT_WOOD_SLAB = block(ImmortalersDelightBlocks.ANCIENT_WOOD_SLAB);\r\n        ANCIENT_WOOD_DOOR = block(ImmortalersDelightBlocks.ANCIENT_WOOD_DOOR);\r\n        ANCIENT_WOOD_TRAPDOOR = block(ImmortalersDelightBlocks.ANCIENT_WOOD_TRAPDOOR);\r\n        ANCIENT_WOOD_STAIRS = block(ImmortalersDelightBlocks.ANCIENT_WOOD_STAIRS);\r\n        ANCIENT_WOOD_FENCE = block(ImmortalersDelightBlocks.ANCIENT_WOOD_FENCE);\r\n        ANCIENT_WOOD_FENCE_GATE = block(ImmortalersDelightBlocks.ANCIENT_WOOD_FENCE_GATE);\r\n        ANCIENT_WOOD_PRESSURE_PLATE = block(ImmortalersDelightBlocks.ANCIENT_WOOD_PRESSURE_PLATE);\r\n        ANCIENT_WOOD_BUTTON = block(ImmortalersDelightBlocks.ANCIENT_WOOD_BUTTON);\r\n\r\n        ANCIENT_FIBER = registerWithTab(\"ancient_fiber\", () ->\r\n                new Item(basicItem()));\r\n        /*\r\n        材料类物品\r\n        */\r\n\r\n        EVOLUTCORN = registerWithTab(\"evolutcorn\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.EVOLUTCORN)));\r\n\r\n        ROAST_EVOLUTCORN = registerWithTab(\"roast_evolutcorn\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.ROAST_EVOLUTCORN)));\r\n\r\n        EVOLUTCORN_GRAINS = registerWithTab(\"evolutcorn_grains\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.EVOLUTCORN.get(), new Item.Properties().food(ImmortalersDelightFoodProperties.EVOLUTCORN_GRAINS)));\r\n\r\n        ROAST_EVOLUTCORN_CHOPS = registerWithTab(\"roast_evolutcorn_chops\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.ROAST_EVOLUTCORN_CHOPS)));\r\n\r\n        PEARLIP = registerWithTab(\"pearlip\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.PEARLIPEARL_BUNDLE.get(), new Item.Properties().food(ImmortalersDelightFoodProperties.PEARLIP)));\r\n\r\n        PEARLIPEARL = registerWithTab(\"pearlipearl\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.PEARLIPEARL_STALK.get(), new Item.Properties().food(ImmortalersDelightFoodProperties.PEARLIPEARL)));\r\n\r\n        PEARLIP_SHELL = registerWithTab(\"pearlip_shell\", () ->\r\n                new Item(basicItem()));\r\n\r\n        CONTAINS_TEA_LEISAMBOO = registerWithTab(\"contains_tea_leisamboo\",()->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.LEISAMBOO_CROP.get(),new Item.Properties()));\r\n\r\n        HIMEKAIDO_SEED = registerWithTab(\"himekaido_seed\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.HIMEKAIDO_SHRUB.get(), new Item.Properties()));\r\n\r\n        ROTTEN_FLESH_CUTS = registerWithTab(\"rotten_flesh_cuts\", () ->\r\n                new Item(new Item.Properties()));\r\n\r\n        PITCHER_POD_PETAL = registerWithTab(\"pitcher_pod_petal\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        KWAT_WHEAT_SEEDS =  registerWithTab(\"kwat_wheat_seeds\",()->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.KWAT_WHEAT.get(), new Item.Properties()));\r\n\r\n        KWAT_WHEAT = registerWithTab(\"kwat_wheat\", () ->\r\n                new GasToxicFoodItem(fantasticFoodItem(ImmortalersDelightFoodProperties.KWAT_WHEAT, Rarity.COMMON, false),true,false));\r\n\r\n        /*\r\n        玉米系列物品\r\n        */\r\n\r\n        CRETACEOUS_ZEA_BALL = registerWithTab(\"cretaceous_zea_ball\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.CRETACEOUS_ZEA_BALL), true));\r\n\r\n        COLORFUL_GRILLED_SKEWERS = registerWithTab(\"colorful_grilled_skewers\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.COLORFUL_GRILLED_SKEWERS)));\r\n\r\n        POPOLUTCORN = registerWithTab(\"popolutcorn\", () ->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.POPOLUTCORN), true));\r\n\r\n        ZEA_PANCAKE = registerWithTab(\"zea_pancake\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.ZEA_PANCAKE.get(), basicItem()));\r\n\r\n        ZEA_PANCAKE_SLICE = registerWithTab(\"zea_pancake_slice\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.ZEA_PANCAKE_SLICE)));\r\n\r\n        EVOLUTCORN_PIE_CRUST = registerWithTab(\"evolutcorn_pie_crust\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        PEARLIP_PIE = block(ImmortalersDelightBlocks.PEARLIP_PIE);\r\n\r\n        PEARLIP_PIE_SLICE = foodItem(\"pearlip_pie_slice\",ImmortalersDelightFoodProperties.PEARLIP_PIE_SLICE);\r\n\r\n        PEATIC_MUSA_SALAD = registerWithTab(\"peatic_musa_salad\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.PEATIC_MUSA_SALAD), true));\r\n\r\n        /*\r\n        香蕉系列物品\r\n        */\r\n\r\n        PEARLIP_MILK_SHAKE = registerWithTab(\"pearlip_milk_shake\", () ->\r\n                new DrinkableItem(new Item.Properties().craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).food(ImmortalersDelightFoodProperties.PEARLIP_MILK_SHAKE), true, false));\r\n\r\n        PEARLIP_PUMPKIN_PIE = registerWithTab(\"pearlip_pumpkin_pie\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.PEARLIP_PUMPKIN_PIE)));\r\n\r\n        PEARLIPEARL_EGGSTEAM = registerWithTab(\"pearlipearl_eggsteam\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.PEARLIPEARL_EGGSTEAM), true));\r\n\r\n        PEARLIP_JELLY = registerWithTab(\"pearlip_jelly\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.PEARLIP_JELLY), true));\r\n\r\n        PEARLIPEARL_TART = registerWithTab(\"pearlipearl_tart\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.PEARLIPEARL_TART)));\r\n\r\n        ICE_PEARLIP = foodItem(\"ice_pearlip\",ImmortalersDelightFoodProperties.ICE_PEARLIP);\r\n\r\n        CHOCOLATE_PEARLIP_STICKS = foodItem(\"chocolate_pearlip_sticks\",ImmortalersDelightFoodProperties.CHOCOLATE_PEARLIP_STICKS);\r\n        /*\r\n         溪竹相关物品\r\n        */\r\n        LEAF_TEA = registerWithTab(\"leaf_tea\",()->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.LEAF_TEA),true, false));\r\n\r\n        EMPTY_BAMBOO_CUP = registerWithTab(\"empty_bamboo_cup\", () ->\r\n                new Item(new Item.Properties().stacksTo(16)));\r\n\r\n        LEISAMBOO_TEA = registerWithTab(\"leisamboo_tea\", () ->\r\n                new DrinkableItem(leisambooDrinksItem(ImmortalersDelightFoodProperties.LEISAMBOO_TEA),true, false));\r\n\r\n        ICED_BLACK_TEA = registerWithTab(\"iced_black_tea\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.ICED_BLACK_TEA),true, false));\r\n\r\n        PEARLIPEARL_MILK_TEA = registerWithTab(\"pearlipearl_milk_tea\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.PEARLIPEARL_MILK_TEA),true, false));\r\n\r\n        PEARLIPEARL_MILK_GREEN = registerWithTab(\"pearlipearl_milk_green\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.PEARLIPEARL_MILK_GREEN),true, false));\r\n\r\n        STOVE_BLACK_TEA = registerWithTab(\"stove_black_tea\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.STOVE_BLACK_TEA),true, false));\r\n\r\n        LEAF_GREEN_TEA = registerWithTab(\"leaf_green_tea\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.LEAF_GREEN_TEA),true, false));\r\n\r\n        BRITISH_YELLOW_TEA = registerWithTab(\"british_yellow_tea\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.BRITISH_YELLOW_TEA),true, false));\r\n\r\n        MILLENIAN_BAMBOO = registerWithTab(\"millenian_bamboo\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.MILLENIAN_BAMBOO.get(), basicItem()));\r\n\r\n        BOWL_OF_MILLENIAN_BAMBOO = registerWithTab(\"bowl_of_millenian_bamboo\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.BOWL_OF_MILLENIAN_BAMBOO),true, false));\r\n\r\n        LEISAMBOO_TEA_CAKE = registerWithTab(\"leisamboo_tea_cake\",()->\r\n                new Item(new Item.Properties()));\r\n        /*\r\n        姬海棠系列物品\r\n         */\r\n\r\n        MASHED_POTATOES = foodItem(\"mashed_potatoes\",ImmortalersDelightFoodProperties.MASHED_POTATOES);\r\n\r\n        MASHED_POISONOUS_POTATO = registerWithTab(\"mashed_poisonous_potato\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.MASHED_POISONOUS_POTATO)));\r\n\r\n        MASHED_POTATO_WITH_JAM = registerWithTab(\"mashed_potato_with_jam\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.MASHED_POTATO_WITH_JAM).craftRemainder(Items.BOWL),true));\r\n\r\n        MASHED_POISONOUS_POTATO_WITH_JAM = registerWithTab(\"mashed_poisonous_potato_with_jam\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.MASHED_POISONOUS_POTATO_WITH_JAM).craftRemainder(Items.BOWL),true));\r\n\r\n        HIMEKAIDO_YOGURT_PIE = block(ImmortalersDelightBlocks.HIMEKAIDO_YOGURT_PIE);\r\n\r\n        HIMEKAIDO_YOGURT_PIE_SLICE = foodItem(\"himekaido_yogurt_pie_slice\",ImmortalersDelightFoodProperties.HIMEKAIDO_YOGURT_PIE_SLICE);\r\n\r\n        HIMEKAIDO = registerWithTab(\"himekaido\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.HIMEKAIDO, Rarity.COMMON, false), true));\r\n\r\n        GOLDEN_HIMEKAIDO = registerWithTab(\"golden_himekaido\", () ->\r\n                new GoldenHimkaidoFoodItem(fantasticFoodItem(ImmortalersDelightFoodProperties.GOLDEN_HIMEKAIDO, Rarity.RARE, false),true, true,false));\r\n\r\n        ENCHANTED_GOLDEN_HIMEKAIDO = registerWithTab(\"enchanted_golden_himekaido\", () ->\r\n                new EnchantedGoldenHimekaidoFoodItem((new Item.Properties()).rarity(Rarity.EPIC).food(ImmortalersDelightFoodProperties.ENCHANTED_GOLDEN_HIMEKAIDO),true,true,true,3,1.0));\r\n\r\n        HIMEKAIDO_JELLY = registerWithTab(\"himekaido_jelly\", () ->\r\n                new DrinkableItem(new Item.Properties().craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).food(ImmortalersDelightFoodProperties.HIMEKAIDO_JELLY), true, false));\r\n\r\n        YOGURT = registerWithTab(\"yogurt\", () ->\r\n                new DrinkableItem(new Item.Properties().craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).food(ImmortalersDelightFoodProperties.YOGURT), true, false));\r\n\r\n        STUFFED_POISONOUS_POTATO = registerWithTab(\"stuffed_poisonous_potato\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.STUFFED_POISONOUS_POTATO, Rarity.COMMON, false), true));\r\n\r\n        BAKED_POISONOUS_POTATO = registerWithTab(\"baked_poisonous_potato\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.BAKED_POISONOUS_POTATO, Rarity.COMMON, false), true));\r\n\r\n        BRAISED_SPIDER_EYES_BLOCK = registerWithTab(\"braised_spider_eyes_block\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.BRAISED_SPIDER_EYES_BLOCK.get(), basicItem()));\r\n\r\n        BRAISED_SPIDER_EYES_IN_GRAVY = registerWithTab(\"braised_spider_eyes_in_gravy\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.BRAISED_SPIDER_EYES_IN_GRAVY), true));\r\n\r\n\r\n        TARTARE_CHICKEN = registerWithTab(\"tartare_chicken\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.TARTARE_CHICKEN), true));\r\n\r\n\r\n        DIPPED_ROTTEN_FLESH = registerWithTab(\"dipped_rotten_flesh\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.DIPPED_ROTTEN_FLESH, Rarity.COMMON, false), true));\r\n\r\n        CRISPY_YOGURT_ROTTEN_FLESH = registerWithTab(\"crispy_yogurt_rotten_flesh\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.CRISPY_YOGURT_ROTTEN_FLESH), true));\r\n\r\n        MEATY_ROTTEN_TOMATO_BROTH = registerWithTab(\"meaty_rotten_tomato_broth\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.MEATY_ROTTEN_TOMATO_BROTH), true));\r\n\r\n        PUFFERFISH_ROLL = registerWithTab(\"pufferfish_roll\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.PUFFERFISH_ROLL, Rarity.COMMON, false), true));\r\n\r\n        STEWED_ROTTEN_MEAT_POT = registerWithTab(\"stewed_rotten_meat_pot\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.STEWED_ROTTEN_MEAT_POT.get(), basicItem()));\r\n\r\n        BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT = registerWithTab(\"bowl_of_stewed_rotten_meat_in_clay_pot\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT), true));\r\n        /*\r\n        瓦斯麦相关物品\r\n        */\r\n\r\n        KWAT_WHEAT_DOUGH = registerWithTab(\"kwat_wheat_dough\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        KWAT_WHEAT_PASTE = registerWithTab(\"kwat_wheat_paste\",()->\r\n                new Item(new Item.Properties().stacksTo(16).craftRemainder(Items.GLASS_BOTTLE)));\r\n\r\n        KWAT_WHEAT_TOAST = foodItem(\"kwat_wheat_toast\",ImmortalersDelightFoodProperties.KWAT_WHEAT_TOAST);\r\n\r\n        KWAT_WHEAT_TOAST_SLICE = foodItem(\"kwat_wheat_toast_slice\",ImmortalersDelightFoodProperties.KWAT_WHEAT_TOAST_SLICE);\r\n\r\n        NETHER_BREAD_CREAM_SOUP = block(ImmortalersDelightBlocks.NETHER_BREAD_CREAM_SOUP);\r\n\r\n        NETHER_CREAM_SOUP = registerWithTab(\"nether_cream_soup\",() ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.NETHER_CREAM_SOUP),true,false));\r\n\r\n        NETHER_CREAM_BREAD = registerWithTab(\"nether_cream_bread\",() ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.NETHER_CREAM_BREAD),true,false));\r\n\r\n        KWAT_WHEAT_DOUFU = foodItem(\"kwat_wheat_doufu\",ImmortalersDelightFoodProperties.KWAT_WHEAT_DOUFU);\r\n\r\n        FRY_KWAT_WHEAT_DOUFU = registerWithTab(\"fry_kwat_wheat_doufu\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.FRY_KWAT_WHEAT_DOUFU),true,false));\r\n\r\n        SUTFFED_KWAT_WHEAT_DOUFU = registerWithTab(\"sutffed_kwat_wheat_doufu\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.SUTFFED_DOUFU),true));\r\n\r\n        JADE_AND_RUBY_SOUP = registerWithTab(\"jade_and_ruby_soup\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.JADE_AND_RUBY_SOUP),true));\r\n\r\n        GOLDEN_FABRIC = register(\"golden_fabric\", () ->\r\n                new ConsumableItem(fantasticItem(Rarity.RARE),false,true));\r\n\r\n        GOLDEN_FABRIC_VEIL = registerWithTab(\"golden_fabric_veil\", () ->\r\n                new GoldenFabricArmor(ImmortalersArmorMaterials.GOLDEN_FABRIC,ArmorItem.Type.HELMET,fantasticItem(Rarity.RARE)));\r\n\r\n        RAW_SNIFFER_SLICE = REGISTER.register(\"raw_sniffer_slice\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.RAW_SNIFFER_SLICE, Rarity.COMMON, false), true));\r\n\r\n        COOKED_SNIFFER_SLICE = REGISTER.register(\"cooked_sniffer_slice\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.COOKED_SNIFFER_SLICE, Rarity.COMMON, false), true));\r\n\r\n        RAW_SNIFFER_STEAK = REGISTER.register(\"raw_sniffer_steak\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.RAW_SNIFFER_STEAK, Rarity.COMMON, false), true));\r\n\r\n        COOKED_SNIFFER_STEAK = REGISTER.register(\"cooked_sniffer_steak\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.COOKED_SNIFFER_STEAK, Rarity.COMMON, false), true));\r\n\r\n        SNIFFER_ROTATING_ROAST_MEAT = REGISTER.register(\"sniffer_rotating_roast_meat\",()->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.SNIFFER_ROTATING_ROAST_MEAT.get(), new Item.Properties()));\r\n\r\n        SNIFFER_HIDE = REGISTER.register(\"sniffer_hide\", () ->\r\n                new ConsumableItem(fantasticItem(Rarity.COMMON)));\r\n\r\n        /*\r\n        火把花相关物品\r\n        */\r\n\r\n        TORCHFLOWER_MUSTARD = registerWithTab(\"torchflower_mustard\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        TORCHFLOWER_COOKIE = foodItem(\"torchflower_cookie\",ImmortalersDelightFoodProperties.TORCHFLOWER_COOKIE,true);\r\n\r\n        TORCHFLOWER_CAKE = foodItem(\"torchflower_cake\",ImmortalersDelightFoodProperties.TORCHFLOWER_CAKE,true);\r\n\r\n        TORCHFLOWER_CURRY_RICE = registerWithTab(\"torchflower_curry_rice\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.TORCHFLOWER_CURRY_RICE),true));\r\n\r\n        EXTRA_SPICY_PASTA = registerWithTab(\"extra_spicy_pasta\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.EXTRA_SPICY_PASTA),true));\r\n\r\n        HOT_HI_SOUP = registerWithTab(\"hot_hi_soup\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.HOT_HI_SOUP),true));\r\n\r\n        INCANDESCENCE_SUSHI = foodItem(\"incandescence_sushi\",ImmortalersDelightFoodProperties.INCANDESCENCE_SUSHI,true);\r\n\r\n        /*火把花相关物品*/\r\n        TORCHFLOWER_MUSTARD = registerWithTab(\"torchflower_mustard\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        TORCHFLOWER_COOKIE = foodItem(\"torchflower_cookie\",ImmortalersDelightFoodProperties.TORCHFLOWER_COOKIE,true);\r\n\r\n        TORCHFLOWER_CAKE = foodItem(\"torchflower_cake\",ImmortalersDelightFoodProperties.TORCHFLOWER_CAKE,true);\r\n\r\n        TORCHFLOWER_CURRY_RICE = registerWithTab(\"torchflower_curry_rice\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.TORCHFLOWER_CURRY_RICE),true));\r\n\r\n        EXTRA_SPICY_PASTA = registerWithTab(\"extra_spicy_pasta\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.EXTRA_SPICY_PASTA),true));\r\n\r\n        HOT_HI_SOUP = registerWithTab(\"hot_hi_soup\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.HOT_HI_SOUP),true));\r\n\r\n        INCANDESCENCE_SUSHI = foodItem(\"incandescence_sushi\",ImmortalersDelightFoodProperties.INCANDESCENCE_SUSHI,true);\r\n\r\n        PITCHER_PLANT_BARBECUE = registerWithTab(\"pitcher_plant_barbecue\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.PITCHER_PLANT_BARBECUE),true));\r\n\r\n        POD_SHELL_BURGER_MEAT = block(ImmortalersDelightBlocks.POD_SHELL_BURGER_MEAT);\r\n        POD_SHELL_BURGER_MEAT_CUBE = registerWithTab(\"pod_shell_burger_meat_cube\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.POD_SHELL_BURGER_MEAT_CUBE),true));\r\n\r\n\r\n        //酒品\r\n        DREUMK_WINE = registerWithTab(\"dreumk_wine\",()->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.DREUMK_WINE),true,false));\r\n\r\n        EVOLUTCORN_BEER = registerWithTab(\"evolutcorn_beer\",()->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.EVOLUTCORN_BEER), true, false));\r\n\r\n        VULCAN_COKTAIL = registerWithTab(\"vulcan_coktail\",()->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.VULCAN_COKTAIL),true,false));\r\n\r\n        CLEAR_WATER_VODKA = registerWithTab(\"clear_water_vodka\", () ->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.CLEAR_WATER_VODKA),true,false,false,true));\r\n\r\n        NETHER_KVASS = registerWithTab(\"nether_kvass\", () ->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.NETHER_KVASS),true,false,false,true));\r\n\r\n        PURGATORY_ALE = registerWithTab(\"purgatory_ale\",()->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.PURGATORY_ALE),true,false,false,true));\r\n\r\n    }\r\n\r\n    public static RegistryObject<Item> registerWithTab(String name, Supplier<Item> supplier) {\r\n        RegistryObject<Item> item = REGISTER.register(name, supplier);\r\n        CREATIVE_TAB_ITEMS.add(item);\r\n        return item;\r\n    }\r\n\r\n    public static RegistryObject<Item> register(String name, Supplier<Item> supplier) {\r\n        return REGISTER.register(name, supplier);\r\n    }\r\n\r\n    public static Item.Properties basicItem() {\r\n        return new Item.Properties();\r\n    }\r\n\r\n    public static Item.Properties foodItem(FoodProperties food) {\r\n        return (new Item.Properties()).food(food);\r\n    }\r\n\r\n    public static RegistryObject<Item> foodItem(String name,FoodProperties food) {\r\n        return registerWithTab(name,()->new Item(new Item.Properties().food(food)));\r\n    }\r\n\r\n    public static RegistryObject<Item> foodItem(String name,FoodProperties food,boolean hasFoodEffectTooltip) {\r\n        return registerWithTab(name,()->new ConsumableItem(new Item.Properties().food(food),hasFoodEffectTooltip));\r\n    }\r\n\r\n    public static Item.Properties bowlFoodItem(FoodProperties food) {\r\n        return (new Item.Properties()).food(food).craftRemainder(Items.BOWL).stacksTo(16);\r\n    }\r\n\r\n    public static Item.Properties drinkItem() {\r\n        return (new Item.Properties()).craftRemainder(Items.GLASS_BOTTLE).stacksTo(16);\r\n    }\r\n\r\n    public static Item.Properties drinkItem(FoodProperties foodProperties) {\r\n        return (new Item.Properties()).craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).food(foodProperties);\r\n    }\r\n\r\n    public static Item.Properties leisambooDrinksItem() {\r\n        return (new Item.Properties()).craftRemainder(EMPTY_BAMBOO_CUP.get()).stacksTo(16);\r\n    }\r\n\r\n    public static Item.Properties leisambooDrinksItem(FoodProperties foodProperties) {\r\n        return (new Item.Properties()).craftRemainder(EMPTY_BAMBOO_CUP.get()).stacksTo(16).food(foodProperties);\r\n    }\r\n    private static Item.Properties fantasticItem(Rarity soCool) {\r\n        return (new Item.Properties()).rarity(soCool);\r\n    }\r\n\r\n\r\n    private static Item.Properties fantasticFoodItem(FoodProperties foodProperties, Rarity soCool, boolean isBowl) {\r\n        if (isBowl) {\r\n            return new Item.Properties().rarity(soCool).food(foodProperties).craftRemainder(Items.BOWL).stacksTo(16);\r\n        }\r\n        return (new Item.Properties().rarity(soCool).food(foodProperties));\r\n    }\r\n\r\n    private static RegistryObject<Item> block(RegistryObject<Block> block) {\r\n        return registerWithTab(block.getId().getPath(), () -> new BlockItem(block.get(), new Item.Properties()));\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java
--- a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java	(revision bd6cbccc7842f3760016996ac5fc52a999a67365)
+++ b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java	(date 1745937211101)
@@ -200,7 +200,14 @@
     public static final RegistryObject<Item> VULCAN_COKTAIL;
     public static final RegistryObject<Item> NETHER_KVASS;
     public static final RegistryObject<Item> PURGATORY_ALE;
+    //public static final RegistryObject<Item> ELIXIR_OF_IMMORTALITY;
+    //public static final RegistryObject<Item> PALE_DEW_WINE;
     //public static final RegistryObject<Item> TEST_DAMAGE_ITEM;
+    public static final RegistryObject<Item> SCARLET_DEVILS_CAKE;
+    public static final RegistryObject<Item> SCARLET_DEVILS_CAKE_SLICE;
+    public static final RegistryObject<Item> RED_STUFFED_BUN;
+    //public static final RegistryObject<Item> SPICY_PUDDING;
+
 
 
     static {
@@ -572,6 +579,18 @@
         JADE_AND_RUBY_SOUP = registerWithTab("jade_and_ruby_soup",()->
                 new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.JADE_AND_RUBY_SOUP),true));
 
+        SCARLET_DEVILS_CAKE = registerWithTab("scarlet_devils_cake", () ->
+                new BlockItem(ImmortalersDelightBlocks.SCARLET_DEVILS_CAKE.get(), basicItem()));
+
+        SCARLET_DEVILS_CAKE_SLICE = registerWithTab("scarlet_devils_cake_slice",()->
+                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.SCARLET_DEVILS_CAKE_SLICE),true,false));
+
+        RED_STUFFED_BUN = registerWithTab("red_stuffed_bun",()->
+                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.RED_STUFFED_BUN),true,false));
+
+//        SPICY_PUDDING = registerWithTab("spicy_pudding",()->
+//                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.SPICY_PUDDING),true,false));
+
         GOLDEN_FABRIC = register("golden_fabric", () ->
                 new ConsumableItem(fantasticItem(Rarity.RARE),false,true));
 
@@ -617,26 +636,6 @@
                 new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.HOT_HI_SOUP),true));
 
         INCANDESCENCE_SUSHI = foodItem("incandescence_sushi",ImmortalersDelightFoodProperties.INCANDESCENCE_SUSHI,true);
-
-        /*火把花相关物品*/
-        TORCHFLOWER_MUSTARD = registerWithTab("torchflower_mustard",()->
-                new Item(new Item.Properties()));
-
-        TORCHFLOWER_COOKIE = foodItem("torchflower_cookie",ImmortalersDelightFoodProperties.TORCHFLOWER_COOKIE,true);
-
-        TORCHFLOWER_CAKE = foodItem("torchflower_cake",ImmortalersDelightFoodProperties.TORCHFLOWER_CAKE,true);
-
-        TORCHFLOWER_CURRY_RICE = registerWithTab("torchflower_curry_rice",()->
-                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.TORCHFLOWER_CURRY_RICE),true));
-
-        EXTRA_SPICY_PASTA = registerWithTab("extra_spicy_pasta",()->
-                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.EXTRA_SPICY_PASTA),true));
-
-        HOT_HI_SOUP = registerWithTab("hot_hi_soup",()->
-                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.HOT_HI_SOUP),true));
-
-        INCANDESCENCE_SUSHI = foodItem("incandescence_sushi",ImmortalersDelightFoodProperties.INCANDESCENCE_SUSHI,true);
-
         PITCHER_PLANT_BARBECUE = registerWithTab("pitcher_plant_barbecue",()->
                 new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.PITCHER_PLANT_BARBECUE),true));
 
@@ -664,6 +663,9 @@
         PURGATORY_ALE = registerWithTab("purgatory_ale",()->
                 new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.PURGATORY_ALE),true,false,false,true));
 
+//        PALE_DEW_WINE = registerWithTab("pale_dew_wine",()->
+//                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.PALE_DEW_WINE),true,false));
+
     }
 
     public static RegistryObject<Item> registerWithTab(String name, Supplier<Item> supplier) {
