Index: src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.init;\r\n\r\nimport com.google.common.collect.Sets;\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport com.renyigesai.immortalers_delight.entities.ImmortalersBoat;\r\nimport com.renyigesai.immortalers_delight.entities.ImmortalersChestBoat;\r\nimport com.renyigesai.immortalers_delight.item.*;\r\nimport com.renyigesai.immortalers_delight.util.datautil.worlddata.BaseImmortalWorldData;\r\nimport net.minecraft.world.food.FoodProperties;\r\nimport net.minecraft.world.item.*;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.minecraftforge.registries.DeferredRegister;\r\nimport net.minecraftforge.registries.ForgeRegistries;\r\nimport net.minecraftforge.registries.RegistryObject;\r\nimport vectorwing.farmersdelight.common.item.ConsumableItem;\r\nimport vectorwing.farmersdelight.common.item.DrinkableItem;\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.function.Supplier;\r\n\r\n\r\npublic class ImmortalersDelightItems {\r\n\r\n\r\n    public static final DeferredRegister<Item> REGISTER = DeferredRegister.create(ForgeRegistries.ITEMS, ImmortalersDelightMod.MODID);\r\n    public static LinkedHashSet<RegistryObject<Item>> CREATIVE_TAB_ITEMS = Sets.newLinkedHashSet();\r\n    public static final RegistryObject<Item> HIMEKAIDO_LOG;\r\n    public static final RegistryObject<Item> HIMEKAIDO_WOOD;\r\n    public static final RegistryObject<Item> STRIPPED_HIMEKAIDO_WOOD;\r\n    public static final RegistryObject<Item> STRIPPED_HIMEKAIDO_LOG;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FRUITED_LEAVES;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FLOWERING_LEAVES;\r\n    public static final RegistryObject<Item> HIMEKAIDO_LEAVES;\r\n    public static final RegistryObject<Item> HIMEKAIDO_PLANKS;\r\n    public static final RegistryObject<Item> HIMEKAIDO_STAIRS;\r\n    public static final RegistryObject<Item> HIMEKAIDO_SLAB;\r\n    public static final RegistryObject<Item> HIMEKAIDO_DOOR;\r\n    public static final RegistryObject<Item> HIMEKAIDO_TRAPDOOR;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FENCE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FENCE_GATE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_PRESSURE_PLATE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_BUTTON;\r\n    public static final RegistryObject<Item> HIMEKAIDO_CABINET;\r\n    public static final RegistryObject<Item> HIMEKAIDO_BOAT;\r\n    public static final RegistryObject<Item> HIMEKAIDO_CHEST_BOAT;\r\n    public static final RegistryObject<Item> MILLENIAN_BAMBOO;\r\n    public static final RegistryObject<Item> STEWED_ROTTEN_MEAT_POT;\r\n    public static final RegistryObject<Item> BRAISED_SPIDER_EYES_BLOCK;\r\n    public static final RegistryObject<Item> EVOLUTCORN_GRAIN_BAG;\r\n    public static final RegistryObject<Item> HIMEKAIDO_CRATE;\r\n    public static final RegistryObject<Item> PEARLIP_CRATE;\r\n    public static final RegistryObject<Item> EVOLUTCORN_BLOCK;\r\n    public static final RegistryObject<Item> HIMEKAIDO_SIGN;\r\n    public static final RegistryObject<Item> HIMEKAIDO_HANGING_SIGN;\r\n    public static final RegistryObject<Item> LEISAMBOO_PLANKS;\r\n    public static final RegistryObject<Item> LEISAMBOO_STAIRS;\r\n    public static final RegistryObject<Item> LEISAMBOO_SLAB;\r\n    public static final RegistryObject<Item> LEISAMBOO_FENCE;\r\n    public static final RegistryObject<Item> LEISAMBOO_FENCE_GATE;\r\n    public static final RegistryObject<Item> LEISAMBOO_PRESSURE_PLATE;\r\n    public static final RegistryObject<Item> LEISAMBOO_BUTTON;\r\n    public static final RegistryObject<Item> ANCIENT_FIBER;\r\n    public static final RegistryObject<Item> BOWL_OF_MILLENIAN_BAMBOO;\r\n    public static final RegistryObject<Item> PITCHER_POD_PETAL;\r\n    /*\r\n    玉米系列物品\r\n    */\r\n    public static final RegistryObject<Item> EVOLUTCORN;\r\n    public static final RegistryObject<Item> ROAST_EVOLUTCORN;\r\n    public static final RegistryObject<Item> EVOLUTCORN_GRAINS;\r\n    public static final RegistryObject<Item> ROAST_EVOLUTCORN_CHOPS;\r\n    public static final RegistryObject<Item> POPOLUTCORN;\r\n    public static final RegistryObject<Item> CRETACEOUS_ZEA_BALL;\r\n    public static final RegistryObject<Item> COLORFUL_GRILLED_SKEWERS;\r\n    public static final RegistryObject<Item> ZEA_PANCAKE;\r\n    public static final RegistryObject<Item> ZEA_PANCAKE_SLICE;\r\n    public static final RegistryObject<Item> EVOLUTCORN_PIE_CRUST;\r\n    public static final RegistryObject<Item> EVOLUTCORN_BEER;\r\n    /*\r\n    香蕉系列物品\r\n    */\r\n    public static final RegistryObject<Item> PEARLIP;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL;\r\n    public static final RegistryObject<Item> PEARLIPEARL;\r\n    public static final RegistryObject<Item> PEATIC_MUSA_SALAD;\r\n    public static final RegistryObject<Item> PEARLIP_MILK_SHAKE;\r\n    public static final RegistryObject<Item> PEARLIP_PUMPKIN_PIE;\r\n    public static final RegistryObject<Item> PEARLIPEARL_TART;\r\n    public static final RegistryObject<Item> PEARLIPEARL_EGGSTEAM;\r\n    public static final RegistryObject<Item> PEARLIP_JELLY;\r\n    public static final RegistryObject<Item> PEARLIP_PIE;\r\n    public static final RegistryObject<Item> PEARLIP_PIE_SLICE;\r\n    /*\r\n    姬海棠系列物品\r\n     */\r\n    public static final RegistryObject<Item> ROTTEN_FLESH_CUTS;\r\n    public static final RegistryObject<Item> HIMEKAIDO_JELLY;\r\n    public static final RegistryObject<Item> YOGURT;\r\n    public static final RegistryObject<Item> HIMEKAIDO;\r\n    public static final RegistryObject<Item> BAKED_POISONOUS_POTATO;\r\n    public static final RegistryObject<Item> BRAISED_SPIDER_EYES_IN_GRAVY;\r\n    public static final RegistryObject<Item> DIPPED_ROTTEN_FLESH;\r\n    public static final RegistryObject<Item> CRISPY_YOGURT_ROTTEN_FLESH;\r\n    public static final RegistryObject<Item> MEATY_ROTTEN_TOMATO_BROTH;\r\n    public static final RegistryObject<Item> STUFFED_POISONOUS_POTATO;\r\n    public static final RegistryObject<Item> PUFFERFISH_ROLL;\r\n    public static final RegistryObject<Item> GOLDEN_HIMEKAIDO;\r\n    public static final RegistryObject<Item> ENCHANTED_GOLDEN_HIMEKAIDO;\r\n    public static final RegistryObject<Item> HIMEKAIDO_SEED;\r\n    public static final RegistryObject<Item> BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT;\r\n    public static final RegistryObject<Item> TARTARE_CHICKEN;\r\n    public static final RegistryObject<Item> ENCHANTAL_COOLER;\r\n    public static final RegistryObject<Item> HIMEKAIDO_YOGURT_PIE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_YOGURT_PIE_SLICE;\r\n    public static final RegistryObject<Item> DREUMK_WINE;\r\n    /*\r\n     溪竹相关物品\r\n     */\r\n    public static final RegistryObject<Item> LEAF_TEA;\r\n    public static final RegistryObject<Item> CONTAINS_TEA_LEISAMBOO;\r\n    public static final RegistryObject<Item> EMPTY_BAMBOO_CUP;\r\n    public static final RegistryObject<Item> LEISAMBOO_TEA;\r\n    public static final RegistryObject<Item> ICED_BLACK_TEA;\r\n    public static final RegistryObject<Item> PEARLIPEARL_MILK_TEA;\r\n    public static final RegistryObject<Item> PEARLIPEARL_MILK_GREEN;\r\n    public static final RegistryObject<Item> STOVE_BLACK_TEA;\r\n    public static final RegistryObject<Item> LEAF_GREEN_TEA;\r\n    public static final RegistryObject<Item> BRITISH_YELLOW_TEA;\r\n    /*\r\n    瓦斯麦相关物品\r\n    */\r\n    public static final RegistryObject<Item> KWAT_WHEAT_SEEDS;\r\n    public static final RegistryObject<Item> KWAT_WHEAT;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_DOUGH;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_PASTE;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_DOUFU;\r\n    public static final RegistryObject<Item> FRY_KWAT_WHEAT_DOUFU;\r\n    public static final RegistryObject<Item> JADE_AND_RUBY_SOUP;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_TOAST;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_TOAST_SLICE;\r\n    public static final RegistryObject<Item> NETHER_BREAD_CREAM_SOUP;\r\n    public static final RegistryObject<Item> NETHER_CREAM_SOUP;\r\n    public static final RegistryObject<Item> NETHER_CREAM_BREAD;\r\n    /*\r\n    火把花相关物品\r\n    */\r\n    public static final RegistryObject<Item> TORCHFLOWER_MUSTARD;\r\n    public static final RegistryObject<Item> HOT_HI_SOUP;\r\n    public static final RegistryObject<Item> INCANDESCENCE_SUSHI;\r\n    public static final RegistryObject<Item> TORCHFLOWER_CAKE;\r\n    public static final RegistryObject<Item> TORCHFLOWER_CURRY_RICE;\r\n    public static final RegistryObject<Item> EXTRA_SPICY_PASTA;\r\n    public static final RegistryObject<Item> TORCHFLOWER_COOKIE;\r\n\r\n    public static final RegistryObject<Item> GOLDEN_FABRIC;\r\n    public static final RegistryObject<Item> GOLDEN_FABRIC_VEIL;\r\n    public static final RegistryObject<Item> RAW_SNIFFER_SLICE;\r\n    public static final RegistryObject<Item> COOKED_SNIFFER_SLICE;\r\n    public static final RegistryObject<Item> RAW_SNIFFER_STEAK;\r\n    public static final RegistryObject<Item> COOKED_SNIFFER_STEAK;\r\n    public static final RegistryObject<Item> SNIFFER_HIDE;\r\n    public static final RegistryObject<Item> CLEAR_WATER_VODKA;\r\n    public static final RegistryObject<Item> SNIFFER_ROTATING_ROAST_MEAT;\r\n    public static final RegistryObject<Item> VULCAN_COKTAIL;\r\n    //public static final RegistryObject<Item> TEST_DAMAGE_ITEM;\r\n\r\n\r\n    static {\r\n\r\n        ENCHANTAL_COOLER = block(ImmortalersDelightBlocks.ENCHANTAL_COOLER);\r\n\r\n        EVOLUTCORN_GRAIN_BAG = registerWithTab(\"evolutcorn_grain_bag\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.EVOLUTCORN_GRAIN_BAG.get(), basicItem()));\r\n\r\n        HIMEKAIDO_CRATE = registerWithTab(\"himekaido_crate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_CRATE.get(), basicItem()));\r\n\r\n        PEARLIP_CRATE = registerWithTab(\"pearlip_crate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.PEARLIP_CRATE.get(), basicItem()));\r\n\r\n        EVOLUTCORN_BLOCK = registerWithTab(\"evolutcorn_block\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.EVOLUTCORN_BLOCK.get(), basicItem()));\r\n\r\n        HIMEKAIDO_LOG = registerWithTab(\"himekaido_log\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_LOG.get(), basicItem()));\r\n        HIMEKAIDO_WOOD = registerWithTab(\"himekaido_wood\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_WOOD.get(), basicItem()));\r\n\r\n        STRIPPED_HIMEKAIDO_WOOD = registerWithTab(\"stripped_himekaido_wood\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.STRIPPED_HIMEKAIDO_WOOD.get(), basicItem()));\r\n\r\n        STRIPPED_HIMEKAIDO_LOG = registerWithTab(\"stripped_himekaido_log\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.STRIPPED_HIMEKAIDO_LOG.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FRUITED_LEAVES = registerWithTab(\"himekaido_fruited_leaves\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FRUITED_LEAVES.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FLOWERING_LEAVES = registerWithTab(\"himekaido_flowering_leaves\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FLOWERING_LEAVES.get(), basicItem()));\r\n\r\n        HIMEKAIDO_LEAVES = registerWithTab(\"himekaido_leaves\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_LEAVES.get(), basicItem()));\r\n\r\n        HIMEKAIDO_PLANKS = registerWithTab(\"himekaido_planks\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_PLANKS.get(), basicItem()));\r\n        HIMEKAIDO_CABINET = registerWithTab(\"himekaido_cabinet\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_CABINET.get(), basicItem()));\r\n        HIMEKAIDO_STAIRS = registerWithTab(\"himekaido_stairs\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_STAIRS.get(), basicItem()));\r\n\r\n        HIMEKAIDO_SLAB = registerWithTab(\"himekaido_slab\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_SLAB.get(), basicItem()));\r\n\r\n        HIMEKAIDO_DOOR = registerWithTab(\"himekaido_door\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_DOOR.get(), basicItem()));\r\n\r\n        HIMEKAIDO_TRAPDOOR = registerWithTab(\"himekaido_trapdoor\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_TRAPDOOR.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FENCE = registerWithTab(\"himekaido_fence\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FENCE.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FENCE_GATE = registerWithTab(\"himekaido_fence_gate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FENCE_GATE.get(), basicItem()));\r\n\r\n        HIMEKAIDO_PRESSURE_PLATE = registerWithTab(\"himekaido_pressure_plate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_PRESSURE_PLATE.get(), basicItem()));\r\n\r\n        HIMEKAIDO_BUTTON = registerWithTab(\"himekaido_button\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_BUTTON.get(), basicItem()));\r\n        HIMEKAIDO_SIGN = registerWithTab(\"himekaido_sign\",() ->\r\n                new SignItem((new Item.Properties()).stacksTo(16),\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_SIGN.get(),\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_WALL_SIGN.get()\r\n                        ));\r\n        HIMEKAIDO_HANGING_SIGN = registerWithTab(\"himekaido_hanging_sign\",() ->\r\n                new HangingSignItem(\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_HANGING_SIGN.get(),\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_WALL_HANGING_SIGN.get(),\r\n                        (new Item.Properties()).stacksTo(16)\r\n                ));\r\n        HIMEKAIDO_BOAT = registerWithTab(\"himekaido_boat\",()->\r\n                new ImmortalersBoatItem(ImmortalersBoat.Type.HIMEKAIDO, basicItem().stacksTo(1)));\r\n\r\n        HIMEKAIDO_CHEST_BOAT = registerWithTab(\"himekaido_chest_boat\",()->\r\n                new ImmortalersChestBoatItem(ImmortalersChestBoat.Type.HIMEKAIDO, basicItem().stacksTo(1)));\r\n\r\n        LEISAMBOO_PLANKS = registerWithTab(\"leisamboo_planks\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_PLANKS.get(), basicItem()));\r\n\r\n        LEISAMBOO_STAIRS = registerWithTab(\"leisamboo_stairs\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_STAIRS.get(), basicItem()));\r\n\r\n        LEISAMBOO_SLAB = registerWithTab(\"leisamboo_slab\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_SLAB.get(), basicItem()));\r\n\r\n        LEISAMBOO_FENCE = registerWithTab(\"leisamboo_fence\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_FENCE.get(), basicItem()));\r\n\r\n        LEISAMBOO_FENCE_GATE = registerWithTab(\"leisamboo_fence_gate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_FENCE_GATE.get(), basicItem()));\r\n\r\n        LEISAMBOO_PRESSURE_PLATE = registerWithTab(\"leisamboo_pressure_plate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_PRESSURE_PLATE.get(), basicItem()));\r\n\r\n        LEISAMBOO_BUTTON = registerWithTab(\"leisamboo_button\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_BUTTON.get(), basicItem()));\r\n\r\n        ANCIENT_FIBER = registerWithTab(\"ancient_fiber\", () ->\r\n                new Item(basicItem()));\r\n        /*\r\n        材料类物品\r\n        */\r\n\r\n        EVOLUTCORN = registerWithTab(\"evolutcorn\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.EVOLUTCORN)));\r\n\r\n        ROAST_EVOLUTCORN = registerWithTab(\"roast_evolutcorn\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.ROAST_EVOLUTCORN)));\r\n\r\n        EVOLUTCORN_GRAINS = registerWithTab(\"evolutcorn_grains\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.EVOLUTCORN.get(), new Item.Properties().food(ImmortalersDelightFoodProperties.EVOLUTCORN_GRAINS)));\r\n\r\n        ROAST_EVOLUTCORN_CHOPS = registerWithTab(\"roast_evolutcorn_chops\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.ROAST_EVOLUTCORN_CHOPS)));\r\n\r\n        PEARLIP = registerWithTab(\"pearlip\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.PEARLIPEARL_BUNDLE.get(), new Item.Properties().food(ImmortalersDelightFoodProperties.PEARLIP)));\r\n\r\n        PEARLIPEARL = registerWithTab(\"pearlipearl\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.PEARLIPEARL_STALK.get(), new Item.Properties().food(ImmortalersDelightFoodProperties.PEARLIPEARL)));\r\n\r\n        PEARLIP_SHELL = registerWithTab(\"pearlip_shell\", () ->\r\n                new Item(basicItem()));\r\n\r\n        CONTAINS_TEA_LEISAMBOO = registerWithTab(\"contains_tea_leisamboo\",()->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.LEISAMBOO_CROP.get(),new Item.Properties()));\r\n\r\n        HIMEKAIDO_SEED = registerWithTab(\"himekaido_seed\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.HIMEKAIDO_SHRUB.get(), new Item.Properties()));\r\n\r\n        ROTTEN_FLESH_CUTS = registerWithTab(\"rotten_flesh_cuts\", () ->\r\n                new Item(new Item.Properties()));\r\n\r\n        PITCHER_POD_PETAL = registerWithTab(\"pitcher_pod_petal\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        KWAT_WHEAT_SEEDS =  registerWithTab(\"kwat_wheat_seeds\",()->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.KWAT_WHEAT.get(), new Item.Properties()));\r\n\r\n        KWAT_WHEAT = registerWithTab(\"kwat_wheat\", () ->\r\n                new GasToxicFoodItem(fantasticFoodItem(ImmortalersDelightFoodProperties.KWAT_WHEAT, Rarity.COMMON, false),true,false));\r\n\r\n        /*\r\n        玉米系列物品\r\n        */\r\n\r\n        CRETACEOUS_ZEA_BALL = registerWithTab(\"cretaceous_zea_ball\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.CRETACEOUS_ZEA_BALL), true));\r\n\r\n        COLORFUL_GRILLED_SKEWERS = registerWithTab(\"colorful_grilled_skewers\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.COLORFUL_GRILLED_SKEWERS)));\r\n\r\n        POPOLUTCORN = registerWithTab(\"popolutcorn\", () ->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.POPOLUTCORN), true));\r\n\r\n        ZEA_PANCAKE = registerWithTab(\"zea_pancake\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.ZEA_PANCAKE.get(), basicItem()));\r\n\r\n        ZEA_PANCAKE_SLICE = registerWithTab(\"zea_pancake_slice\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.ZEA_PANCAKE_SLICE)));\r\n\r\n        EVOLUTCORN_PIE_CRUST = registerWithTab(\"evolutcorn_pie_crust\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        PEARLIP_PIE = block(ImmortalersDelightBlocks.PEARLIP_PIE);\r\n\r\n        PEARLIP_PIE_SLICE = foodItem(\"pearlip_pie_slice\",ImmortalersDelightFoodProperties.PEARLIP_PIE_SLICE);\r\n\r\n        PEATIC_MUSA_SALAD = registerWithTab(\"peatic_musa_salad\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.PEATIC_MUSA_SALAD), true));\r\n\r\n        /*\r\n        香蕉系列物品\r\n        */\r\n\r\n        PEARLIP_MILK_SHAKE = registerWithTab(\"pearlip_milk_shake\", () ->\r\n                new DrinkableItem(new Item.Properties().craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).food(ImmortalersDelightFoodProperties.PEARLIP_MILK_SHAKE), true, false));\r\n\r\n        PEARLIP_PUMPKIN_PIE = registerWithTab(\"pearlip_pumpkin_pie\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.PEARLIP_PUMPKIN_PIE)));\r\n\r\n        PEARLIPEARL_EGGSTEAM = registerWithTab(\"pearlipearl_eggsteam\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.PEARLIPEARL_EGGSTEAM), true));\r\n\r\n        PEARLIP_JELLY = registerWithTab(\"pearlip_jelly\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.PEARLIP_JELLY), true));\r\n\r\n        PEARLIPEARL_TART = registerWithTab(\"pearlipearl_tart\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.PEARLIPEARL_TART)));\r\n        /*\r\n         溪竹相关物品\r\n        */\r\n        LEAF_TEA = registerWithTab(\"leaf_tea\",()->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.LEAF_TEA),true, false));\r\n\r\n        EMPTY_BAMBOO_CUP = registerWithTab(\"empty_bamboo_cup\", () ->\r\n                new Item(new Item.Properties().stacksTo(16)));\r\n\r\n        LEISAMBOO_TEA = registerWithTab(\"leisamboo_tea\", () ->\r\n                new DrinkableItem(leisambooDrinksItem(ImmortalersDelightFoodProperties.LEISAMBOO_TEA),true, false));\r\n\r\n        ICED_BLACK_TEA = registerWithTab(\"iced_black_tea\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.ICED_BLACK_TEA),true, false));\r\n\r\n        PEARLIPEARL_MILK_TEA = registerWithTab(\"pearlipearl_milk_tea\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.PEARLIPEARL_MILK_TEA),true, false));\r\n\r\n        PEARLIPEARL_MILK_GREEN = registerWithTab(\"pearlipearl_milk_green\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.PEARLIPEARL_MILK_GREEN),true, false));\r\n\r\n        STOVE_BLACK_TEA = registerWithTab(\"stove_black_tea\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.STOVE_BLACK_TEA),true, false));\r\n\r\n        LEAF_GREEN_TEA = registerWithTab(\"leaf_green_tea\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.LEAF_GREEN_TEA),true, false));\r\n\r\n        BRITISH_YELLOW_TEA = registerWithTab(\"british_yellow_tea\",() ->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.BRITISH_YELLOW_TEA),true, false));\r\n\r\n        MILLENIAN_BAMBOO = registerWithTab(\"millenian_bamboo\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.MILLENIAN_BAMBOO.get(), basicItem()));\r\n\r\n        BOWL_OF_MILLENIAN_BAMBOO = registerWithTab(\"bowl_of_millenian_bamboo\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.BOWL_OF_MILLENIAN_BAMBOO),true, false));\r\n        /*\r\n        姬海棠系列物品\r\n         */\r\n\r\n        HIMEKAIDO_YOGURT_PIE = block(ImmortalersDelightBlocks.HIMEKAIDO_YOGURT_PIE);\r\n\r\n        HIMEKAIDO_YOGURT_PIE_SLICE = foodItem(\"himekaido_yogurt_pie_slice\",ImmortalersDelightFoodProperties.HIMEKAIDO_YOGURT_PIE_SLICE);\r\n\r\n        HIMEKAIDO = registerWithTab(\"himekaido\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.HIMEKAIDO, Rarity.COMMON, false), true));\r\n\r\n        GOLDEN_HIMEKAIDO = registerWithTab(\"golden_himekaido\", () ->\r\n                new GoldenHimkaidoFoodItem(fantasticFoodItem(ImmortalersDelightFoodProperties.GOLDEN_HIMEKAIDO, Rarity.RARE, false),true, true,false));\r\n\r\n        ENCHANTED_GOLDEN_HIMEKAIDO = registerWithTab(\"enchanted_golden_himekaido\", () ->\r\n                new EnchantedGoldenHimekaidoFoodItem((new Item.Properties()).rarity(Rarity.EPIC).food(ImmortalersDelightFoodProperties.ENCHANTED_GOLDEN_HIMEKAIDO),true,true,true,3,1.0));\r\n\r\n        HIMEKAIDO_JELLY = registerWithTab(\"himekaido_jelly\", () ->\r\n                new DrinkableItem(new Item.Properties().craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).food(ImmortalersDelightFoodProperties.HIMEKAIDO_JELLY), true, false));\r\n\r\n        YOGURT = registerWithTab(\"yogurt\", () ->\r\n                new DrinkableItem(new Item.Properties().craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).food(ImmortalersDelightFoodProperties.YOGURT), true, false));\r\n\r\n        STUFFED_POISONOUS_POTATO = registerWithTab(\"stuffed_poisonous_potato\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.STUFFED_POISONOUS_POTATO, Rarity.COMMON, false), true));\r\n\r\n        BAKED_POISONOUS_POTATO = registerWithTab(\"baked_poisonous_potato\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.BAKED_POISONOUS_POTATO, Rarity.COMMON, false), true));\r\n\r\n        BRAISED_SPIDER_EYES_BLOCK = registerWithTab(\"braised_spider_eyes_block\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.BRAISED_SPIDER_EYES_BLOCK.get(), basicItem()));\r\n\r\n        BRAISED_SPIDER_EYES_IN_GRAVY = registerWithTab(\"braised_spider_eyes_in_gravy\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.BRAISED_SPIDER_EYES_IN_GRAVY), true));\r\n\r\n\r\n        TARTARE_CHICKEN = registerWithTab(\"tartare_chicken\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.TARTARE_CHICKEN), true));\r\n\r\n\r\n        DIPPED_ROTTEN_FLESH = registerWithTab(\"dipped_rotten_flesh\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.DIPPED_ROTTEN_FLESH, Rarity.COMMON, false), true));\r\n\r\n        CRISPY_YOGURT_ROTTEN_FLESH = registerWithTab(\"crispy_yogurt_rotten_flesh\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.CRISPY_YOGURT_ROTTEN_FLESH), true));\r\n\r\n        MEATY_ROTTEN_TOMATO_BROTH = registerWithTab(\"meaty_rotten_tomato_broth\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.MEATY_ROTTEN_TOMATO_BROTH), true));\r\n\r\n        PUFFERFISH_ROLL = registerWithTab(\"pufferfish_roll\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.PUFFERFISH_ROLL, Rarity.COMMON, false), true));\r\n\r\n        STEWED_ROTTEN_MEAT_POT = registerWithTab(\"stewed_rotten_meat_pot\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.STEWED_ROTTEN_MEAT_POT.get(), basicItem()));\r\n\r\n        BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT = registerWithTab(\"bowl_of_stewed_rotten_meat_in_clay_pot\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT), true));\r\n        /*\r\n        瓦斯麦相关物品\r\n        */\r\n\r\n        KWAT_WHEAT_DOUGH = registerWithTab(\"kwat_wheat_dough\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        KWAT_WHEAT_PASTE = registerWithTab(\"kwat_wheat_paste\",()->\r\n                new Item(new Item.Properties().stacksTo(16).craftRemainder(Items.GLASS_BOTTLE)));\r\n\r\n        KWAT_WHEAT_TOAST = foodItem(\"kwat_wheat_toast\",ImmortalersDelightFoodProperties.KWAT_WHEAT_TOAST);\r\n\r\n        KWAT_WHEAT_TOAST_SLICE = foodItem(\"kwat_wheat_toast_slice\",ImmortalersDelightFoodProperties.KWAT_WHEAT_TOAST_SLICE);\r\n\r\n        NETHER_BREAD_CREAM_SOUP = block(ImmortalersDelightBlocks.NETHER_BREAD_CREAM_SOUP);\r\n\r\n        NETHER_CREAM_SOUP = registerWithTab(\"nether_cream_soup\",() ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.NETHER_CREAM_SOUP),true,false));\r\n\r\n        NETHER_CREAM_BREAD = registerWithTab(\"nether_cream_bread\",() ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.NETHER_CREAM_BREAD),true,false));\r\n\r\n        KWAT_WHEAT_DOUFU = foodItem(\"kwat_wheat_doufu\",ImmortalersDelightFoodProperties.KWAT_WHEAT_DOUFU);\r\n\r\n        FRY_KWAT_WHEAT_DOUFU = registerWithTab(\"fry_kwat_wheat_doufu\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.FRY_KWAT_WHEAT_DOUFU),true,false));\r\n\r\n        JADE_AND_RUBY_SOUP = registerWithTab(\"jade_and_ruby_soup\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.JADE_AND_RUBY_SOUP),true));\r\n\r\n        GOLDEN_FABRIC = register(\"golden_fabric\", () ->\r\n                new ConsumableItem(fantasticItem(Rarity.RARE),false,true));\r\n\r\n        GOLDEN_FABRIC_VEIL = registerWithTab(\"golden_fabric_veil\", () ->\r\n                new GoldenFabricArmor(ImmortalersArmorMaterials.GOLDEN_FABRIC,ArmorItem.Type.HELMET,fantasticItem(Rarity.RARE)));\r\n\r\n        RAW_SNIFFER_SLICE = REGISTER.register(\"raw_sniffer_slice\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.RAW_SNIFFER_SLICE, Rarity.COMMON, false), true));\r\n\r\n        COOKED_SNIFFER_SLICE = REGISTER.register(\"cooked_sniffer_slice\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.COOKED_SNIFFER_SLICE, Rarity.COMMON, false), true));\r\n\r\n        RAW_SNIFFER_STEAK = REGISTER.register(\"raw_sniffer_steak\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.RAW_SNIFFER_STEAK, Rarity.COMMON, false), true));\r\n\r\n        COOKED_SNIFFER_STEAK = REGISTER.register(\"cooked_sniffer_steak\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.COOKED_SNIFFER_STEAK, Rarity.COMMON, false), true));\r\n\r\n        SNIFFER_ROTATING_ROAST_MEAT = REGISTER.register(\"sniffer_rotating_roast_meat\",()->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.SNIFFER_ROTATING_ROAST_MEAT.get(), new Item.Properties()));\r\n\r\n        SNIFFER_HIDE = REGISTER.register(\"sniffer_hide\", () ->\r\n                new ConsumableItem(fantasticItem(Rarity.COMMON)));\r\n\r\n        /*火把花相关物品*/\r\n        TORCHFLOWER_MUSTARD = registerWithTab(\"torchflower_mustard\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        TORCHFLOWER_COOKIE = foodItem(\"torchflower_cookie\",ImmortalersDelightFoodProperties.TORCHFLOWER_COOKIE,true);\r\n\r\n        TORCHFLOWER_CAKE = foodItem(\"torchflower_cake\",ImmortalersDelightFoodProperties.TORCHFLOWER_CAKE,true);\r\n\r\n        TORCHFLOWER_CURRY_RICE = registerWithTab(\"torchflower_curry_rice\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.TORCHFLOWER_CURRY_RICE),true));\r\n\r\n        EXTRA_SPICY_PASTA = registerWithTab(\"extra_spicy_pasta\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.EXTRA_SPICY_PASTA),true));\r\n\r\n        HOT_HI_SOUP = registerWithTab(\"hot_hi_soup\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.HOT_HI_SOUP),true));\r\n\r\n        INCANDESCENCE_SUSHI = foodItem(\"incandescence_sushi\",ImmortalersDelightFoodProperties.INCANDESCENCE_SUSHI,true);\r\n\r\n\r\n        //酒品\r\n        DREUMK_WINE = registerWithTab(\"dreumk_wine\",()->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.DREUMK_WINE),true,false));\r\n\r\n        EVOLUTCORN_BEER = registerWithTab(\"evolutcorn_beer\",()->\r\n                new InebriatedToxicFoodItem(new Item.Properties().craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).food(ImmortalersDelightFoodProperties.EVOLUTCORN_BEER), true, false));\r\n\r\n        VULCAN_COKTAIL = registerWithTab(\"vulcan_coktail\",()->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.VULCAN_COKTAIL),true,false));\r\n\r\n        CLEAR_WATER_VODKA = registerWithTab(\"clear_water_vodka\", () ->\r\n                new InebriatedToxicFoodItem(fantasticFoodItem(ImmortalersDelightFoodProperties.CLEAR_WATER_VODKA, Rarity.COMMON, false),true,false,false,true));\r\n\r\n    }\r\n\r\n    public static RegistryObject<Item> registerWithTab(String name, Supplier<Item> supplier) {\r\n        RegistryObject<Item> item = REGISTER.register(name, supplier);\r\n        CREATIVE_TAB_ITEMS.add(item);\r\n        return item;\r\n    }\r\n\r\n    public static RegistryObject<Item> register(String name, Supplier<Item> supplier) {\r\n        return REGISTER.register(name, supplier);\r\n    }\r\n\r\n    public static Item.Properties basicItem() {\r\n        return new Item.Properties();\r\n    }\r\n\r\n    public static Item.Properties foodItem(FoodProperties food) {\r\n        return (new Item.Properties()).food(food);\r\n    }\r\n\r\n    public static RegistryObject<Item> foodItem(String name,FoodProperties food) {\r\n        return registerWithTab(name,()->new Item(new Item.Properties().food(food)));\r\n    }\r\n\r\n    public static RegistryObject<Item> foodItem(String name,FoodProperties food,boolean hasFoodEffectTooltip) {\r\n        return registerWithTab(name,()->new ConsumableItem(new Item.Properties().food(food),hasFoodEffectTooltip));\r\n    }\r\n\r\n    public static Item.Properties bowlFoodItem(FoodProperties food) {\r\n        return (new Item.Properties()).food(food).craftRemainder(Items.BOWL).stacksTo(16);\r\n    }\r\n\r\n    public static Item.Properties drinkItem() {\r\n        return (new Item.Properties()).craftRemainder(Items.GLASS_BOTTLE).stacksTo(16);\r\n    }\r\n\r\n    public static Item.Properties drinkItem(FoodProperties foodProperties) {\r\n        return (new Item.Properties()).craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).food(foodProperties);\r\n    }\r\n\r\n    public static Item.Properties leisambooDrinksItem() {\r\n        return (new Item.Properties()).craftRemainder(EMPTY_BAMBOO_CUP.get()).stacksTo(16);\r\n    }\r\n\r\n    public static Item.Properties leisambooDrinksItem(FoodProperties foodProperties) {\r\n        return (new Item.Properties()).craftRemainder(EMPTY_BAMBOO_CUP.get()).stacksTo(16).food(foodProperties);\r\n    }\r\n    private static Item.Properties fantasticItem(Rarity soCool) {\r\n        return (new Item.Properties()).rarity(soCool);\r\n    }\r\n\r\n\r\n    private static Item.Properties fantasticFoodItem(FoodProperties foodProperties, Rarity soCool, boolean isBowl) {\r\n        if (isBowl) {\r\n            return new Item.Properties().rarity(soCool).food(foodProperties).craftRemainder(Items.BOWL).stacksTo(16);\r\n        }\r\n        return (new Item.Properties().rarity(soCool).food(foodProperties));\r\n    }\r\n\r\n    private static RegistryObject<Item> block(RegistryObject<Block> block) {\r\n        return registerWithTab(block.getId().getPath(), () -> new BlockItem(block.get(), new Item.Properties()));\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java
--- a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java	
+++ b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java	
@@ -162,7 +162,14 @@
     public static final RegistryObject<Item> CLEAR_WATER_VODKA;
     public static final RegistryObject<Item> SNIFFER_ROTATING_ROAST_MEAT;
     public static final RegistryObject<Item> VULCAN_COKTAIL;
+    //public static final RegistryObject<Item> ELIXIR_OF_IMMORTALITY;
+    public static final RegistryObject<Item> PALE_DEW_WINE;
     //public static final RegistryObject<Item> TEST_DAMAGE_ITEM;
+    public static final RegistryObject<Item> SCARLET_DEVILS_CAKE;
+    public static final RegistryObject<Item> SCARLET_DEVILS_CAKE_SLICE;
+    public static final RegistryObject<Item> RED_STUFFED_BUN;
+    //public static final RegistryObject<Item> SPICY_PUDDING;
+
 
 
     static {
@@ -480,6 +487,18 @@
         JADE_AND_RUBY_SOUP = registerWithTab("jade_and_ruby_soup",()->
                 new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.JADE_AND_RUBY_SOUP),true));
 
+        SCARLET_DEVILS_CAKE = registerWithTab("scarlet_devils_cake", () ->
+                new BlockItem(ImmortalersDelightBlocks.SCARLET_DEVILS_CAKE.get(), basicItem()));
+
+        SCARLET_DEVILS_CAKE_SLICE = registerWithTab("scarlet_devils_cake_slice",()->
+                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.SCARLET_DEVILS_CAKE_SLICE),true,false));
+
+        RED_STUFFED_BUN = registerWithTab("red_stuffed_bun",()->
+                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.RED_STUFFED_BUN),true,false));
+
+//        SPICY_PUDDING = registerWithTab("spicy_pudding",()->
+//                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.SPICY_PUDDING),true,false));
+
         GOLDEN_FABRIC = register("golden_fabric", () ->
                 new ConsumableItem(fantasticItem(Rarity.RARE),false,true));
 
@@ -537,6 +556,9 @@
         CLEAR_WATER_VODKA = registerWithTab("clear_water_vodka", () ->
                 new InebriatedToxicFoodItem(fantasticFoodItem(ImmortalersDelightFoodProperties.CLEAR_WATER_VODKA, Rarity.COMMON, false),true,false,false,true));
 
+        PALE_DEW_WINE = registerWithTab("pale_dew_wine",()->
+                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.PALE_DEW_WINE),true,false));
+
     }
 
     public static RegistryObject<Item> registerWithTab(String name, Supplier<Item> supplier) {
Index: src/main/java/com/renyigesai/immortalers_delight/potion/CulturalLegacyPotionEffect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.potion;\r\n\r\nimport com.renyigesai.immortalers_delight.block.CulturalLegacyEffectToolBlock;\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightBlocks;\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightFoodProperties;\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightMobEffect;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.world.effect.MobEffectInstance;\r\nimport net.minecraft.world.effect.MobEffects;\r\nimport net.minecraft.world.entity.Entity;\r\nimport net.minecraft.world.entity.LivingEntity;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.Blocks;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraftforge.event.enchanting.EnchantmentLevelSetEvent;\r\nimport net.minecraftforge.event.entity.living.LivingEntityUseItemEvent;\r\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\r\nimport net.minecraftforge.fml.common.Mod;\r\n\r\n@Mod.EventBusSubscriber\r\npublic class CulturalLegacyPotionEffect {\r\n\r\n    @SubscribeEvent\r\n    public static void onUseItemFinish(LivingEntityUseItemEvent.Finish event) {\r\n        if (event != null && event.getEntity() != null) {\r\n            ItemStack stack = event.getItem();\r\n            Entity entity = event.getEntity();\r\n            if (entity instanceof LivingEntity livingEntity) {\r\n                if (stack.getItem().isEdible()) {\r\n                    if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.PUFFERFISH_ROLL) {\r\n                        livingEntity.addEffect(new MobEffectInstance(MobEffects.SATURATION, 1));\r\n                    }\r\n                    if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT) {\r\n                        livingEntity.addEffect(new MobEffectInstance(MobEffects.HEAL, 1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n//    @SubscribeEvent\r\n//    public static void onEnchantmentLevelSet(EnchantmentLevelSetEvent event) {\r\n//        if (event == null || event.isCanceled()) {\r\n//            return;\r\n//        }\r\n//\r\n//        // 获取世界和附魔台的位置\r\n//        Level level = event.getLevel();\r\n//        BlockPos pos = event.getPos();\r\n//\r\n//        // 以附魔台为中心，检查 5*5 范围内的方块\r\n//        int goldBlockCount = maxAgeToolBlocksInRange(level, pos, 2); // 2 表示从中心到边缘的距离\r\n//\r\n//        // 根据金块数量计算新的附魔等级\r\n//        int newLevel = calculateNewLevel(event.getEnchantLevel(), goldBlockCount);\r\n//\r\n//        // 设置新的附魔等级\r\n//        event.setEnchantLevel(newLevel);\r\n//    }\r\n//\r\n//    /**\r\n//     * 计算指定范围内的指定方块数量\r\n//     * @param level 世界\r\n//     * @param centerPos 中心位置\r\n//     * @param range 范围（从中心到边缘的距离）\r\n//     * @return 金块数量\r\n//     */\r\n//    private static int maxAgeToolBlocksInRange(Level level, BlockPos centerPos, int range) {\r\n//        int maxAge = 0;\r\n//        for (int x = -range; x <= range; x++) {\r\n//            for (int y = -range; y <= range; y++) {\r\n//                for (int z = -range; z <= range; z++) {\r\n//                    BlockPos checkPos = centerPos.offset(x, y, z);\r\n//                    if (level.getBlockState(checkPos).getBlock() instanceof CulturalLegacyEffectToolBlock block) {\r\n//\r\n//                        maxAge++;\r\n//                    }\r\n//                }\r\n//            }\r\n//        }\r\n//        return maxAge;\r\n//    }\r\n//\r\n//    /**\r\n//     * 根据金块数量计算新的附魔等级\r\n//     * @param originalLevel 原始附魔等级\r\n//     * @param goldBlockCount 金块数量\r\n//     * @return 新的附魔等级\r\n//     */\r\n//    private static int calculateNewLevel(int originalLevel, int goldBlockCount) {\r\n//        // 简单示例：每有一个金块，附魔等级降低 1 级，但不低于 0\r\n//        int newLevel = originalLevel - goldBlockCount;\r\n//        return Math.max(0, newLevel);\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/potion/CulturalLegacyPotionEffect.java b/src/main/java/com/renyigesai/immortalers_delight/potion/CulturalLegacyPotionEffect.java
--- a/src/main/java/com/renyigesai/immortalers_delight/potion/CulturalLegacyPotionEffect.java	
+++ b/src/main/java/com/renyigesai/immortalers_delight/potion/CulturalLegacyPotionEffect.java	
@@ -26,14 +26,24 @@
         if (event != null && event.getEntity() != null) {
             ItemStack stack = event.getItem();
             Entity entity = event.getEntity();
-            if (entity instanceof LivingEntity livingEntity) {
+            if (entity instanceof LivingEntity livingEntity && !livingEntity.level().isClientSide()) {
                 if (stack.getItem().isEdible()) {
                     if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.PUFFERFISH_ROLL) {
                         livingEntity.addEffect(new MobEffectInstance(MobEffects.SATURATION, 1));
                     }
-                    if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT) {
+                    if (
+                            stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT) {
                         livingEntity.addEffect(new MobEffectInstance(MobEffects.HEAL, 1));
                     }
+                    if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.SCARLET_DEVILS_CAKE_SLICE) {
+                        livingEntity.heal(2);
+                    }
+                    if (stack.getFoodProperties(livingEntity) == ImmortalersDelightFoodProperties.RED_STUFFED_BUN) {
+                        if (livingEntity.getRandom().nextInt(3) == 0) {
+                            livingEntity.addEffect(new MobEffectInstance(MobEffects.DAMAGE_BOOST, 3000));
+                            livingEntity.addEffect(new MobEffectInstance(MobEffects.LUCK, 600));
+                        }
+                    }
                 }
             }
         }
Index: src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightFoodProperties.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.init;\r\n\r\nimport net.minecraft.world.effect.MobEffect;\r\nimport net.minecraft.world.effect.MobEffectInstance;\r\nimport net.minecraft.world.effect.MobEffects;\r\nimport net.minecraft.world.food.FoodProperties;\r\nimport vectorwing.farmersdelight.common.registry.ModEffects;\r\n\r\npublic class ImmortalersDelightFoodProperties {\r\n\r\n    public static final FoodProperties BOWL_OF_MILLENIAN_BAMBOO = new FoodProperties.Builder().nutrition(6)\r\n            .saturationMod(0.65f)\r\n            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),1200,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(ModEffects.NOURISHMENT.get(),1200,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.CULTURAL_LEGACY.get(),6000,0),1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties EVOLUTCORN = new FoodProperties.Builder().nutrition(2)\r\n            .saturationMod(0.75f).build();\r\n\r\n    public static final FoodProperties ROAST_EVOLUTCORN = new FoodProperties.Builder().nutrition(4)\r\n            .saturationMod(0.625f).build();\r\n\r\n    public static final FoodProperties EVOLUTCORN_GRAINS = new FoodProperties.Builder().nutrition(2)\r\n            .saturationMod(0.75f).build();\r\n\r\n    public static final FoodProperties ROAST_EVOLUTCORN_CHOPS = new FoodProperties.Builder().nutrition(4)\r\n            .saturationMod(0.625f).build();\r\n\r\n    public static final FoodProperties CRETACEOUS_ZEA_BALL = new FoodProperties.Builder().nutrition(6)\r\n            .saturationMod(0.45f)\r\n            .effect(()-> new MobEffectInstance(ModEffects.NOURISHMENT.get(),800,0),1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties COLORFUL_GRILLED_SKEWERS = new FoodProperties.Builder().nutrition(9)\r\n            .saturationMod(0.85f).build();\r\n\r\n    public static final FoodProperties PEARLIP = new FoodProperties.Builder().nutrition(1)\r\n            .saturationMod(0.4f).build();\r\n\r\n    public static final FoodProperties POPOLUTCORN = new FoodProperties.Builder().nutrition(4).fast()\r\n            .saturationMod(0.625f).effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600,0),1.0F).build();\r\n\r\n    public static final FoodProperties PEARLIPEARL = new FoodProperties.Builder().nutrition(1).fast()\r\n            .saturationMod(0.15f).build();\r\n\r\n    public static final FoodProperties PEATIC_MUSA_SALAD = new FoodProperties.Builder().nutrition(6).fast()\r\n            .saturationMod(0.6f).effect(()-> new MobEffectInstance(MobEffects.HEAL,1,0),1.0F).build();\r\n\r\n    public static final FoodProperties PEARLIP_MILK_SHAKE = new FoodProperties.Builder().alwaysEat()\r\n            .effect(()-> new MobEffectInstance(MobEffects.REGENERATION,600,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(MobEffects.DAMAGE_RESISTANCE,600,0),1F).build();\r\n\r\n    public static final FoodProperties PEARLIP_PUMPKIN_PIE = new FoodProperties.Builder().nutrition(3).fast()\r\n            .saturationMod(1.0f).build();\r\n\r\n    public static final FoodProperties PEARLIPEARL_TART = new FoodProperties.Builder().nutrition(8)\r\n            .saturationMod(0.625f).build();\r\n\r\n    public static final FoodProperties PEARLIPEARL_EGGSTEAM = new FoodProperties.Builder().nutrition(2)\r\n            .saturationMod(0.3f).effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),1200,0),1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties PEARLIP_JELLY = new FoodProperties.Builder().nutrition(2)\r\n            .saturationMod(0.2f).effect(()-> new MobEffectInstance(MobEffects.JUMP,1200,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1200,0),1.0F)\r\n            .build();\r\n\r\n    /*\r\n    姬海棠系列食物\r\n     */\r\n    public static final FoodProperties HIMEKAIDO = new FoodProperties.Builder()\r\n            .nutrition(3)\r\n            .saturationMod(0.6f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RELIEVE_POISON.get(), 25, 0);\r\n            }, 1.0F)\r\n            .build();\r\n    public static final FoodProperties HIMEKAIDO_JELLY = new FoodProperties.Builder().alwaysEat()\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),120,1),1.0F)\r\n            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,4,0),1.0F).build();\r\n    public static final FoodProperties YOGURT = new FoodProperties.Builder().alwaysEat()\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),400,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,4,0),0.51F).build();\r\n    public static final FoodProperties BAKED_POISONOUS_POTATO = new FoodProperties.Builder()\r\n            .nutrition(6)\r\n            .saturationMod(0.55f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.WEAK_POISON.get(), 80, 0);\r\n            }, 0.6F)\r\n            .build();\r\n    public static final FoodProperties DIPPED_ROTTEN_FLESH = new FoodProperties.Builder()\r\n            .nutrition(4)\r\n            .saturationMod(0.45f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_UNDEAD.get(),320,0);\r\n            }, 0.6F)\r\n            .build();\r\n\r\n    public static final FoodProperties CRISPY_YOGURT_ROTTEN_FLESH = new FoodProperties.Builder()\r\n            .nutrition(6)\r\n            .saturationMod(0.6f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_UNDEAD.get(),720,0);\r\n            }, 1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties MEATY_ROTTEN_TOMATO_BROTH = new FoodProperties.Builder()\r\n            .nutrition(8)\r\n            .saturationMod(0.4f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_UNDEAD.get(),560,0);\r\n            }, 1.0F)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ILLAGER.get(),360,0);\r\n            }, 1.0F)\r\n            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),1800,0),1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties BRAISED_SPIDER_EYES_IN_GRAVY = new FoodProperties.Builder()\r\n            .nutrition(4)\r\n            .saturationMod(0.5f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ARTHROPOD.get(),560,0);\r\n            }, 1.0F)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_UNDEAD.get(),360,0);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.REGENERATION,150,0),1.0F)\r\n            .build();\r\n    public static final FoodProperties TARTARE_CHICKEN = new FoodProperties.Builder()\r\n            .nutrition(8)\r\n            .saturationMod(0.875f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ARTHROPOD.get(),640,1);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.REGENERATION,450,0),1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties STUFFED_POISONOUS_POTATO = new FoodProperties.Builder()\r\n            .nutrition(10)\r\n            .saturationMod(0.6f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_UNDEAD.get(),360,0);\r\n            }, 1.0F)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ILLAGER.get(),800,0);\r\n            }, 1.0F)\r\n            .build();\r\n\r\n    public static final FoodProperties PUFFERFISH_ROLL = new FoodProperties.Builder()\r\n            .nutrition(4)\r\n            .saturationMod(1.2f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ABYSSAL.get(),2000,0);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.HEALTH_BOOST,600,0),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.REGENERATION,250,1),1.0F)\r\n            .build();\r\n    public static final FoodProperties BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT = new FoodProperties.Builder()\r\n            .nutrition(8)\r\n            .saturationMod(1.2f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ModEffects.NOURISHMENT.get(),2000,0);\r\n            }, 1.0F)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RESISTANCE_TO_ABYSSAL.get(),1600,1);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.HEALTH_BOOST,2400,0),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.REGENERATION,250,1),1.0F)\r\n            .build();\r\n    public static final FoodProperties GOLDEN_HIMEKAIDO = new FoodProperties.Builder()\r\n            .nutrition(4)\r\n            .saturationMod(1.2f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.MAGICAL_REVERSE.get(),3,1);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.ABSORPTION,2400,0),1.0F)\r\n            .alwaysEat()\r\n            .build();\r\n    public static final FoodProperties ENCHANTED_GOLDEN_HIMEKAIDO = new FoodProperties.Builder()\r\n            .nutrition(8)\r\n            .saturationMod(1.25f)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.MAGICAL_REVERSE.get(),20,3);\r\n            }, 1.0F)\r\n            .effect(() -> {\r\n                return new MobEffectInstance((MobEffect)ImmortalersDelightMobEffect.RELIEVE_POISON.get(),6000,0);\r\n            }, 1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.ABSORPTION,2400,1),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.HEALTH_BOOST,2400,1),1.0F)\r\n            .alwaysEat()\r\n            .build();\r\n    public static final FoodProperties KWAT_WHEAT = new FoodProperties.Builder().alwaysEat()\r\n            .nutrition(3)\r\n            .saturationMod(0.1f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.GAS_POISON.get(),100,0),1.0F)\r\n            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,3,0),1.0F).build();\r\n    public static final FoodProperties RAW_SNIFFER_SLICE = new FoodProperties.Builder()\r\n            .nutrition(2)\r\n            .saturationMod(0.5f)\r\n            .effect(new MobEffectInstance(MobEffects.DIG_SPEED,60,0),1.0F)\r\n            .build();\r\n    public static final FoodProperties COOKED_SNIFFER_SLICE = new FoodProperties.Builder()\r\n            .nutrition(3)\r\n            .saturationMod(1.45f)\r\n            .effect(new MobEffectInstance(MobEffects.DIG_SPEED,80,0),1.0F).build();\r\n\r\n    public static final FoodProperties RAW_SNIFFER_STEAK = new FoodProperties.Builder()\r\n            .nutrition(4)\r\n            .saturationMod(0.5f)\r\n            .effect(new MobEffectInstance(MobEffects.DIG_SPEED,120,0),1.0F).build();\r\n\r\n    public static final FoodProperties COOKED_SNIFFER_STEAK = new FoodProperties.Builder()\r\n            .nutrition(9)\r\n            .saturationMod(0.8f)\r\n            .effect(new MobEffectInstance(MobEffects.DIG_SPEED,300,0),1.0F).build();\r\n\r\n    public static final FoodProperties CLEAR_WATER_VODKA = new FoodProperties.Builder()\r\n            .alwaysEat()\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),12000,0),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.REGENERATION,1500,0),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.ABSORPTION,900,9),1.0F)\r\n            .effect(new MobEffectInstance(MobEffects.HEAL,1,1),1.0F).build();\r\n\r\n    public static final FoodProperties ZEA_PANCAKE_SLICE = new FoodProperties.Builder().nutrition(3).saturationMod(0.65f).build();\r\n\r\n    public static final FoodProperties PEARLIP_PIE_SLICE = new FoodProperties.Builder().nutrition(3).saturationMod(0.65f).build();\r\n\r\n    public static final FoodProperties HIMEKAIDO_YOGURT_PIE_SLICE = new FoodProperties.Builder().nutrition(3).saturationMod(0.65f).build();\r\n\r\n    public static final FoodProperties EVOLUTCORN_BEER = new FoodProperties.Builder()\r\n            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,2700,2),1F)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),1800),1F).build();\r\n\r\n    public static final FoodProperties DREUMK_WINE = new FoodProperties.Builder()\r\n            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,1800,2),1F)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),1800),1F)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),6000),1.0F).build();\r\n\r\n    public static final FoodProperties VULCAN_COKTAIL = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),600),1F)\r\n            .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),9600),1F).build();\r\n\r\n    public static final FoodProperties LEAF_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1800),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.DIG_SPEED,360),1F).build();\r\n\r\n    public static final FoodProperties LEISAMBOO_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.NIGHT_VISION,1800),1F)\r\n            .effect(() ->new MobEffectInstance(MobEffects.DIG_SPEED,340),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.DIG_SLOWDOWN,540),1F).build();\r\n\r\n    public static final FoodProperties ICED_BLACK_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,1440,2),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN,1200,1),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.JUMP,20,3),1F).build();\r\n\r\n    public static final FoodProperties PEARLIPEARL_MILK_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,2000,1),1F)\r\n            .effect(() ->new MobEffectInstance(MobEffects.SATURATION,3),1F)\r\n            .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.RESISTANCE_TO_SURROUNDINGS.get(),2000,1),1F).build();\r\n\r\n    public static final FoodProperties PEARLIPEARL_MILK_GREEN = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1600,1),1F)\r\n            .effect(() ->new MobEffectInstance(MobEffects.SATURATION,1,2),1F)\r\n            .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.RESISTANCE_TO_SURROUNDINGS.get(),4200),1F).build();\r\n\r\n    public static final FoodProperties STOVE_BLACK_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,2200),1F)\r\n            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),600,0),1.0F).build();\r\n\r\n    public static final FoodProperties LEAF_GREEN_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1350,1),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.NIGHT_VISION,480),1F).build();\r\n\r\n    public static final FoodProperties BRITISH_YELLOW_TEA = new FoodProperties.Builder()\r\n            .effect(() ->new MobEffectInstance(MobEffects.DIG_SPEED,1800),1F)\r\n            .effect(() -> new MobEffectInstance(MobEffects.FIRE_RESISTANCE,300),1F).build();\r\n\r\n    public static final FoodProperties KWAT_WHEAT_DOUFU = new FoodProperties.Builder().nutrition(1).saturationMod(1F).build();\r\n\r\n    public static final FoodProperties FRY_KWAT_WHEAT_DOUFU = new FoodProperties.Builder().nutrition(1).saturationMod(1F)\r\n            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,400,1),1F).build();\r\n\r\n    public static final FoodProperties JADE_AND_RUBY_SOUP = new FoodProperties.Builder().nutrition(1).saturationMod(1F)\r\n            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,200,1),1F)\r\n            .effect(()->new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),800),1F).build();\r\n\r\n    public static final FoodProperties KWAT_WHEAT_TOAST = new FoodProperties.Builder().nutrition(12).saturationMod(0.6f).build();\r\n\r\n    public static final FoodProperties KWAT_WHEAT_TOAST_SLICE = new FoodProperties.Builder().nutrition(4).saturationMod(0.4f).build();\r\n\r\n    public static final FoodProperties NETHER_CREAM_SOUP = new FoodProperties.Builder().nutrition(6).saturationMod(0.75f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600,1),1F)\r\n            .effect(()->new MobEffectInstance(ModEffects.COMFORT.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties NETHER_CREAM_BREAD = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),2400),1F)\r\n            .effect(new MobEffectInstance(MobEffects.SATURATION,60),1F).build();\r\n\r\n    public static final FoodProperties HOT_HI_SOUP = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600),1F).build();\r\n\r\n    public static final FoodProperties INCANDESCENCE_SUSHI = new FoodProperties.Builder().nutrition(8).saturationMod(0.375f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600),1F).build();\r\n\r\n    public static final FoodProperties TORCHFLOWER_CAKE = new FoodProperties.Builder().nutrition(4).saturationMod(0.5f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),600),1F)\r\n            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties TORCHFLOWER_CURRY_RICE = new FoodProperties.Builder().nutrition(15).saturationMod(1f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties EXTRA_SPICY_PASTA = new FoodProperties.Builder().nutrition(12).saturationMod(0.35f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),1200),1F).build();\r\n\r\n    public static final FoodProperties TORCHFLOWER_COOKIE = new FoodProperties.Builder().nutrition(1).saturationMod(0.5f)\r\n            .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),200),1F).fast().build();\r\n\r\n    //TORCHFLOWER_COOKIE\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightFoodProperties.java b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightFoodProperties.java
--- a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightFoodProperties.java	
+++ b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightFoodProperties.java	
@@ -78,10 +78,10 @@
             .build();
     public static final FoodProperties HIMEKAIDO_JELLY = new FoodProperties.Builder().alwaysEat()
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),120,1),1.0F)
-            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,4,0),1.0F).build();
+            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,5,0),1.0F).build();
     public static final FoodProperties YOGURT = new FoodProperties.Builder().alwaysEat()
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),400,0),1.0F)
-            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,4,0),0.51F).build();
+            .effect(()-> new MobEffectInstance(MobEffects.SATURATION,4,0),1F).build();
     public static final FoodProperties BAKED_POISONOUS_POTATO = new FoodProperties.Builder()
             .nutrition(6)
             .saturationMod(0.55f)
@@ -219,8 +219,8 @@
     public static final FoodProperties CLEAR_WATER_VODKA = new FoodProperties.Builder()
             .alwaysEat()
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),12000,0),1.0F)
-            .effect(new MobEffectInstance(MobEffects.REGENERATION,1500,0),1.0F)
-            .effect(new MobEffectInstance(MobEffects.ABSORPTION,900,9),1.0F)
+            .effect(()-> new MobEffectInstance(MobEffects.REGENERATION,1500,0),1.0F)
+            .effect(()-> new MobEffectInstance(MobEffects.ABSORPTION,900,9),1.0F)
             .effect(new MobEffectInstance(MobEffects.HEAL,1,1),1.0F).build();
 
     public static final FoodProperties ZEA_PANCAKE_SLICE = new FoodProperties.Builder().nutrition(3).saturationMod(0.65f).build();
@@ -230,54 +230,96 @@
     public static final FoodProperties HIMEKAIDO_YOGURT_PIE_SLICE = new FoodProperties.Builder().nutrition(3).saturationMod(0.65f).build();
 
     public static final FoodProperties EVOLUTCORN_BEER = new FoodProperties.Builder()
-            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,2700,2),1F)
+            .alwaysEat()
+            .effect(()-> new MobEffectInstance(MobEffects.DAMAGE_BOOST,2700,2),1F)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),1800),1F).build();
 
     public static final FoodProperties DREUMK_WINE = new FoodProperties.Builder()
-            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,1800,2),1F)
+            .alwaysEat()
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),1800),1F)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.RELIEVE_POISON.get(),6000),1.0F).build();
 
     public static final FoodProperties VULCAN_COKTAIL = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(() ->new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),600),1F)
             .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.WARM_CURRENT_SURGES.get(),9600),1F).build();
 
+    public static final FoodProperties PALE_DEW_WINE = new FoodProperties.Builder()
+            .alwaysEat()
+            .effect(() ->new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),3700),1F)
+            .effect(() -> new MobEffectInstance(MobEffects.DAMAGE_RESISTANCE,12000,2),1F).build();
+
+    public static final FoodProperties ELIXIR_OF_IMMORTALITY = new FoodProperties.Builder()
+            .effect(new MobEffectInstance(MobEffects.MOVEMENT_SPEED,92390540),1.0F)
+            .effect(new MobEffectInstance(MobEffects.DIG_SPEED,92390540),1.0F)
+            .effect(new MobEffectInstance(MobEffects.JUMP,3240000),1.0F)
+            .effect(new MobEffectInstance(MobEffects.DAMAGE_RESISTANCE,3240000),1.0F)
+            .effect(new MobEffectInstance(MobEffects.DAMAGE_BOOST,72000,1),1.0F)
+            .effect(new MobEffectInstance(MobEffects.REGENERATION,72000),1.0F)
+            .effect(() ->new MobEffectInstance(ImmortalersDelightMobEffect.INEBRIATED.get(),2700),1F).build();
+
     public static final FoodProperties LEAF_TEA = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1800),1F)
             .effect(() -> new MobEffectInstance(MobEffects.DIG_SPEED,360),1F).build();
 
     public static final FoodProperties LEISAMBOO_TEA = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(() ->new MobEffectInstance(MobEffects.NIGHT_VISION,1800),1F)
             .effect(() ->new MobEffectInstance(MobEffects.DIG_SPEED,340),1F)
             .effect(() -> new MobEffectInstance(MobEffects.DIG_SLOWDOWN,540),1F).build();
 
     public static final FoodProperties ICED_BLACK_TEA = new FoodProperties.Builder()
-            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,1440,2),1F)
-            .effect(() -> new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN,1200,1),1F)
-            .effect(() -> new MobEffectInstance(MobEffects.JUMP,20,3),1F).build();
+            .alwaysEat()
+            .effect(() ->new MobEffectInstance(MobEffects.JUMP,480,9),1F)
+            .effect(() -> new MobEffectInstance(MobEffects.DIG_SLOWDOWN,1000,2),1F)
+            .build();
 
     public static final FoodProperties PEARLIPEARL_MILK_TEA = new FoodProperties.Builder()
-            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,2000,1),1F)
+            .alwaysEat()
+            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,2000,2),1F)
             .effect(() ->new MobEffectInstance(MobEffects.SATURATION,3),1F)
             .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.RESISTANCE_TO_SURROUNDINGS.get(),2000,1),1F).build();
 
     public static final FoodProperties PEARLIPEARL_MILK_GREEN = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1600,1),1F)
             .effect(() ->new MobEffectInstance(MobEffects.SATURATION,1,2),1F)
             .effect(() -> new MobEffectInstance(ImmortalersDelightMobEffect.RESISTANCE_TO_SURROUNDINGS.get(),4200),1F).build();
 
     public static final FoodProperties STOVE_BLACK_TEA = new FoodProperties.Builder()
-            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,2200),1F)
-            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),600,0),1.0F).build();
+            .alwaysEat()
+            .effect(() ->new MobEffectInstance(MobEffects.JUMP,2000,1),1F)
+            .build();
 
     public static final FoodProperties LEAF_GREEN_TEA = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(() ->new MobEffectInstance(MobEffects.MOVEMENT_SPEED,1350,1),1F)
             .effect(() -> new MobEffectInstance(MobEffects.NIGHT_VISION,480),1F).build();
 
     public static final FoodProperties BRITISH_YELLOW_TEA = new FoodProperties.Builder()
+            .alwaysEat()
             .effect(() ->new MobEffectInstance(MobEffects.DIG_SPEED,1800),1F)
             .effect(() -> new MobEffectInstance(MobEffects.FIRE_RESISTANCE,300),1F).build();
 
+    public static final FoodProperties RED_STUFFED_BUN = new FoodProperties.Builder()
+            .nutrition(10)
+            .saturationMod(0.77f)
+            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,1800),1F)
+            .build();
+
+    public static final FoodProperties SPICY_PUDDING = new FoodProperties.Builder()
+            .alwaysEat()
+            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,1440,2),1F)
+            .effect(() -> new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN,1200,1),1F)
+            .effect(() -> new MobEffectInstance(MobEffects.JUMP,20,3),1F).build();
+
+    public static final FoodProperties SCARLET_DEVILS_CAKE_SLICE = new FoodProperties.Builder()
+            .nutrition(5)
+            .saturationMod(0.6f)
+            .effect(() ->new MobEffectInstance(MobEffects.DAMAGE_BOOST,500,1),1F)
+            .effect(()-> new MobEffectInstance(ModEffects.COMFORT.get(),600,0),1.0F)
+            .build();
     public static final FoodProperties KWAT_WHEAT_DOUFU = new FoodProperties.Builder().nutrition(1).saturationMod(1F).build();
 
     public static final FoodProperties FRY_KWAT_WHEAT_DOUFU = new FoodProperties.Builder().nutrition(1).saturationMod(1F)
@@ -318,5 +360,6 @@
     public static final FoodProperties TORCHFLOWER_COOKIE = new FoodProperties.Builder().nutrition(1).saturationMod(0.5f)
             .effect(()-> new MobEffectInstance(ImmortalersDelightMobEffect.INCANDESCENCE.get(),200),1F).fast().build();
 
+
     //TORCHFLOWER_COOKIE
 }
Index: src/main/resources/assets/immortalers_delight/lang/zh_cn.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"creativetab_immortalers_delight_tab\": \"千古乐事\",\r\n  \"item.immortalers_delight.evolutcorn\": \"白垩玉黍\",\r\n  \"item.immortalers_delight.evolutcorn_grains\": \"白垩玉黍粒\",\r\n  \"item.immortalers_delight.roast_evolutcorn_chops\": \"烤白垩玉黍粒\",\r\n  \"item.immortalers_delight.ancient_fiber\": \"远古纤维\",\r\n  \"item.immortalers_delight.roast_evolutcorn\": \"烤白垩玉黍\",\r\n  \"item.immortalers_delight.bowl_of_millenian_bamboo\": \"碗装千年竹\",\r\n  \"item.immortalers_delight.cretaceous_zea_ball\": \"玉黍饭团\",\r\n  \"item.immortalers_delight.colorful_grilled_skewers\": \"缤纷谷串\",\r\n  \"item.immortalers_delight.popolutcorn\": \"爆黍花\",\r\n  \"item.immortalers_delight.zea_pancake_slice\": \"玉黍烙切片\",\r\n  \"item.immortalers_delight.evolutcorn_pie_crust\": \"玉黍酥皮\",\r\n  \"item.immortalers_delight.evolutcorn_beer\": \"玉黍啤酒\",\r\n  \"item.immortalers_delight.pearlip_pie_slice\": \"珍珠棱蕉派切片\",\r\n  \"item.immortalers_delight.peatic_musa_salad\": \"热带沙拉\",\r\n  \"item.immortalers_delight.pearlip\": \"珍珠棱蕉\",\r\n  \"item.immortalers_delight.pearlip_shell\": \"珍珠棱蕉壳\",\r\n  \"item.immortalers_delight.pearlipearl\": \"棱珠\",\r\n  \"item.immortalers_delight.pearlip_pumpkin_pie\": \"珍珠棱蕉南瓜饼\",\r\n  \"item.immortalers_delight.pearlipearl_tart\": \"棱珠蛋挞\",\r\n  \"item.immortalers_delight.pearlip_milk_shake\": \"珍珠棱蕉奶昔\",\r\n  \"item.immortalers_delight.pearlip_jelly\": \"珍珠棱蕉果冻\",\r\n  \"item.immortalers_delight.pearlipearl_eggsteam\": \"蕉香蒸蛋\",\r\n  \"item.immortalers_delight.himekaido_cuts\": \"姬海棠果粒\",\r\n  \"item.immortalers_delight.himekaido_seed\": \"姬海棠种子\",\r\n  \"item.immortalers_delight.rotten_flesh_cuts\": \"腐肉碎\",\r\n  \"item.immortalers_delight.himekaido_jelly\": \"姬海棠果酱\",\r\n  \"item.immortalers_delight.yogurt\": \"酸奶\",\r\n  \"item.immortalers_delight.himekaido\": \"姬海棠果\",\r\n  \"item.immortalers_delight.baked_poisonous_potato\": \"烤毒马铃薯\",\r\n  \"item.immortalers_delight.braised_spider_eyes_in_gravy\": \"碗装四眼丸子\",\r\n  \"item.immortalers_delight.tartare_chicken\": \"鞑靼鸡肉\",\r\n  \"item.immortalers_delight.dipped_rotten_flesh\": \"酱蘸腐肉\",\r\n  \"item.immortalers_delight.crispy_yogurt_rotten_flesh\": \"腐肉酸奶脆\",\r\n  \"item.immortalers_delight.meaty_rotten_tomato_broth\": \"烂茄肉汤\",\r\n  \"item.immortalers_delight.stuffed_poisonous_potato\": \"填馅毒马铃薯\",\r\n  \"item.immortalers_delight.pufferfish_roll\": \"河豚寿司\",\r\n  \"item.immortalers_delight.bowl_of_stewed_rotten_meat_in_clay_pot\": \"碗装的瓦罐烂肉炖\",\r\n  \"item.immortalers_delight.golden_himekaido\": \"金姬海棠果\",\r\n  \"item.immortalers_delight.himekaido_yogurt_pie_slice\": \"姬海棠酸奶派切片\",\r\n  \"item.immortalers_delight.dreumk_wine\": \"醉梦姬\",\r\n  \"item.immortalers_delight.kwat_wheat_seeds\": \"瓦斯麦种子\",\r\n  \"item.immortalers_delight.kwat_wheat\": \"瓦斯麦\",\r\n  \"item.immortalers_delight.golden_fabric\": \"金丝织缕\",\r\n  \"item.immortalers_delight.golden_fabric_veil\": \"绯炵金纱\",\r\n  \"item.immortalers_delight.enchanted_golden_himekaido\": \"金魔法果\",\r\n  \"item.immortalers_delight.contains_tea_leisamboo\": \"含茶竹节\",\r\n  \"item.immortalers_delight.empty_bamboo_cup\": \"空竹杯\",\r\n  \"item.immortalers_delight.leisamboo_tea\": \"溪竹茶\",\r\n  \"item.immortalers_delight.iced_black_tea\": \"冰红茶\",\r\n  \"item.immortalers_delight.pearlipearl_milk_tea\": \"棱珠奶茶\",\r\n  \"item.immortalers_delight.pearlipearl_milk_green\": \"棱珠奶绿\",\r\n  \"item.immortalers_delight.stove_black_tea\": \"炉红茶\",\r\n  \"item.immortalers_delight.leaf_green_tea\": \"叶绿茶\",\r\n  \"item.immortalers_delight.british_yellow_tea\": \"英黄茶\",\r\n  \"item.immortalers_delight.leaf_tea\": \"树叶茶\",\r\n  \"item.immortalers_delight.clear_water_vodka\": \"清水伏特加\",\r\n  \"item.immortalers_delight.raw_sniffer_slice\": \"生嗅探兽肉片\",\r\n  \"item.immortalers_delight.cooked_sniffer_slice\": \"熟嗅探兽肉片\",\r\n  \"item.immortalers_delight.raw_sniffer_steak\": \"生嗅探兽肉排\",\r\n  \"item.immortalers_delight.cooked_sniffer_steak\": \"熟嗅探兽肉排\",\r\n  \"item.immortalers_delight.rotating_roast_meat\": \"旋转烤嗅探兽肉\",\r\n  \"item.immortalers_delight.sniffer_hide\": \"嗅探兽毛皮\",\r\n  \"item.immortalers_delight.pitcher_pod_petal\": \"瓶子草荚果瓣\",\r\n  \"item.immortalers_delight.vulcan_coktail\": \"火神鸡尾酒\",\r\n  \"item.immortalers_delight.kwat_wheat_dough\": \"瓦斯麦面团\",\r\n  \"item.immortalers_delight.kwat_wheat_paste\": \"瓦斯麦浆\",\r\n  \"item.immortalers_delight.kwat_wheat_doufu\": \"瓦斯麦豆腐\",\r\n  \"item.immortalers_delight.fry_kwat_wheat_doufu\": \"炸瓦斯麦豆腐\",\r\n  \"item.immortalers_delight.jade_and_ruby_soup\": \"翡翠红玉汤\",\r\n  \"item.immortalers_delight.kwat_wheat_toast\": \"瓦斯麦吐司\",\r\n  \"item.immortalers_delight.kwat_wheat_toast_slice\": \"瓦斯麦吐司片\",\r\n  \"item.immortalers_delight.nether_cream_soup\": \"下界奶油浓汤\",\r\n  \"item.immortalers_delight.nether_cream_bread\": \"下界奶油面包\",\r\n  \"item.immortalers_delight.himekaido_boat\": \"姬海棠木船\",\r\n  \"item.immortalers_delight.himekaido_chest_boat\": \"姬海棠木运输船\",\r\n  \"item.immortalers_delight.torchflower_mustard\": \"火花芥末\",\r\n  \"item.immortalers_delight.hot_hi_soup\": \"热嗨汤\",\r\n  \"item.immortalers_delight.incandescence_sushi\": \"火热寿司\",\r\n  \"item.immortalers_delight.torchflower_cookie\": \"火花芥末曲奇\",\r\n  \"item.immortalers_delight.torchflower_cake\": \"火把花饼\",\r\n  \"item.immortalers_delight.torchflower_curry_rice\": \"火把花咖喱饭\",\r\n  \"item.immortalers_delight.extra_spicy_pasta\": \"特辣意面\",\r\n  \"block.immortalers_delight.himekaido_log\": \"姬海棠原木\",\r\n  \"block.immortalers_delight.stripped_himekaido_log\": \"去皮姬海棠原木\",\r\n  \"block.immortalers_delight.himekaido_wood\": \"姬海棠木头\",\r\n  \"block.immortalers_delight.stripped_himekaido_wood\": \"去皮姬海棠木头\",\r\n  \"block.immortalers_delight.himekaido_planks\": \"姬海棠木板\",\r\n  \"block.immortalers_delight.himekaido_stairs\": \"姬海棠木楼梯\",\r\n  \"block.immortalers_delight.himekaido_slab\": \"姬海棠台阶\",\r\n  \"block.immortalers_delight.himekaido_door\": \"姬海棠木门\",\r\n  \"block.immortalers_delight.himekaido_trapdoor\": \"姬海棠木活板门\",\r\n  \"block.immortalers_delight.himekaido_fence\": \"姬海棠木栅栏\",\r\n  \"block.immortalers_delight.himekaido_fence_gate\": \"姬海棠木栅栏门\",\r\n  \"block.immortalers_delight.himekaido_cabinet\": \"姬海棠木厨柜\",\r\n  \"block.immortalers_delight.himekaido_pressure_plate\": \"姬海棠木压力板\",\r\n  \"block.immortalers_delight.himekaido_button\": \"姬海棠木按钮\",\r\n  \"block.immortalers_delight.himekaido_sign\": \"姬海棠木告示牌\",\r\n  \"block.immortalers_delight.himekaido_hanging_sign\": \"悬挂式姬海棠木告示牌\",\r\n  \"block.immortalers_delight.leisamboo_planks\": \"棱蕉木板\",\r\n  \"block.immortalers_delight.leisamboo_stairs\": \"棱蕉木楼梯\",\r\n  \"block.immortalers_delight.leisamboo_slab\": \"棱蕉台阶\",\r\n  \"block.immortalers_delight.leisamboo_door\": \"棱蕉木门\",\r\n  \"block.immortalers_delight.leisamboo_trapdoor\": \"棱蕉木活板门\",\r\n  \"block.immortalers_delight.leisamboo_fence\": \"棱蕉木栅栏\",\r\n  \"block.immortalers_delight.leisamboo_fence_gate\": \"棱蕉木栅栏门\",\r\n  \"block.immortalers_delight.leisamboo_cabinet\": \"棱蕉木厨柜\",\r\n  \"block.immortalers_delight.leisamboo_pressure_plate\": \"棱蕉木压力板\",\r\n  \"block.immortalers_delight.leisamboo_button\": \"棱蕉木按钮\",\r\n  \"block.immortalers_delight.leisamboo_sign\": \"棱蕉木告示牌\",\r\n  \"block.immortalers_delight.leisamboo_hanging_sign\": \"悬挂式棱蕉木告示牌\",\r\n  \"block.immortalers_delight.evolutcorn\": \"白垩玉黍\",\r\n  \"block.immortalers_delight.zea_pancake\": \"玉黍烙\",\r\n  \"block.immortalers_delight.pearlip_pie\": \"珍珠棱蕉派\",\r\n  \"block.immortalers_delight.millenian_bamboo\": \"千年竹\",\r\n  \"block.immortalers_delight.himekaido_leaves\": \"姬海棠树叶\",\r\n  \"block.immortalers_delight.himekaido_fruited_leaves\": \"结果的姬海棠树叶\",\r\n  \"block.immortalers_delight.himekaido_flowering_leaves\": \"盛开的姬海棠树叶\",\r\n  \"block.immortalers_delight.himekaido_shrub\": \"姬海棠灌木\",\r\n  \"block.immortalers_delight.stewed_rotten_meat_pot\": \"瓦罐烂肉炖\",\r\n  \"block.immortalers_delight.braised_spider_eyes_block\": \"四眼丸子\",\r\n  \"block.immortalers_delight.spoon_block.tips.1\": \"你需要一个碗以食用它。\",\r\n  \"block.immortalers_delight.evolutcorn_grain_bag\": \"白垩玉黍粒袋\",\r\n  \"block.immortalers_delight.himekaido_crate\": \"箱装姬海棠\",\r\n  \"block.immortalers_delight.pearlip_crate\": \"箱装珍珠棱蕉\",\r\n  \"block.immortalers_delight.evolutcorn_block\": \"白垩玉黍块\",\r\n  \"block.immortalers_delight.enchantal_cooler\": \"魔凝机\",\r\n  \"block.immortalers_delight.leisamboo_stalk\": \"溪竹\",\r\n  \"block.immortalers_delight.leisamboo_crop\": \"溪竹\",\r\n  \"block.immortalers_delight.himekaido_yogurt_pie\": \"姬海棠酸奶派\",\r\n  \"block.immortalers_delight.kwat_wheat\": \"瓦斯麦\",\r\n  \"block.immortalers_delight.nether_bread_cream_soup\": \"下界奶油面包浓汤\",\r\n  \"entity.immortalers_delight.immortal_chest_boat\": \"运输船\",\r\n  \"effect.immortalers_delight.incandescence\": \"灼热\",\r\n  \"effect.immortalers_delight.weak_poison\": \"弱中毒\",\r\n  \"effect.immortalers_delight.weak_wither\": \"弱凋零\",\r\n  \"effect.immortalers_delight.relieve_poison\": \"解毒\",\r\n  \"effect.immortalers_delight.resistance_to_undead\": \"尸毒抵抗\",\r\n  \"effect.immortalers_delight.resistance_to_arthropod\": \"虫毒抵抗\",\r\n  \"effect.immortalers_delight.resistance_to_abyssal\": \"渊毒抵抗\",\r\n  \"effect.immortalers_delight.resistance_to_illager\": \"厄毒抵抗\",\r\n  \"effect.immortalers_delight.magical_reverse\": \"奇迹般的转变\",\r\n  \"effect.immortalers_delight.gas_poison\": \"绯烬烈灼\",\r\n  \"effect.immortalers_delight.inebriated\": \"酩酊\",\r\n  \"effect.immortalers_delight.keep_a_fast\": \"俭省\",\r\n  \"effect.immortalers_delight.burn_the_boats\": \"破釜\",\r\n  \"effect.immortalers_delight.cultural_legacy\": \"文化底蕴\",\r\n  \"effect.immortalers_delight.warm_current_surges\": \"燃起来了\",\r\n  \"effect.immortalers_delight.resistance_to_surroundings\": \"醇厚\",\r\n  \"advancements.immortalers_delight.immortalers_delight.title\": \"千古乐事\",\r\n  \"advancements.immortalers_delight.immortalers_delight.descr\": \"远古之味，静待出土。\",\r\n  \"advancements.immortalers_delight.it_is_more_unusual_than_unusual_food_s_delight.title\": \"这比奇食乐事更懂奇食\",\r\n  \"advancements.immortalers_delight.it_is_more_unusual_than_unusual_food_s_delight.descr\": \"原来千古乐事是千古以来最奇怪的乐事的意思吗？\",\r\n  \"advancements.immortalers_delight.ealdaec_gemhus.title\": \"古炊凡家\",\r\n  \"advancements.immortalers_delight.ealdaec_gemhus.descr\": \"千秋一粟。\",\r\n  \"advancements.immortalers_delight.treow_meregrot.title\": \"木上珍蚌\",\r\n  \"advancements.immortalers_delight.treow_meregrot.descr\": \"获得来自丛林的黑色宝珠。\",\r\n  \"advancements.immortalers_delight.wundor_forbodaeppel.title\": \"乐园禁果\",\r\n  \"advancements.immortalers_delight.wundor_forbodaeppel.descr\": \"获得来自森林的奇迹之籽\",\r\n  \"advancement.immortalers_delight.get_himekaido_trees\": \"拔苗助长\",\r\n  \"advancement.immortalers_delight.get_himekaido_trees.desc\": \"肥沃的土地、额外的肥料——追求卓越总要伴随牺牲。\",\r\n  \"advancement.immortalers_delight.get_stewed_rotten_meat_pot\": \"注意卫生\",\r\n  \"advancement.immortalers_delight.get_stewed_rotten_meat_pot.desc\": \"纹饰虽美，但作为餐具，还是洁净更重要。\",\r\n  \"advancements.immortalers_delight.crimson_clouds.title\": \"绯红烟云\",\r\n  \"advancements.immortalers_delight.crimson_clouds.descr\": \"在绯红森林获得不同寻常的小麦种子。\",\r\n  \"advancements.immortalers_delight.ice_extract.title\": \"冷翠\",\r\n  \"advancements.immortalers_delight.ice_extract.descr\": \"获得魔凝机。\",\r\n  \"advancements.immortalers_delight.the_eternal_flow.title\": \"千古一流\",\r\n  \"advancements.immortalers_delight.the_eternal_flow.descr\": \"在河流获得含茶竹节。\",\r\n  \"container.enchantal_cooler\": \"魔凝机\",\r\n  \"potion.potency.4\": \"V\",\r\n  \"potion.potency.5\": \"VI\",\r\n  \"potion.potency.6\": \"VII\",\r\n  \"potion.potency.7\": \"VIII\",\r\n  \"potion.potency.8\": \"IX\",\r\n  \"potion.potency.9\": \"X\",\r\n  \"farmersdelight.tooltip.golden_himekaido\": \"食用后，免疫并反转 II 级以下的有害效果\",\r\n  \"farmersdelight.tooltip.enchanted_golden_himekaido\": \"食用后 1 秒内，免疫并反转 V 级以下的有害效果(包括瞬时效果)\",\r\n  \"farmersdelight.tooltip.golden_fabric\": \"制成面纱以抵御绯烬尘霾\",\r\n  \"effect.immortalers_delight.incandescence.description\": \"进食时可以获得或延长力量效果。\",\r\n  \"effect.immortalers_delight.weak_poison.description\": \"更低危害的中毒，伤害更低且不会使得生命值低于50%。每40tick将给予1点魔法伤害，每级伤害值翻倍，在生命不大于生命上限的50%时会停止伤害，且该伤害不会令生命值低于50%。\",\r\n  \"effect.immortalers_delight.weak_wither.description\": \"更低危害的凋零，伤害更低且不会致死。每50tick给予1点凋零伤害，每等级翻倍，当生命值不大于1时会停止伤害，其伤害不会令生命值小于1。\",\r\n  \"effect.immortalers_delight.relieve_poison.description\": \"解除等级更低的中毒效果，将等级更低的凋零效果转变为弱凋零。\",\r\n  \"effect.immortalers_delight.resistance_to_undead.description\": \"减免亡灵生物造成的伤害，减伤比例约25%每级，不会达到100%\",\r\n  \"effect.immortalers_delight.resistance_to_arthropod.description\": \"减免节肢生物造成的伤害，减伤比例约25%每级，不会达到100%。与节肢杀手对应地：受到节肢生物伤害时会派生短时间速度IV效果。\",\r\n  \"effect.immortalers_delight.resistance_to_abyssal.description\": \"减免水生生物造成的伤害，减伤比例约25%每级，不会达到100%。在受到水生生物伤害时会派生短时间水下呼吸效果。\",\r\n  \"effect.immortalers_delight.resistance_to_illager.description\": \"减免灾厄村民造成的伤害，减伤比例约25%每级，不会达到100%。\\n你知道吗：恼鬼不属于灾厄村民，尽管它不会被灾厄村民误伤\",\r\n  \"effect.immortalers_delight.magical_reverse.description\": \"移除并尝试反转等级更低的负面效果（反转仅对原版和农夫乐事的效果生效）。持续时间不会被延长。\",\r\n  \"effect.immortalers_delight.gas_poison.description\": \"不可被牛奶解除。每32tick强制减扣6%最大生命值，每秒随机派生下列的一项效果：失明、反胃、虚弱、缓慢、饥饿。派生的效果也不可被牛奶解除。对怪物的伤害上限为每次1.2。\",\r\n  \"effect.immortalers_delight.inebriated.description\": \"不可被牛奶解除。在持续时长为3分钟以下时不生效。每64tick造成8%最大生命值的真实伤害，该伤害不会令生命值低于8%在生物生命值低于8%时停止伤害。派生下列的所有效果：失明、反胃、虚弱、缓慢、中毒。派生的效果也不可被牛奶解除。对怪物的伤害上限为每次1.6。\\n你知道吗：饮酒获得该效果会使得该效果的时间叠加而不是取最长，请节制饮酒。\",\r\n  \"effect.immortalers_delight.keep_a_fast.description\": \"获得该效果时将使得玩家的饥饿值被压缩到原有值的一半，且持续期间饥饿值的消耗将降为［效果等级+1］分之一（与耐久附魔相似，不影响回复生命等行为）。在效果结束时使玩家的饥饿值复原（翻倍），溢出的饥饿值将回收以立即为玩家恢复生命，回收的比例随效果等级提高。\",\r\n  \"effect.immortalers_delight.burn_the_boats.description\": \"在生命值低于一定比例时，给予生物15秒力量III、速度III、急迫III、跳跃提升III、抗性提升III。使得生命条部分被盾牌与燃火的剑覆盖，覆盖的部分标记了触发该效果的生命值。\",\r\n  \"effect.immortalers_delight.cultural_legacy.description\": \"在附魔台附近时，提升附魔台的附魔等级，效果结束时获得一定量经验。\\n需要在附魔台的书架检测范围内生效，检测约4秒一次。1级效果可以提升8级附魔等级，此后每级效果提升4级附魔等级，最高生效8级，即最多提升36级附魔等级。\\n该效果可令附魔台的第一、二条附魔选项也达到30级（需要4级效果，2级效果仅能使得第二条附魔达到30级），使得可以消耗2等级甚至1等级进行30级附魔。\",\r\n  \"effect.immortalers_delight.warm_current_surges.description\": \"燃起来了\",\r\n  \"death.attack.drunk\": \"%1$s 醉倒在柏油路上\",\r\n  \"death.attack.drunk.item\": \"%1$ 被 %2$s 杀死 %3$s\",\r\n  \"death.attack.drunk.player\": \"%1$ 在试图逃跑时死亡 %2$s\",\r\n  \"death.attack.gas\": \"%1$s 被瓦斯毒气熏成了腊肉\",\r\n  \"death.attack.gas.item\": \"%1$ 被 %2$s 杀死 %3$s\",\r\n  \"death.attack.gas.player\": \"%1$ 在试图逃跑时死亡 %2$s\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/immortalers_delight/lang/zh_cn.json b/src/main/resources/assets/immortalers_delight/lang/zh_cn.json
--- a/src/main/resources/assets/immortalers_delight/lang/zh_cn.json	
+++ b/src/main/resources/assets/immortalers_delight/lang/zh_cn.json	
@@ -82,6 +82,12 @@
   "item.immortalers_delight.torchflower_cake": "火把花饼",
   "item.immortalers_delight.torchflower_curry_rice": "火把花咖喱饭",
   "item.immortalers_delight.extra_spicy_pasta": "特辣意面",
+  "item.immortalers_delight.elixir_of_immortality": "蓬莱之药",
+  "item.immortalers_delight.pale_dew_wine": "秋露白",
+  "item.immortalers_delight.scarlet_devils_cake": "红魔鬼蛋糕",
+  "item.immortalers_delight.scarlet_devils_cake_slice": "红魔鬼蛋糕切片",
+  "item.immortalers_delight.red_stuffed_bun": "大红包子",
+  "item.immortalers_delight.spicy_pudding": "辛烈布丁",
   "block.immortalers_delight.himekaido_log": "姬海棠原木",
   "block.immortalers_delight.stripped_himekaido_log": "去皮姬海棠原木",
   "block.immortalers_delight.himekaido_wood": "姬海棠木头",
@@ -131,6 +137,7 @@
   "block.immortalers_delight.himekaido_yogurt_pie": "姬海棠酸奶派",
   "block.immortalers_delight.kwat_wheat": "瓦斯麦",
   "block.immortalers_delight.nether_bread_cream_soup": "下界奶油面包浓汤",
+  "block.immortalers_delight.scarlet_devils_cake": "红魔鬼蛋糕",
   "entity.immortalers_delight.immortal_chest_boat": "运输船",
   "effect.immortalers_delight.incandescence": "灼热",
   "effect.immortalers_delight.weak_poison": "弱中毒",
@@ -175,6 +182,7 @@
   "potion.potency.7": "VIII",
   "potion.potency.8": "IX",
   "potion.potency.9": "X",
+  "farmersdelight.tooltip.elixir_of_immortality": "[独一]在每场游戏中仅能发挥一次效果，此后再次使用时效果将劣化。",
   "farmersdelight.tooltip.golden_himekaido": "食用后，免疫并反转 II 级以下的有害效果",
   "farmersdelight.tooltip.enchanted_golden_himekaido": "食用后 1 秒内，免疫并反转 V 级以下的有害效果(包括瞬时效果)",
   "farmersdelight.tooltip.golden_fabric": "制成面纱以抵御绯烬尘霾",
Index: .idea/modules/immortalers_delight.main.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module version=\"4\">\r\n  <component name=\"AdditionalModuleElements\">\r\n    <content url=\"file://$MODULE_DIR$/../../build/generated/sources/annotationProcessor/java/main\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/../../build/generated/sources/annotationProcessor/java/main\" isTestSource=\"false\" generated=\"true\" />\r\n    </content>\r\n  </component>\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"minecraft\" name=\"Minecraft\">\r\n      <configuration>\r\n        <autoDetectTypes>\r\n          <platformType>FORGE</platformType>\r\n          <platformType>MIXIN</platformType>\r\n          <platformType>MCP</platformType>\r\n        </autoDetectTypes>\r\n        <projectReimportVersion>1</projectReimportVersion>\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n  <component name=\"McpModuleSettings\">\r\n    <option name=\"mappingFile\" value=\"F:\\immortalers_delight\\immortalers_delight\\build\\createMcpToSrg\\output.tsrg\" />\r\n    <option name=\"mcpVersion\" value=\"parchment_2023.09.03-1.20.1\" />\r\n    <option name=\"minecraftVersion\" value=\"1.20.1\" />\r\n    <option name=\"platformVersion\" value=\"47.1.0\" />\r\n    <option name=\"srgType\" value=\"TSRG\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules/immortalers_delight.main.iml b/.idea/modules/immortalers_delight.main.iml
--- a/.idea/modules/immortalers_delight.main.iml	
+++ b/.idea/modules/immortalers_delight.main.iml	
@@ -18,7 +18,7 @@
     </facet>
   </component>
   <component name="McpModuleSettings">
-    <option name="mappingFile" value="F:\immortalers_delight\immortalers_delight\build\createMcpToSrg\output.tsrg" />
+    <option name="mappingFile" value="F:\IDF\Imm Delight\build\createMcpToSrg\output.tsrg" />
     <option name="mcpVersion" value="parchment_2023.09.03-1.20.1" />
     <option name="minecraftVersion" value="1.20.1" />
     <option name="platformVersion" value="47.1.0" />
Index: src/main/java/com/renyigesai/immortalers_delight/block/CulturalLegacyEffectToolBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.block;\r\n\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightItems;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.core.particles.ParticleTypes;\r\nimport net.minecraft.server.level.ServerLevel;\r\nimport net.minecraft.sounds.SoundEvent;\r\nimport net.minecraft.sounds.SoundSource;\r\nimport net.minecraft.tags.BlockTags;\r\nimport net.minecraft.util.ParticleUtils;\r\nimport net.minecraft.util.RandomSource;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.minecraft.world.InteractionResult;\r\nimport net.minecraft.world.effect.MobEffect;\r\nimport net.minecraft.world.effect.MobEffects;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.level.*;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.minecraft.world.level.block.Blocks;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraft.world.level.block.state.StateDefinition;\r\nimport net.minecraft.world.level.block.state.properties.BlockStateProperties;\r\nimport net.minecraft.world.level.block.state.properties.BooleanProperty;\r\nimport net.minecraft.world.level.block.state.properties.IntegerProperty;\r\nimport net.minecraft.world.level.material.FluidState;\r\nimport net.minecraft.world.level.storage.loot.LootParams;\r\nimport net.minecraft.world.phys.BlockHitResult;\r\nimport net.minecraft.world.phys.shapes.CollisionContext;\r\nimport net.minecraft.world.phys.shapes.Shapes;\r\nimport net.minecraft.world.phys.shapes.VoxelShape;\r\nimport net.minecraftforge.common.MinecraftForge;\r\nimport net.minecraftforge.event.enchanting.EnchantmentLevelSetEvent;\r\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\r\nimport net.minecraftforge.fml.common.Mod;\r\nimport vectorwing.farmersdelight.common.registry.ModSounds;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.OptionalInt;\r\n\r\n@Mod.EventBusSubscriber\r\npublic class CulturalLegacyEffectToolBlock extends ReapCropBlock{\r\n    /*\r\n    用于显示附魔台粒子的列表\r\n     */\r\n    public static final List<BlockPos> BOOKSHELF_OFFSETS = BlockPos.betweenClosedStream(-2, 0, -2, 2, 1, 2).filter((p_207914_) -> {\r\n        return Math.abs(p_207914_.getX()) == 2 || Math.abs(p_207914_.getZ()) == 2;\r\n    }).map(BlockPos::immutable).toList();\r\n\r\n    /*\r\n     结构空位的轮廓形状\r\n     */\r\n    protected static final VoxelShape OUTLINE_SHAPE = Block.box(6.0D, 6.0D, 6.0D, 10.0D, 10.0D, 10.0D);\r\n\r\n    public CulturalLegacyEffectToolBlock(Properties p_52247_) {\r\n        super(p_52247_);\r\n        MinecraftForge.EVENT_BUS.register(this);\r\n    }\r\n    public boolean isRandomlyTicking(BlockState pState) {\r\n        return true;\r\n    }\r\n    /*\r\n     执行随机 tick 逻辑，移除方块\r\n     */\r\n    public void randomTick(BlockState pState, ServerLevel pLevel, BlockPos pPos, RandomSource pRandom) {\r\n        /*\r\n        执行生长逻辑\r\n         */\r\n        if (!pLevel.isAreaLoaded(pPos, 1)) return; // Forge: prevent loading unloaded chunks when checking neighbor's light\r\n        if (pLevel.getRawBrightness(pPos, 0) >= 9) {\r\n            int i = this.getAge(pState);\r\n            if (i < this.getMaxAge()) {\r\n                float f = getGrowthSpeed(this, pLevel, pPos);\r\n                if (net.minecraftforge.common.ForgeHooks.onCropsGrowPre(pLevel, pPos, pState, pRandom.nextInt((int)(25.0F / f) + 1) == 0)) {\r\n                    pLevel.setBlock(pPos,Blocks.AIR.defaultBlockState(),2);\r\n                    net.minecraftforge.common.ForgeHooks.onCropsGrowPost(pLevel, pPos, pState);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*\r\n     获取树叶方块的光照强度，这里返回1，表示树叶有一定的透光性\r\n     */\r\n    public int getLightBlock(BlockState p_54460_, BlockGetter p_54461_, BlockPos p_54462_) {\r\n        return 1;\r\n    }\r\n    /*\r\n     在客户端定期调用，用于显示附魔台粒子效果\r\n     */\r\n    public void animateTick(BlockState pState, Level pLevel, BlockPos pPos, RandomSource pRandom) {\r\n        super.animateTick(pState, pLevel, pPos, pRandom);\r\n\r\n        for(BlockPos blockpos : BOOKSHELF_OFFSETS) {\r\n            if (pRandom.nextInt(16) == 0 && isValidBookShelf(pLevel, pPos, blockpos)) {\r\n                pLevel.addParticle(ParticleTypes.ENCHANT, (double)pPos.getX() + 0.5D, (double)pPos.getY() + 2.0D, (double)pPos.getZ() + 0.5D, (double)((float)blockpos.getX() + pRandom.nextFloat()) - 0.5D, (double)((float)blockpos.getY() - pRandom.nextFloat() - 1.0F), (double)((float)blockpos.getZ() + pRandom.nextFloat()) - 0.5D);\r\n            }\r\n        }\r\n\r\n    }\r\n    public static boolean isValidBookShelf(Level pLevel, BlockPos pTablePos, BlockPos pOffsetPos) {\r\n        return pLevel.getBlockState(pTablePos.offset(pOffsetPos)).getEnchantPowerBonus(pLevel, pTablePos.offset(pOffsetPos)) != 0 && pLevel.getBlockState(pTablePos.offset(pOffsetPos.getX() / 2, pOffsetPos.getY(), pOffsetPos.getZ() / 2)).is(BlockTags.ENCHANTMENT_POWER_TRANSMITTER);\r\n    }\r\n    /*\r\n     判断作物是否能在给定环境中存活\r\n     重写存活条件以确保能跟树叶一样浮空放置\r\n     */\r\n    @Override\r\n    public boolean canSurvive(BlockState pState, LevelReader pLevel, BlockPos pPos) {\r\n        return (true);\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public void onEnchantmentLevelSet(EnchantmentLevelSetEvent event) {\r\n        if (event == null || event.isCanceled()) {\r\n            return;\r\n        }\r\n\r\n        // 获取世界和附魔台的位置\r\n        Level level = event.getLevel();\r\n        BlockPos pos = event.getPos();\r\n\r\n        // 以附魔台为中心，检查 5*5 范围内的方块\r\n        int goldBlockCount = maxAgeToolBlocksInRange(level, pos, 2); // 2 表示从中心到边缘的距离\r\n\r\n        // 根据金块数量计算新的附魔等级\r\n        int newLevel = calculateNewLevel(event.getEnchantLevel(), goldBlockCount);\r\n\r\n        // 设置新的附魔等级\r\n        event.setEnchantLevel(newLevel);\r\n    }\r\n\r\n    /**\r\n     * 处理指定范围内的指定方块\r\n     * @param level 世界\r\n     * @param centerPos 中心位置\r\n     * @param range 范围（从中心到边缘的距离）\r\n     * @return 最大Age\r\n     */\r\n    private int maxAgeToolBlocksInRange(Level level, BlockPos centerPos, int range) {\r\n        int maxAge = 0;\r\n        for (int x = -range; x <= range; x++) {\r\n            for (int y = -range; y <= range; y++) {\r\n                for (int z = -range; z <= range; z++) {\r\n                    BlockPos checkPos = centerPos.offset(x, y, z);\r\n                    if (level.getBlockState(checkPos).getBlock() instanceof CulturalLegacyEffectToolBlock) {\r\n                        int ageHere = this.getAge(level.getBlockState(checkPos));\r\n                        maxAge = maxAge > ageHere + 1 ? maxAge : ageHere + 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return maxAge;\r\n    }\r\n\r\n    /**\r\n     * 范围内最大AGE的当前方块设置附魔等级\r\n     * @param originalLevel 原始附魔等级\r\n     * @param maxAge 范围内最大Age\r\n     * @return 新的附魔等级\r\n     */\r\n    private static int calculateNewLevel(int originalLevel, int maxAge) {\r\n        // 根据范围内最大AGE的当前方块设置附魔等级。\r\n        int newLevel = originalLevel + 8 + 4 * (maxAge - 1);\r\n        return Math.min(30, newLevel);\r\n    }\r\n    @Override\r\n    protected ItemLike getBaseSeedId() {\r\n        return ImmortalersDelightItems.BOWL_OF_MILLENIAN_BAMBOO.get();\r\n    }\r\n\r\n    /*\r\n    获取仙人掌的轮廓形状\r\n     */\r\n    public VoxelShape getShape(BlockState pState, BlockGetter pLevel, BlockPos pPos, CollisionContext pContext) {\r\n        return OUTLINE_SHAPE;\r\n    }\r\n\r\n    @Override\r\n    public List<ItemStack> getDrops(BlockState p_287732_, LootParams.Builder p_287596_) {\r\n        return super.getDrops(p_287732_, p_287596_);\r\n    }\r\n\r\n    @Override\r\n    public boolean onDestroyedByPlayer(BlockState state, Level level, BlockPos pos, Player player, boolean willHarvest, FluidState fluid) {\r\n        return super.onDestroyedByPlayer(state, level, pos, player, willHarvest, fluid);\r\n    }\r\n    @Override\r\n    public boolean isValidBonemealTarget(LevelReader p_255715_, BlockPos p_52259_, BlockState p_52260_, boolean p_52261_) {\r\n        return false;\r\n    }\r\n    @Override\r\n    public void performBonemeal(ServerLevel p_221040_, RandomSource p_221041_, BlockPos p_221042_, BlockState p_221043_) {\r\n        if (this.getAge(p_221043_) < this.getMaxAge()) {\r\n            p_221040_.setBlock(p_221042_, this.getStateForAge(this.getAge(p_221043_) + 1), 2);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/block/CulturalLegacyEffectToolBlock.java b/src/main/java/com/renyigesai/immortalers_delight/block/CulturalLegacyEffectToolBlock.java
--- a/src/main/java/com/renyigesai/immortalers_delight/block/CulturalLegacyEffectToolBlock.java	
+++ b/src/main/java/com/renyigesai/immortalers_delight/block/CulturalLegacyEffectToolBlock.java	
@@ -124,11 +124,13 @@
         // 以附魔台为中心，检查 5*5 范围内的方块
         int goldBlockCount = maxAgeToolBlocksInRange(level, pos, 2); // 2 表示从中心到边缘的距离
 
-        // 根据金块数量计算新的附魔等级
-        int newLevel = calculateNewLevel(event.getEnchantLevel(), goldBlockCount);
+        if (goldBlockCount > 0) {
+            // 如果有金,根据金块数量计算新的附魔等级
+            int newLevel = calculateNewLevel(event.getEnchantLevel(), goldBlockCount);
 
-        // 设置新的附魔等级
-        event.setEnchantLevel(newLevel);
+            // 设置新的附魔等级
+            event.setEnchantLevel(newLevel);
+        }
     }
 
     /**
Index: src/main/java/com/renyigesai/immortalers_delight/block/ScarletDevilsCakeBlock.java
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/block/ScarletDevilsCakeBlock.java b/src/main/java/com/renyigesai/immortalers_delight/block/ScarletDevilsCakeBlock.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/renyigesai/immortalers_delight/block/ScarletDevilsCakeBlock.java	
@@ -0,0 +1,160 @@
+package com.renyigesai.immortalers_delight.block;
+
+import com.mojang.datafixers.util.Pair;
+import com.renyigesai.immortalers_delight.init.ImmortalersDelightItems;
+import com.renyigesai.immortalers_delight.util.ItemUtils;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.effect.MobEffects;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.HorizontalDirectionalBlock;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.VoxelShape;
+import vectorwing.farmersdelight.common.tag.ModTags;
+
+public class ScarletDevilsCakeBlock extends HorizontalDirectionalBlock {
+
+    public static final IntegerProperty BITES = IntegerProperty.create("bites",0,8);
+    public static final VoxelShape BOX = box(1.0D,0.0D,1.0D,15.0D,12.0D,15.0D);
+
+    public ScarletDevilsCakeBlock(Properties p_54120_) {
+        super(p_54120_);
+        super.registerDefaultState(defaultBlockState().setValue(BITES,0).setValue(FACING, Direction.NORTH));
+    }
+
+    @Override
+    public VoxelShape getShape(BlockState state, BlockGetter getter, BlockPos pos, CollisionContext context) {
+        return BOX;
+    }
+
+    @Override
+    public InteractionResult use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hitResult) {
+        ItemStack hand_stack = player.getItemInHand(hand);
+            if (hand_stack.is(ModTags.KNIVES)) {
+                return takeServing(state, level, pos, player);
+            }
+            if (!hand_stack.is(ModTags.KNIVES)){
+                return eat(state, level, pos, player);
+            }
+            return super.use(state, level, pos, player, hand, hitResult);
+    }
+
+    public InteractionResult eat(BlockState state, Level level, BlockPos pos, Player player){
+        int bites = state.getValue(BITES);
+        if (!player.canEat(false)) {return InteractionResult.PASS;}
+        int eatCount = 1;
+        for (int i = 1;bites + i <= 8; i++){
+            if (player.canEat(false)){
+                eatCount = i;
+                player.getFoodData().eat(ImmortalersDelightItems.SCARLET_DEVILS_CAKE_SLICE.get(),
+                        new ItemStack(ImmortalersDelightItems.SCARLET_DEVILS_CAKE_SLICE.get()));
+                level.gameEvent(player, GameEvent.EAT, pos);
+                level.playSound(null, pos, SoundEvents.GENERIC_EAT, SoundSource.PLAYERS, 0.8F, 0.8F);
+            }else {
+                break;
+            }
+        }
+        addFoodPoisonEffect(new ItemStack(ImmortalersDelightItems.SCARLET_DEVILS_CAKE_SLICE.get()),level,player,eatCount);
+        if (bites + eatCount < 9) {
+            setBlock(bites + eatCount,state,level,pos);
+        }else {
+            level.destroyBlock(pos, false);
+            vectorwing.farmersdelight.common.utility.ItemUtils.spawnItemEntity(level,
+                    new ItemStack(Items.BOWL),pos.getX() + 0.5,pos.getY() + 0.5,pos.getZ() + 0.5,0.0,0.0,0.0);
+            level.playSound(null,pos, SoundEvents.WOOL_BREAK, SoundSource.PLAYERS, 0.8F, 0.8F);
+        }
+        return InteractionResult.SUCCESS;
+    }
+    /**
+     * 该方法用于处理实体食用物品后添加对应的药水效果。
+     * 当实体食用某个可食用物品时，会根据物品的属性尝试为实体添加相应的药水效果。
+     *
+     * @param p_21064_ 被食用的物品栈，包含了具体的物品及其数量等信息。
+     * @param p_21065_ 实体所在的游戏世界，用于判断是否为客户端，以及获取随机数生成器。
+     * @param p_21066_ 食用物品的实体，即要添加药水效果的对象。
+     */
+    private void addFoodPoisonEffect(ItemStack p_21064_, Level p_21065_, LivingEntity p_21066_, int timeBuffer) {
+        // 从物品栈中获取具体的物品
+        Item item = p_21064_.getItem();
+        // 检查该物品是否为可食用物品
+        if (item.isEdible()) {
+            // 遍历物品的食物属性中定义的所有药水效果及其概率
+            if (!p_21065_.isClientSide && p_21064_.getFoodProperties(p_21066_) != null) {
+                for (Pair<MobEffectInstance, Float> pair : p_21064_.getFoodProperties(p_21066_).getEffects()) {
+                    // 条件判断：
+                    // 1. 当前不是客户端，因为药水效果的添加通常在服务器端处理，以保证数据一致性。
+                    // 2. 药水效果实例不为空，确保有有效的药水效果。
+                    if (pair.getFirst() != null) {
+                        // 创建一个新的药水效果实例，使用原有的药水效果实例作为模板。
+                        // 然后将该药水效果添加到食用物品的实体上。
+                        if (timeBuffer > 1) {
+                            int time = pair.getFirst().getDuration() * timeBuffer;
+                            int lv = pair.getFirst().getAmplifier();
+                            p_21066_.addEffect(new MobEffectInstance(pair.getFirst().getEffect(),time,lv));
+                            //如果时间倍率大于1，会将持续时间乘以倍率
+                        } else p_21066_.addEffect(new MobEffectInstance(pair.getFirst()));
+                    }
+                }
+                p_21066_.addEffect(new MobEffectInstance(MobEffects.HEAL,1));
+            }
+        }
+    }
+    public InteractionResult takeServing(BlockState state, Level level, BlockPos pos, Player player){
+        int bites = state.getValue(BITES);
+        if (bites < 8){
+            ItemUtils.givePlayerItem(player,new ItemStack(ImmortalersDelightItems.SCARLET_DEVILS_CAKE_SLICE.get()));
+            setBlock(bites + 1,state,level,pos);
+        }else {
+            level.destroyBlock(pos, false);
+            vectorwing.farmersdelight.common.utility.ItemUtils.spawnItemEntity(level,
+                    new ItemStack(Items.BOWL),pos.getX() + 0.5,pos.getY() + 0.5,pos.getZ() + 0.5,0.0,0.0,0.0);
+        }
+        level.playSound(null,pos, SoundEvents.WOOL_BREAK, SoundSource.PLAYERS, 0.8F, 0.8F);
+        return InteractionResult.SUCCESS;
+    }
+
+    public void setBlock(int variate,BlockState state, Level level, BlockPos pos){
+        level.setBlock(pos, state.setValue(BITES, variate), 3);
+    }
+
+    @Override
+    public BlockState getStateForPlacement(BlockPlaceContext pContext) {
+        return this.defaultBlockState().setValue(FACING, pContext.getHorizontalDirection());
+    }
+
+    @Override
+    public BlockState updateShape(BlockState stateIn, Direction facing, BlockState facingState, LevelAccessor level, BlockPos currentPos, BlockPos facingPos) {
+        return facing == Direction.DOWN && !stateIn.canSurvive(level, currentPos) ? Blocks.AIR.defaultBlockState() : super.updateShape(stateIn, facing, facingState, level, currentPos, facingPos);
+    }
+
+    @Override
+    public boolean canSurvive(BlockState state, LevelReader level, BlockPos pos) {
+        return level.getBlockState(pos.below()).isSolid();
+    }
+
+    @Override
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
+        builder.add(BITES,FACING);
+    }
+}
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <annotationProcessing>\r\n      <profile name=\"Gradle Imported\" enabled=\"true\">\r\n        <outputRelativeToContentRoot value=\"true\" />\r\n        <processorPath useClasspath=\"false\">\r\n          <entry name=\"$PROJECT_DIR$/../../new/.gradle/caches/modules-2/files-2.1/org.spongepowered/mixin/0.8.5/6d1c8bf4c28e697f472a83bd6add76ec4951734/mixin-0.8.5-processor.jar\" />\r\n        </processorPath>\r\n        <module name=\"immortalers_delight.main\" />\r\n      </profile>\r\n    </annotationProcessing>\r\n    <bytecodeTargetLevel target=\"17\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	
+++ b/.idea/compiler.xml	
@@ -5,7 +5,7 @@
       <profile name="Gradle Imported" enabled="true">
         <outputRelativeToContentRoot value="true" />
         <processorPath useClasspath="false">
-          <entry name="$PROJECT_DIR$/../../new/.gradle/caches/modules-2/files-2.1/org.spongepowered/mixin/0.8.5/6d1c8bf4c28e697f472a83bd6add76ec4951734/mixin-0.8.5-processor.jar" />
+          <entry name="$USER_HOME$/.gradle/caches/modules-2/files-2.1/org.spongepowered/mixin/0.8.5/6d1c8bf4c28e697f472a83bd6add76ec4951734/mixin-0.8.5-processor.jar" />
         </processorPath>
         <module name="immortalers_delight.main" />
       </profile>
Index: src/main/resources/assets/immortalers_delight/lang/en_us.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"creativetab_immortalers_delight_tab\": \"Immortalers Delight\",\r\n  \"item.immortalers_delight.evolutcorn\": \"Evolutcorn\",\r\n  \"item.immortalers_delight.evolutcorn_grains\": \"Evolutcorn Grains\",\r\n  \"item.immortalers_delight.roast_evolutcorn_chops\": \"Roast Evolutcorn Chops\",\r\n  \"item.immortalers_delight.ancient_fiber\": \"Ancient Fiber\",\r\n  \"item.immortalers_delight.roast_evolutcorn\": \"Bake Corn\",\r\n  \"item.immortalers_delight.bowl_of_millenian_bamboo\": \"Bowl Of Millenian Bamboo\",\r\n  \"item.immortalers_delight.cretaceous_zea_ball\": \"Cretaceous Zea Ball\",\r\n  \"item.immortalers_delight.colorful_grilled_skewers\": \"Colorful Grilled Skewers\",\r\n  \"item.immortalers_delight.popolutcorn\": \"Popolutcorn\",\r\n  \"item.immortalers_delight.zea_pancake_slice\": \"Zea Pancake Slice\",\r\n  \"item.immortalers_delight.evolutcorn_pie_crust\": \"Evolutcorn Pie Crust\",\r\n  \"item.immortalers_delight.evolutcorn_beer\": \"Evolutcorn Beer\",\r\n  \"item.immortalers_delight.pearlip_pie_slice\": \"Pearlip Pie Slice\",\r\n  \"item.immortalers_delight.peatic_musa_salad\": \"Peatic Musa Salad\",\r\n  \"item.immortalers_delight.pearlip\": \"Pearlip\",\r\n  \"item.immortalers_delight.pearlip_shell\": \"Pearlip Shell\",\r\n  \"item.immortalers_delight.pearlipearl\": \"Pearlipearl\",\r\n  \"item.immortalers_delight.pearlip_pumpkin_pie\": \"Pearlip Pumpkin Pie\",\r\n  \"item.immortalers_delight.pearlipearl_tart\": \"Pearlipearl Tart\",\r\n  \"item.immortalers_delight.pearlip_milk_shake\": \"Pearlip Milk Shake\",\r\n  \"item.immortalers_delight.pearlip_jelly\": \"Earlip Jelly\",\r\n  \"item.immortalers_delight.pearlipearl_eggsteam\": \"Pearlipearl Eggsteam\",\r\n  \"item.immortalers_delight.himekaido_cuts\": \"Himekaido Cuts\",\r\n  \"item.immortalers_delight.himekaido_seed\": \"Himekaido Seed\",\r\n  \"item.immortalers_delight.rotten_flesh_cuts\": \"Rotten Flesh Cuts\",\r\n  \"item.immortalers_delight.himekaido_jelly\": \"Himekaido Jelly\",\r\n  \"item.immortalers_delight.yogurt\": \"Yogurt\",\r\n  \"item.immortalers_delight.himekaido\": \"Himekaido\",\r\n  \"item.immortalers_delight.baked_poisonous_potato\": \"Baked Poisonous Potato\",\r\n  \"item.immortalers_delight.braised_spider_eyes_in_gravy\": \"Bowl Of Braised Spider Eyes in Gravy\",\r\n  \"item.immortalers_delight.tartare_chicken\": \"Tartare Chicken\",\r\n  \"item.immortalers_delight.dipped_rotten_flesh\": \"Dipped Rotten Flesh\",\r\n  \"item.immortalers_delight.crispy_yogurt_rotten_flesh\": \"Crispy Yogurt Rotten Flesh\",\r\n  \"item.immortalers_delight.meaty_rotten_tomato_broth\": \"Meaty Rotten Tomato Broth\",\r\n  \"item.immortalers_delight.stuffed_poisonous_potato\": \"Stuffed Poisonous Potato\",\r\n  \"item.immortalers_delight.pufferfish_roll\": \"Pufferfish Roll\",\r\n  \"item.immortalers_delight.bowl_of_stewed_rotten_meat_in_clay_pot\": \"Bowl of Stewed Rotten Meat in Clay Pot\",\r\n  \"item.immortalers_delight.golden_himekaido\": \"Golden Himekaido\",\r\n  \"item.immortalers_delight.enchanted_golden_himekaido\": \"Enchanted Golden Himekaido\",\r\n  \"item.immortalers_delight.himekaido_yogurt_pie_slice\": \"Himekaido Yogurt Pie Slice\",\r\n  \"item.immortalers_delight.dreumk_wine\": \"Dreumk Wine\",\r\n  \"item.immortalers_delight.contains_tea_leisamboo\": \"Contains Tea Leisamboo\",\r\n  \"item.immortalers_delight.empty_bamboo_cup\": \"Empty Bamboo Cup\",\r\n  \"item.immortalers_delight.leisamboo_tea\": \"Leisamboo Tea\",\r\n  \"item.immortalers_delight.iced_black_tea\": \"Iced Black Tea\",\r\n  \"item.immortalers_delight.pearlipearl_milk_tea\": \"Pearlipearl Milk Tea\",\r\n  \"item.immortalers_delight.pearlipearl_milk_green\": \"Pearlipearl Milk Green\",\r\n  \"item.immortalers_delight.stove_black_tea\": \"Stove Black Tea\",\r\n  \"item.immortalers_delight.leaf_green_tea\": \"Leaf Green Tea\",\r\n  \"item.immortalers_delight.british_yellow_tea\": \"British Yellow Tea\",\r\n  \"item.immortalers_delight.leaf_tea\": \"Leaf Tea\",\r\n  \"item.immortalers_delight.pitcher_pod_petal\": \"Pitcher Pod Ppetal\",\r\n  \"item.immortalers_delight.kwat_wheat_seeds\": \"Kwat Wheat Seeds\",\r\n  \"item.immortalers_delight.kwat_wheat\": \"Kwat Wheat\",\r\n  \"item.immortalers_delight.golden_fabric\": \"Golden Fabric\",\r\n  \"item.immortalers_delight.golden_fabric_veil\": \"golden Fabric Veil\",\r\n  \"item.immortalers_delight.clear_water_vodka\": \"Clear Water Vodka\",\r\n  \"item.immortalers_delight.raw_sniffer_slice\": \"Raw Sniffer Slice\",\r\n  \"item.immortalers_delight.cooked_sniffer_slice\": \"Cooked Sniffer Slice\",\r\n  \"item.immortalers_delight.raw_sniffer_steak\": \"Raw Sniffer Steak\",\r\n  \"item.immortalers_delight.cooked_sniffer_steak\": \"Cooked Sniffer Steak\",\r\n  \"item.immortalers_delight.rotating_roast_meat\": \"Rotating Roast Meat\",\r\n  \"item.immortalers_delight.sniffer_hide\": \"Sniffer Hide\",\r\n  \"item.immortalers_delight.vulcan_coktail\": \"Vulcan Coktail\",\r\n  \"item.immortalers_delight.kwat_wheat_dough\": \"Kwat Wheat Dough\",\r\n  \"item.immortalers_delight.kwat_wheat_paste\": \"Kwat Wheat Paste\",\r\n  \"item.immortalers_delight.kwat_wheat_doufu\": \"Kwat Wheat Doufu\",\r\n  \"item.immortalers_delight.fry_kwat_wheat_doufu\": \"Fry Kwat Wheat Doufu\",\r\n  \"item.immortalers_delight.jade_and_ruby_soup\": \"Jade And Ruby Soup\",\r\n  \"item.immortalers_delight.kwat_wheat_toast\": \"Kwat Wheat Toast\",\r\n  \"item.immortalers_delight.kwat_wheat_toast_slice\": \"Kwat Wheat Toast Slice\",\r\n  \"item.immortalers_delight.nether_cream_soup\": \"Nether Cream Soup\",\r\n  \"item.immortalers_delight.nether_cream_bread\": \"Nether Cream Bread\",\r\n  \"item.immortalers_delight.himekaido_boat\": \"Himekaido Boat\",\r\n  \"item.immortalers_delight.himekaido_chest_boat\": \"Himekaido Boat with Chest\",\r\n  \"item.immortalers_delight.torchflower_mustard\": \"Torchflower Mustard\",\r\n  \"item.immortalers_delight.hot_hi_soup\": \"Hot Hi Soup\",\r\n  \"item.immortalers_delight.incandescence_sushi\": \"Incandescence Sushi\",\r\n  \"item.immortalers_delight.torchflower_cookie\": \"Torchflower Cookie\",\r\n  \"item.immortalers_delight.torchflower_cake\": \"Torchflower Cake\",\r\n  \"item.immortalers_delight.torchflower_curry_rice\": \"Torchflower Curry Rice\",\r\n  \"item.immortalers_delight.extra_spicy_pasta\": \"Extra Spicy Pasta\",\r\n  \"block.immortalers_delight.himekaido_log\": \"Himekaido Log\",\r\n  \"block.immortalers_delight.stripped_himekaido_log\": \"Stripped Himekaido Log\",\r\n  \"block.immortalers_delight.himekaido_wood\": \"Himekaido Wood\",\r\n  \"block.immortalers_delight.stripped_himekaido_wood\": \"Stripped Himekaido Wood\",\r\n  \"block.immortalers_delight.himekaido_planks\": \"Himekaido Planks\",\r\n  \"block.immortalers_delight.himekaido_stairs\": \"Himekaido Stair\",\r\n  \"block.immortalers_delight.himekaido_slab\": \"Himekaido Slab\",\r\n  \"block.immortalers_delight.himekaido_door\": \"Himekaido Door\",\r\n  \"block.immortalers_delight.himekaido_trapdoor\": \"Himekaido Trapdoor\",\r\n  \"block.immortalers_delight.himekaido_fence\": \"Himekaido Fence\",\r\n  \"block.immortalers_delight.himekaido_fence_gate\": \"Himekaido Fence Gate\",\r\n  \"block.immortalers_delight.himekaido_cabinet\": \"Himekaido Cabinet\",\r\n  \"block.immortalers_delight.himekaido_pressure_plate\": \"Himekaido Pressure Plate\",\r\n  \"block.immortalers_delight.himekaido_button\": \"Himekaido Button\",\r\n  \"block.immortalers_delight.himekaido_sign\": \"Himekaido Sign\",\r\n  \"block.immortalers_delight.himekaido_hanging_sign\": \"Himekaido Hanging Sign\",\r\n  \"block.immortalers_delight.leisamboo_planks\": \"Leisamboo Planks\",\r\n  \"block.immortalers_delight.leisamboo_stairs\": \"Leisamboo Stair\",\r\n  \"block.immortalers_delight.leisamboo_slab\": \"Leisamboo Slab\",\r\n  \"block.immortalers_delight.leisamboo_door\": \"Leisamboo Door\",\r\n  \"block.immortalers_delight.leisamboo_trapdoor\": \"Leisamboo Trapdoor\",\r\n  \"block.immortalers_delight.leisamboo_fence\": \"Leisamboo Fence\",\r\n  \"block.immortalers_delight.leisamboo_fence_gate\": \"Leisamboo Fence Gate\",\r\n  \"block.immortalers_delight.leisamboo_cabinet\": \"Leisamboo Cabinet\",\r\n  \"block.immortalers_delight.leisamboo_pressure_plate\": \"Leisamboo Pressure Plate\",\r\n  \"block.immortalers_delight.leisamboo_button\": \"Leisamboo Button\",\r\n  \"block.immortalers_delight.leisamboo_sign\": \"Leisamboo Sign\",\r\n  \"block.immortalers_delight.leisamboo_hanging_sign\": \"Leisamboo Hanging Sign\",\r\n  \"block.immortalers_delight.evolutcorn\": \"Evolutcorn\",\r\n  \"block.immortalers_delight.zea_pancake\": \"Zea Pancake\",\r\n  \"block.immortalers_delight.pearlip_pie\": \"Pearlip Pie\",\r\n  \"block.immortalers_delight.millenian_bamboo\": \"Millenian Bamboo\",\r\n  \"block.immortalers_delight.himekaido_leaves\": \"Himekaido Leaves\",\r\n  \"block.immortalers_delight.himekaido_fruited_leaves\": \"Himekaido Fruited Leaves\",\r\n  \"block.immortalers_delight.himekaido_flowering_leaves\": \"Himekaido Flowering Leaves\",\r\n  \"block.immortalers_delight.himekaido_shrub\": \"Himekaido Shrub\",\r\n  \"block.immortalers_delight.stewed_rotten_meat_pot\": \"Stewed Rotten Meat Pot\",\r\n  \"block.immortalers_delight.braised_spider_eyes_block\": \"Braised Spider Eyes in Gravy\",\r\n  \"block.immortalers_delight.spoon_block.tips.1\": \"You need a bowl to eat it.\",\r\n  \"block.immortalers_delight.evolutcorn_grain_bag\": \"Evolutcorn Grains Bag\",\r\n  \"block.immortalers_delight.himekaido_crate\": \"Himekaido Crate\",\r\n  \"block.immortalers_delight.pearlip_crate\": \"Pearlip Crate\",\r\n  \"block.immortalers_delight.evolutcorn_block\": \"Evolutcorn Block\",\r\n  \"block.immortalers_delight.enchantal_cooler\": \"Enchantal Cooler\",\r\n  \"block.immortalers_delight.leisamboo_stalk\": \"Leisamboo\",\r\n  \"block.immortalers_delight.leisamboo_crop\": \"Leisamboo\",\r\n  \"block.immortalers_delight.himekaido_yogurt_pie\": \"Himekaido Yogurt Pie\",\r\n  \"block.immortalers_delight.kwat_wheat\": \"Kwat Wheat\",\r\n  \"block.immortalers_delight.nether_bread_cream_soup\": \"Nether Bread Cream Soup\",\r\n  \"entity.immortalers_delight.immortal_chest_boat\": \"Boat with Chest\",\r\n  \"effect.immortalers_delight.incandescence\": \"Incandescence\",\r\n  \"effect.immortalers_delight.weak_poison\": \"Weak Poison\",\r\n  \"effect.immortalers_delight.weak_wither\": \"Weak Wither\",\r\n  \"effect.immortalers_delight.relieve_poison\": \"Relieve Poison\",\r\n  \"effect.immortalers_delight.resistance_to_undead\": \"Resistance to Undead\",\r\n  \"effect.immortalers_delight.resistance_to_arthropod\": \"Resistance to Arthropod\",\r\n  \"effect.immortalers_delight.resistance_to_abyssal\": \"Resistance to Abyssal\",\r\n  \"effect.immortalers_delight.resistance_to_illager\": \"Resistance to Illager\",\r\n  \"effect.immortalers_delight.magical_reverse\": \"Magical Reverse\",\r\n  \"effect.immortalers_delight.gas_poison\": \"Gas Poison\",\r\n  \"effect.immortalers_delight.inebriated\": \"Inebriated\",\r\n  \"effect.immortalers_delight.keep_a_fast\": \"Keep a Fast\",\r\n  \"effect.immortalers_delight.burn_the_boats\": \"Burn The Boats\",\r\n  \"effect.immortalers_delight.cultural_legacy\": \"Cultural Legacy\",\r\n  \"effect.immortalers_delight.warm_current_surges\": \"Warm Current Surges\",\r\n  \"effect.immortalers_delight.resistance_to_surroundings\": \"Mellow\",\r\n  \"advancements.immortalers_delight.immortalers_delight.title\": \"Immortalers Delight\",\r\n  \"advancements.immortalers_delight.immortalers_delight.descr\": \"An ancient taste, waiting to be unearthed.\",\r\n  \"advancements.immortalers_delight.it_is_more_unusual_than_unusual_food_s_delight.title\": \"Stranger than Unusual food's Delight\",\r\n  \"advancements.immortalers_delight.it_is_more_unusual_than_unusual_food_s_delight.descr\": \"So immortalers delight is the strangest meaning of delight through the ages?\",\r\n  \"advancements.immortalers_delight.ealdaec_gemhus.title\": \"Ealdæc Gemhūs\",\r\n  \"advancements.immortalers_delight.ealdaec_gemhus.descr\": \"Get the ancient seeds from the plains\",\r\n  \"advancements.immortalers_delight.treow_meregrot.title\": \"Trēow Meregrot\",\r\n  \"advancements.immortalers_delight.treow_meregrot.descr\": \"Get a black jewel from the jungle\",\r\n  \"advancements.immortalers_delight.wundor_forbodaeppel.title\": \"Wundor Forbodæppel\",\r\n  \"advancements.immortalers_delight.wundor_forbodaeppel.descr\": \"Get the miracle seed from the forest\",\r\n  \"advancement.immortalers_delight.get_himekaido_trees\": \"Spryt teon tō helpe hīe growan\",\r\n  \"advancement.immortalers_delight.get_himekaido_trees.desc\": \"Fertile land, extra fertilizers —— there is always a sacrifice to be made when pursuing excellence.\",\r\n  \"advancement.immortalers_delight.get_stewed_rotten_meat_pot\": \"Bewaria þīne clǽne\",\r\n  \"advancement.immortalers_delight.get_stewed_rotten_meat_pot.desc\": \"Although the patterns are beautiful, when it comes to tableware, cleanliness is of greater importance.\",\r\n  \"advancements.immortalers_delight.crimson_clouds.title\": \"Crimson Clouds\",\r\n  \"advancements.immortalers_delight.crimson_clouds.descr\": \"Unusual wheat seeds in Crimson Forest.\",\r\n  \"advancements.immortalers_delight.ice_extract.title\": \"Ice Extract\",\r\n  \"advancements.immortalers_delight.ice_extract.descr\": \"Get Enchantal Cooler.\",\r\n  \"advancements.immortalers_delight.the_eternal_flow.title\": \"The Eternal Flow\",\r\n  \"advancements.immortalers_delight.the_eternal_flow.descr\": \"Get Contains Tea Leisamboo at the Biver.\",\r\n  \"container.enchantal_cooler\": \"Enchantal Cooler\",\r\n  \"potion.potency.4\": \"V\",\r\n  \"potion.potency.5\": \"VI\",\r\n  \"potion.potency.6\": \"VII\",\r\n  \"potion.potency.7\": \"VIII\",\r\n  \"potion.potency.8\": \"IX\",\r\n  \"potion.potency.9\": \"X\",\r\n  \"farmersdelight.tooltip.golden_himekaido\": \"After consumption, immunizes and reverses harmful effects below grade II\",\r\n  \"farmersdelight.tooltip.enchanted_golden_himekaido\": \"Within 1 second after consumption, be immune to harmful effects below level V (including instant effects).\",\r\n  \"farmersdelight.tooltip.golden_fabric\": \"Made a veil to protect against the burning dust and haze\",\r\n  \"effect.immortalers_delight.incandescence.description\": \"Strength effects can be obtained or prolonged while eating.\",\r\n  \"effect.immortalers_delight.weak_poison.description\": \"Less damaging poisons that do less damage and do not reduce health below 50%. Every 40tick gives 1 magic damage, doubles the damage of each level, stops damage when the health is less than 50% of the maximum health, and the damage does not make the health less than 50%.\",\r\n  \"effect.immortalers_delight.weak_wither.description\": \"Less harmful decay, less damage and no death. Gives 1 blight damage every 50 ticks, doubles each level, stops damage when health is less than 1, and does not make health less than 1.\",\r\n  \"effect.immortalers_delight.relieve_poison.description\": \"Dissolves the toxic effects of lower levels, turning lower levels of decay into weak decay.\",\r\n  \"effect.immortalers_delight.resistance_to_undead.description\": \"Reduced damage caused by undead creatures, about 25% per level, not 100%\",\r\n  \"effect.immortalers_delight.resistance_to_arthropod.description\": \"Reduced damage caused by arthropod creatures, the proportion of damage reduction is about 25% per level, not 100%. Corresponding to Arthropod Killer: Damage taken by arthropod creatures spawners a short Speed IV effect.\",\r\n  \"effect.immortalers_delight.resistance_to_abyssal.description\": \"Reduced damage caused by aquatic organisms, the proportion of damage reduction is about 25% per level, not 100%. A short period of underwater breathing is derived when damaged by aquatic organisms.\",\r\n  \"effect.immortalers_delight.resistance_to_illager.description\": \"Relief of damage caused by disaster villagers, the proportion of damage reduction of about 25% per level, will not reach 100%.\\nDid you know: the peeved ghost does not belong to the villagers, although it will not be accidentally injured by the villagers\",\r\n  \"effect.immortalers_delight.magical_reverse.description\": \"Remove and attempt to reverse negative effects of a lower rank (reverses only apply to original and Farmer's Delight effects). The duration will not be extended.\",\r\n  \"effect.immortalers_delight.gas_poison.description\": \"Cannot be removed by milk. Every 32tick forces a 6% Max Health reduction, randomly spawns one of the following effects per second: blindness, nausea, weakness, slowness, hunger. The derived effect cannot be reversed by milk. Damage to monsters is limited to 1.2 per attack.\",\r\n  \"effect.immortalers_delight.inebriated.description\": \"Cannot be removed by milk. This parameter does not take effect when the duration is less than 3 minutes. Deal true damage of 8% Max health per 64tick, which does not stop damage below 8% health and stops damage when creatures fall below 8% health. All of the following effects: blindness, nausea, weakness, slowness, poisoning. The derived effect cannot be reversed by milk. Damage to monsters is limited to 1.6 per attack.\\nDid you know: drinking to get this effect will add up the time of the effect rather than taking the longest, please moderate alcohol consumption.\",\r\n  \"effect.immortalers_delight.keep_a_fast.description\": \"When this effect is achieved, the player's hunger is reduced to half of the original value, and the cost of hunger is reduced to one-tenth of [effect level +1] during its duration (similar to Stamina enchantment, does not affect actions such as regenerating health). Restores (doubles) the player's hunger at the end of the effect, and the spilled hunger is reclaimed to immediately restore the player's life, the percentage of the recovery increases with the effect level.\",\r\n  \"effect.immortalers_delight.burn_the_boats.description\": \"Grant Power III, Speed III, Urgency III, Jump III, and Resistance III for 15 seconds when health falls below a certain percentage. Causes the health bar to be partially covered with shields and flaming swords, and the covered part marks the health that triggers the effect.\",\r\n  \"effect.immortalers_delight.cultural_legacy.description\": \"Increase the Enchantment level of the Enchantment table when near the Enchantment Table, and gain a certain amount of experience at the end of the effect.\\nIt must take effect within the detection range of the bookshelf attached to the magic table, and the detection is about once every 4 seconds. A level 1 effect increases the enchantment level by 8 levels, and then each level increases the enchantment level by 4 levels, with a maximum effect of 8 levels, that is, a maximum of 36 enchantment levels.\\n\\nThis effect also allows the first and second enchantment options of the Enchanted table to reach level 30 (4 effects are required, Level 2 effects only allow the second enchantment to reach level 30), making it possible to consume level 2 or even level 1 for level 30 enchantment.\",\r\n  \"effect.immortalers_delight.warm_current_surges.description\": \"Warm Current Surges\",\r\n  \"death.attack.drunk\": \"%1$s Drunk on the asphalt\",\r\n  \"death.attack.drunk.item\": \"%1$s was killed by %2$s using %3$s\",\r\n  \"death.attack.drunk.player\": \"%1$ died whilst trying to escap %2$s\",\r\n  \"death.attack.gas\": \"%1$s It was gassed and turned into bacon\",\r\n  \"death.attack.gas.item\": \"%1$s was killed by %2$s using %3$s\",\r\n  \"death.attack.gas.player\": \"%1$ died whilst trying to escap %2$s\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/immortalers_delight/lang/en_us.json b/src/main/resources/assets/immortalers_delight/lang/en_us.json
--- a/src/main/resources/assets/immortalers_delight/lang/en_us.json	
+++ b/src/main/resources/assets/immortalers_delight/lang/en_us.json	
@@ -82,6 +82,12 @@
   "item.immortalers_delight.torchflower_cake": "Torchflower Cake",
   "item.immortalers_delight.torchflower_curry_rice": "Torchflower Curry Rice",
   "item.immortalers_delight.extra_spicy_pasta": "Extra Spicy Pasta",
+  "item.immortalers_delight.elixir_of_immortality": "Elixir of Immortality",
+  "item.immortalers_delight.pale_dew_wine": "Pale Dew Wine",
+  "item.immortalers_delight.scarlet_devils_cake": "Scarlet Devil's Cake",
+  "item.immortalers_delight.scarlet_devils_cake_slice": "Slice of Scarlet Devil's Cake",
+  "item.immortalers_delight.red_stuffed_bun": "Red Stuffed Bun",
+  "item.immortalers_delight.spicy_pudding": "Spicy Pudding",
   "block.immortalers_delight.himekaido_log": "Himekaido Log",
   "block.immortalers_delight.stripped_himekaido_log": "Stripped Himekaido Log",
   "block.immortalers_delight.himekaido_wood": "Himekaido Wood",
@@ -131,6 +137,7 @@
   "block.immortalers_delight.himekaido_yogurt_pie": "Himekaido Yogurt Pie",
   "block.immortalers_delight.kwat_wheat": "Kwat Wheat",
   "block.immortalers_delight.nether_bread_cream_soup": "Nether Bread Cream Soup",
+  "block.immortalers_delight.scarlet_devils_cake": "Scarlet Devil's Cake",
   "entity.immortalers_delight.immortal_chest_boat": "Boat with Chest",
   "effect.immortalers_delight.incandescence": "Incandescence",
   "effect.immortalers_delight.weak_poison": "Weak Poison",
@@ -175,6 +182,7 @@
   "potion.potency.7": "VIII",
   "potion.potency.8": "IX",
   "potion.potency.9": "X",
+  "farmersdelight.tooltip.elixir_of_immortality": "[One and Only]It can only be used once in each game. After that, the effect will deteriorate if it is used again.",
   "farmersdelight.tooltip.golden_himekaido": "After consumption, immunizes and reverses harmful effects below grade II",
   "farmersdelight.tooltip.enchanted_golden_himekaido": "Within 1 second after consumption, be immune to harmful effects below level V (including instant effects).",
   "farmersdelight.tooltip.golden_fabric": "Made a veil to protect against the burning dust and haze",
