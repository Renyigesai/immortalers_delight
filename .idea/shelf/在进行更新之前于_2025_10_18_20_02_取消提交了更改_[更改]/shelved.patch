Index: src/main/java/com/renyigesai/immortalers_delight/ImmortalersDelightMod.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight;\r\n\r\nimport com.mojang.logging.LogUtils;\r\nimport com.renyigesai.immortalers_delight.client.model.*;\r\nimport com.renyigesai.immortalers_delight.client.renderer.entity.*;\r\nimport com.renyigesai.immortalers_delight.client.renderer.AncientStoveBlockEntityRenderer;\r\nimport com.renyigesai.immortalers_delight.client.renderer.ImmortalersBoatRenderer;\r\nimport com.renyigesai.immortalers_delight.client.renderer.ImmortalersDelightHangingSignRenderer;\r\nimport com.renyigesai.immortalers_delight.client.renderer.ImmortalersDelightSignRenderer;\r\nimport com.renyigesai.immortalers_delight.entities.living.TerracottaGolem;\r\nimport com.renyigesai.immortalers_delight.init.*;\r\nimport com.renyigesai.immortalers_delight.message.TerracottaGolemMessage;\r\nimport com.renyigesai.immortalers_delight.network.CommonProxy;\r\nimport com.renyigesai.immortalers_delight.network.ClientProxy;\r\nimport com.renyigesai.immortalers_delight.screen.EnchantalCoolerScreen;\r\nimport com.renyigesai.immortalers_delight.screen.TerracottaGolemScreen;\r\nimport com.renyigesai.immortalers_delight.screen.overlay.*;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.gui.screens.MenuScreens;\r\nimport net.minecraft.client.model.geom.ModelLayerLocation;\r\nimport net.minecraft.client.model.geom.builders.LayerDefinition;\r\nimport net.minecraft.client.renderer.ItemBlockRenderTypes;\r\nimport net.minecraft.client.renderer.RenderType;\r\nimport net.minecraft.client.renderer.entity.EntityRenderers;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.server.level.ServerPlayer;\r\nimport net.minecraft.world.entity.EntityType;\r\nimport net.minecraft.world.level.block.Blocks;\r\nimport net.minecraftforge.api.distmarker.Dist;\r\nimport net.minecraftforge.client.event.EntityRenderersEvent;\r\nimport net.minecraftforge.common.MinecraftForge;\r\nimport net.minecraftforge.event.server.ServerStartingEvent;\r\nimport net.minecraftforge.eventbus.api.IEventBus;\r\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\r\nimport net.minecraftforge.fml.DistExecutor;\r\nimport net.minecraftforge.fml.ModLoadingContext;\r\nimport net.minecraftforge.fml.common.Mod;\r\nimport net.minecraftforge.fml.config.ModConfig;\r\nimport net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;\r\nimport net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;\r\nimport net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\r\nimport net.minecraftforge.network.NetworkDirection;\r\nimport net.minecraftforge.network.NetworkRegistry;\r\nimport net.minecraftforge.network.simple.SimpleChannel;\r\nimport net.minecraftforge.registries.ForgeRegistries;\r\nimport net.minecraftforge.server.ServerLifecycleHooks;\r\nimport org.slf4j.Logger;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.function.Supplier;\r\n\r\n// The value here should match an entry in the META-INF/mods.toml file\r\n@Mod(ImmortalersDelightMod.MODID)\r\npublic class ImmortalersDelightMod {\r\n\r\n    public static final String MODID = \"immortalers_delight\";\r\n    public static final Logger LOGGER = LogUtils.getLogger();\r\n\r\n    private static final String PROTOCOL_VERSION = Integer.toString(1);\r\n    public static final SimpleChannel NETWORK_WRAPPER;\r\n    public static CommonProxy PROXY = DistExecutor.safeRunForDist(() -> ClientProxy::new, () -> CommonProxy::new);\r\n    private static int packetsRegistered;\r\n\r\n    static {\r\n        NetworkRegistry.ChannelBuilder channel = NetworkRegistry.ChannelBuilder.named(new ResourceLocation(MODID, \"main_channel\"));\r\n        String version = PROTOCOL_VERSION;\r\n        version.getClass();\r\n        channel = channel.clientAcceptedVersions(version::equals);\r\n        version = PROTOCOL_VERSION;\r\n        version.getClass();\r\n        NETWORK_WRAPPER = channel.serverAcceptedVersions(version::equals).networkProtocolVersion(() -> {\r\n            return PROTOCOL_VERSION;\r\n        }).simpleChannel();\r\n    }\r\n    public ImmortalersDelightMod() {\r\n        MinecraftForge.EVENT_BUS.register(this);\r\n        IEventBus bus = FMLJavaModLoadingContext.get().getModEventBus();\r\n\r\n        ImmortalersDelightItems.REGISTER.register(bus);\r\n        ImmortalersDelightBlocks.register(bus);\r\n        ImmortalersDelightBlockEntityTypes.TILES.register(bus);\r\n        ImmortalersDelightBlocks.BLOCK_ENTITY_REGISTRY.register(bus);\r\n        ImmortalersDelightGroup.CREATIVE_TABS.register(bus);\r\n        ImmortalersDelightMobEffect.REGISTRY.register(bus);\r\n        ImmortalersDelightParticleTypes.REGISTRY.register(bus);\r\n        ImmortalersDelightMenuTypes.MENUS.register(FMLJavaModLoadingContext.get().getModEventBus());\r\n\r\n        ImmortalersDelightEntities.ENTITY_TYPES.register(bus);\r\n\r\n        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Config.SPEC);\r\n    }\r\n\r\n\r\n    public static <MSG> void sendMSGToServer(MSG message) {\r\n        NETWORK_WRAPPER.sendToServer(message);\r\n    }\r\n\r\n    public static <MSG> void sendMSGToAll(MSG message) {\r\n        for (ServerPlayer player : ServerLifecycleHooks.getCurrentServer().getPlayerList().getPlayers()) {\r\n            sendNonLocal(message, player);\r\n        }\r\n    }\r\n\r\n    public static <MSG> void sendNonLocal(MSG msg, ServerPlayer player) {\r\n        NETWORK_WRAPPER.sendTo(msg, player.connection.connection, NetworkDirection.PLAY_TO_CLIENT);\r\n    }\r\n    @Mod.EventBusSubscriber(modid = MODID, bus = Mod.EventBusSubscriber.Bus.MOD)\r\n    public static class CommonModSetup {\r\n\r\n        @SubscribeEvent\r\n        public void commonSetup(final FMLCommonSetupEvent event) {\r\n            // Some common setup code\r\n            LOGGER.info(\"IMMORTALERS DELIGHT SETUP\");\r\n//        LOGGER.info(\"DIRT BLOCK >> {}\", ForgeRegistries.BLOCKS.getKey(Blocks.DIRT));\r\n//\r\n//        if (Config.logDirtBlock) LOGGER.info(\"DIRT BLOCK >> {}\", ForgeRegistries.BLOCKS.getKey(Blocks.DIRT));\r\n//\r\n//        LOGGER.info(Config.magicNumberIntroduction + Config.magicNumber);\r\n//\r\n//        Config.items.forEach((item) -> LOGGER.info(\"ITEM >> {}\", item.toString()));\r\n\r\n            NETWORK_WRAPPER.registerMessage(packetsRegistered++,\r\n                    TerracottaGolemMessage.class,\r\n                    TerracottaGolemMessage::write,\r\n                    TerracottaGolemMessage::read,\r\n                    TerracottaGolemMessage.Handler::handle\r\n            );\r\n\r\n        }\r\n    }\r\n    @SubscribeEvent\r\n    public void onServerStarting(ServerStartingEvent event) {\r\n        // Do something when the server starts\r\n        LOGGER.info(\"HELLO from server starting\");\r\n    }\r\n\r\n    // You can use EventBusSubscriber to automatically register all static methods in the class annotated with @SubscribeEvent\r\n    @Mod.EventBusSubscriber(modid = MODID, bus = Mod.EventBusSubscriber.Bus.MOD, value = Dist.CLIENT)\r\n    public static class ClientModEvents {\r\n        private static final Map<ModelLayerLocation, Supplier<LayerDefinition>> modelLayers = new HashMap<>();\r\n        @SubscribeEvent\r\n        public static void registerModelLayerListener(EntityRenderersEvent.RegisterLayerDefinitions event) {\r\n            modelLayers.put(SkelverfishBomberModel.SKELVERFISH_BOMBER, SkelverfishBomberModel::createBodyLayer);\r\n            modelLayers.put(SkelverfishThrasherModel.SKELVERFISH_THRASHER, SkelverfishThrasherModel::createBodyLayer);\r\n            modelLayers.put(StrangeArmourStandModel.STRANGE_ARMOUR_STAND, StrangeArmourStandModel::createBodyLayer);\r\n            modelLayers.put(TerracottaGolemModel.TERRACOTTA_GOLEM, TerracottaGolemModel::createBodyLayer);\r\n            modelLayers.put(AncientWoodBoatModel.ANCIENT_BOAT, AncientWoodBoatModel::createBodyLayer);\r\n            modelLayers.put(AncientWoodChestBoatModel.ANCIENT_CHEST_BOAT, AncientWoodChestBoatModel::createBodyLayer);\r\n            modelLayers.put(ScavengerModel.SCARVENGER_MODEL, ScavengerModel::createBodyLayer);\r\n\r\n            for (Map.Entry<ModelLayerLocation, Supplier<LayerDefinition>> entry : modelLayers.entrySet()) {\r\n                event.registerLayerDefinition(entry.getKey(), entry.getValue());\r\n            }\r\n        }\r\n\r\n        @SubscribeEvent\r\n        public static void onRegisterRenderers(EntityRenderersEvent.RegisterRenderers event) {\r\n            event.registerBlockEntityRenderer(ImmortalersDelightBlockEntityTypes.SIGN.get(), ImmortalersDelightSignRenderer::new);\r\n            event.registerBlockEntityRenderer(ImmortalersDelightBlockEntityTypes.HANGING_SIGN.get(), ImmortalersDelightHangingSignRenderer::new);\r\n            event.registerBlockEntityRenderer(ImmortalersDelightBlocks.ANCIENT_STOVE_ENTITY.get(), AncientStoveBlockEntityRenderer::new);\r\n\r\n            event.registerEntityRenderer(ImmortalersDelightEntities.SKELVERFISH_AMBUSHER.get(), SkelverfishRenderer::new);\r\n            event.registerEntityRenderer(ImmortalersDelightEntities.SKELVERFISH_BOMBER.get(), SkelverfishBomberRenderer::new);\r\n            event.registerEntityRenderer(ImmortalersDelightEntities.SKELVERFISH_THRASHER.get(), SkelverfishThrasherRenderer::new);\r\n            event.registerEntityRenderer(ImmortalersDelightEntities.STRANGE_ARMOUR_STAND.get(), StrangeArmourStandRenderer::new);\r\n            event.registerEntityRenderer(ImmortalersDelightEntities.SCAVENGER.get(), ScavengerRenderer::new);\r\n            event.registerEntityRenderer(ImmortalersDelightEntities.TERRACOTTA_GOLEM.get(), TerracottaGolemRenderer::new);\r\n\r\n\r\n        }\r\n\r\n        @SubscribeEvent\r\n        public static void onClientSetup(FMLClientSetupEvent event) {\r\n            EntityRenderers.register(ImmortalersDelightEntities.IMMORTAL_BOAT.get(), pContext -> new ImmortalersBoatRenderer(pContext, false));\r\n            EntityRenderers.register(ImmortalersDelightEntities.ANCIENT_WOOD_BOAT.get(), pContext -> new AncientWoodBoatRenderer(pContext, false));\r\n            EntityRenderers.register(ImmortalersDelightEntities.IMMORTAL_CHEST_BOAT.get(), pContext -> new ImmortalersBoatRenderer(pContext, true));\r\n            EntityRenderers.register(ImmortalersDelightEntities.ANCIENT_WOOD_CHEST_BOAT.get(), pContext -> new AncientWoodBoatRenderer(pContext, true));\r\n            ItemBlockRenderTypes.setRenderLayer(ImmortalersDelightBlocks.LEISAMBOO_DOOR.get(), RenderType.cutout());\r\n            MenuScreens.register(ImmortalersDelightMenuTypes.ENCHANTAL_COOLER_MENU.get(), EnchantalCoolerScreen::new);\r\n            // 注册UI界面\r\n            MenuScreens.register(ImmortalersDelightMenuTypes.TERRACOTTA_GOLEM_MENU.get(), TerracottaGolemScreen::new);\r\n            // Some client setup code\r\n            LOGGER.info(\"HELLO FROM CLIENT SETUP\");\r\n            LOGGER.info(\"MINECRAFT NAME >> {}\", Minecraft.getInstance().getUser().getName());\r\n            WeakWitherHealthOverlay.init();\r\n            WeakPoisonHealthOverlay.init();\r\n            AftertasteHungerOverlay.init();\r\n            KeepFastHungerOverlay.init();\r\n            BurnTheBoatsHealthOverlay.init();\r\n        }\r\n    }\r\n\r\n    public static ResourceLocation prefix(String name) {\r\n        return new ResourceLocation(MODID, name.toLowerCase(Locale.ROOT));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/ImmortalersDelightMod.java b/src/main/java/com/renyigesai/immortalers_delight/ImmortalersDelightMod.java
--- a/src/main/java/com/renyigesai/immortalers_delight/ImmortalersDelightMod.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/ImmortalersDelightMod.java	(date 1758339722812)
@@ -9,6 +9,7 @@
 import com.renyigesai.immortalers_delight.client.renderer.ImmortalersDelightSignRenderer;
 import com.renyigesai.immortalers_delight.entities.living.TerracottaGolem;
 import com.renyigesai.immortalers_delight.init.*;
+import com.renyigesai.immortalers_delight.item.RepeatingCrossbowItem;
 import com.renyigesai.immortalers_delight.message.TerracottaGolemMessage;
 import com.renyigesai.immortalers_delight.network.CommonProxy;
 import com.renyigesai.immortalers_delight.network.ClientProxy;
@@ -17,14 +18,18 @@
 import com.renyigesai.immortalers_delight.screen.overlay.*;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.screens.MenuScreens;
+import net.minecraft.client.model.IllagerModel;
 import net.minecraft.client.model.geom.ModelLayerLocation;
 import net.minecraft.client.model.geom.builders.LayerDefinition;
 import net.minecraft.client.renderer.ItemBlockRenderTypes;
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.client.renderer.entity.EntityRenderers;
+import net.minecraft.client.renderer.item.ItemProperties;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.item.CrossbowItem;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.client.event.EntityRenderersEvent;
@@ -146,9 +151,11 @@
             modelLayers.put(SkelverfishThrasherModel.SKELVERFISH_THRASHER, SkelverfishThrasherModel::createBodyLayer);
             modelLayers.put(StrangeArmourStandModel.STRANGE_ARMOUR_STAND, StrangeArmourStandModel::createBodyLayer);
             modelLayers.put(TerracottaGolemModel.TERRACOTTA_GOLEM, TerracottaGolemModel::createBodyLayer);
+            modelLayers.put(TerracottaGolemSideModel.TERRACOTTA_GOLEM_SIDE_LAYER, TerracottaGolemSideModel::createBodyLayer);
             modelLayers.put(AncientWoodBoatModel.ANCIENT_BOAT, AncientWoodBoatModel::createBodyLayer);
             modelLayers.put(AncientWoodChestBoatModel.ANCIENT_CHEST_BOAT, AncientWoodChestBoatModel::createBodyLayer);
-            modelLayers.put(ScavengerModel.SCARVENGER_MODEL, ScavengerModel::createBodyLayer);
+            //modelLayers.put(ScavengerModel.SCARVENGER_MODEL, ScavengerModel::createBodyLayer);
+            modelLayers.put(ScavengerModel.SCARVENGER_MODEL, IllagerModel::createBodyLayer);
 
             for (Map.Entry<ModelLayerLocation, Supplier<LayerDefinition>> entry : modelLayers.entrySet()) {
                 event.registerLayerDefinition(entry.getKey(), entry.getValue());
@@ -181,6 +188,8 @@
             MenuScreens.register(ImmortalersDelightMenuTypes.ENCHANTAL_COOLER_MENU.get(), EnchantalCoolerScreen::new);
             // 注册UI界面
             MenuScreens.register(ImmortalersDelightMenuTypes.TERRACOTTA_GOLEM_MENU.get(), TerracottaGolemScreen::new);
+
+            registerItemProperties();
             // Some client setup code
             LOGGER.info("HELLO FROM CLIENT SETUP");
             LOGGER.info("MINECRAFT NAME >> {}", Minecraft.getInstance().getUser().getName());
@@ -190,6 +199,26 @@
             KeepFastHungerOverlay.init();
             BurnTheBoatsHealthOverlay.init();
         }
+
+        public static void registerItemProperties() {
+            ItemProperties.register(ImmortalersDelightItems.REPEATING_CROSSBOW.get(), new ResourceLocation(MODID + "_" + "pull"), (stack, world, entity, seed) -> {
+                if (entity == null || entity.getUseItem() != stack) {
+                    return 0.0F;
+                } else {
+                    return RepeatingCrossbowItem.isModCharged(stack) ? 0.0F : (float)(stack.getUseDuration() - entity.getUseItemRemainingTicks()) / RepeatingCrossbowItem.getChargeDuration(stack);
+                }
+            });
+            ItemProperties.register(ImmortalersDelightItems.REPEATING_CROSSBOW.get(), new ResourceLocation(MODID + "_" + "pulling"), (stack, world, entity, seed) -> {
+                return entity != null && entity.isUsingItem() && entity.getUseItem() == stack && !RepeatingCrossbowItem.isModCharged(stack) ? 1.0F : 0.0F;
+            });
+            ItemProperties.register(ImmortalersDelightItems.REPEATING_CROSSBOW.get(), new ResourceLocation(MODID + "_" + "charged"), (stack, world, entity, seed) -> {
+                return RepeatingCrossbowItem.isModCharged(stack) ? 1.0F : 0.0F;
+            });
+            ItemProperties.register(ImmortalersDelightItems.REPEATING_CROSSBOW.get(), new ResourceLocation(MODID + "_" + "firework"), (stack, world, entity, seed) -> {
+                return RepeatingCrossbowItem.isModCharged(stack) && RepeatingCrossbowItem.containsChargedModProjectile(stack,Items.FIREWORK_ROCKET) ? 1.0F : 0.0F;
+            });
+
+        }
     }
 
     public static ResourceLocation prefix(String name) {
Index: src/main/java/com/renyigesai/immortalers_delight/recipe/ImmortalersDelightRecipeTypes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.recipe;\r\n\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport net.minecraft.world.item.crafting.RecipeSerializer;\r\nimport net.minecraft.world.item.crafting.RecipeType;\r\nimport net.minecraftforge.eventbus.api.IEventBus;\r\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\r\nimport net.minecraftforge.fml.common.Mod;\r\nimport net.minecraftforge.fml.event.lifecycle.FMLConstructModEvent;\r\nimport net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\r\nimport net.minecraftforge.registries.DeferredRegister;\r\nimport net.minecraftforge.registries.ForgeRegistries;\r\n\r\n@Mod.EventBusSubscriber(modid = ImmortalersDelightMod.MODID, bus = Mod.EventBusSubscriber.Bus.MOD)\r\npublic class ImmortalersDelightRecipeTypes {\r\n    public static final DeferredRegister<RecipeSerializer<?>> SERIALIZERS = DeferredRegister.create(ForgeRegistries.RECIPE_SERIALIZERS, ImmortalersDelightMod.MODID);\r\n    public static final DeferredRegister<RecipeType<?>> RECIPE_TYPE = DeferredRegister.create(ForgeRegistries.RECIPE_TYPES, ImmortalersDelightMod.MODID);\r\n\r\n    @SuppressWarnings(\"removal\")\r\n    @SubscribeEvent\r\n    public static void register(FMLConstructModEvent event) {\r\n        IEventBus bus = FMLJavaModLoadingContext.get().getModEventBus();\r\n        event.enqueueWork(() -> {\r\n            SERIALIZERS.register(bus);\r\n            RECIPE_TYPE.register(bus);\r\n\t\t\tSERIALIZERS.register(EnchantalCoolerRecipe.Type.ID,() ->EnchantalCoolerRecipe.Serializer.INSTANCE);\r\n\t\t\tRECIPE_TYPE.register(EnchantalCoolerRecipe.Type.ID,() ->EnchantalCoolerRecipe.Type.INSTANCE);\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/recipe/ImmortalersDelightRecipeTypes.java b/src/main/java/com/renyigesai/immortalers_delight/recipe/ImmortalersDelightRecipeTypes.java
--- a/src/main/java/com/renyigesai/immortalers_delight/recipe/ImmortalersDelightRecipeTypes.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/recipe/ImmortalersDelightRecipeTypes.java	(date 1760788923174)
@@ -1,6 +1,8 @@
 package com.renyigesai.immortalers_delight.recipe;
 
 import com.renyigesai.immortalers_delight.ImmortalersDelightMod;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.crafting.RecipeSerializer;
 import net.minecraft.world.item.crafting.RecipeType;
 import net.minecraftforge.eventbus.api.IEventBus;
@@ -10,12 +12,16 @@
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
 import net.minecraftforge.registries.DeferredRegister;
 import net.minecraftforge.registries.ForgeRegistries;
+import net.minecraftforge.registries.RegisterEvent;
 
 @Mod.EventBusSubscriber(modid = ImmortalersDelightMod.MODID, bus = Mod.EventBusSubscriber.Bus.MOD)
 public class ImmortalersDelightRecipeTypes {
     public static final DeferredRegister<RecipeSerializer<?>> SERIALIZERS = DeferredRegister.create(ForgeRegistries.RECIPE_SERIALIZERS, ImmortalersDelightMod.MODID);
     public static final DeferredRegister<RecipeType<?>> RECIPE_TYPE = DeferredRegister.create(ForgeRegistries.RECIPE_TYPES, ImmortalersDelightMod.MODID);
 
+    public static final DeferredRegister<RecipeSerializer<?>> KNIFE_POTION_SERIALIZERS = DeferredRegister.create(ForgeRegistries.RECIPE_SERIALIZERS, ImmortalersDelightMod.MODID);
+    public static final DeferredRegister<RecipeType<?>> KNIFE_POTION_RECIPE_TYPE = DeferredRegister.create(ForgeRegistries.RECIPE_TYPES, ImmortalersDelightMod.MODID);
+
     @SuppressWarnings("removal")
     @SubscribeEvent
     public static void register(FMLConstructModEvent event) {
@@ -25,6 +31,10 @@
             RECIPE_TYPE.register(bus);
 			SERIALIZERS.register(EnchantalCoolerRecipe.Type.ID,() ->EnchantalCoolerRecipe.Serializer.INSTANCE);
 			RECIPE_TYPE.register(EnchantalCoolerRecipe.Type.ID,() ->EnchantalCoolerRecipe.Type.INSTANCE);
+            KNIFE_POTION_SERIALIZERS.register(bus);
+            KNIFE_POTION_RECIPE_TYPE.register(bus);
+            KNIFE_POTION_SERIALIZERS.register(PillagerKnifeAddPotionRecipe.Type.ID,() ->PillagerKnifeAddPotionRecipe.Serializer.INSTANCE);
+            KNIFE_POTION_RECIPE_TYPE.register(PillagerKnifeAddPotionRecipe.Type.ID,() ->PillagerKnifeAddPotionRecipe.Type.INSTANCE);
         });
     }
 }
Index: src/main/resources/data/immortalers_delight/tags/items/tools/immortal_knifes.json
===================================================================
diff --git a/src/main/resources/data/immortalers_delight/tags/items/tools/immortal_knifes.json b/src/main/resources/data/immortalers_delight/tags/items/tools/immortal_knifes.json
deleted file mode 100644
--- a/src/main/resources/data/immortalers_delight/tags/items/tools/immortal_knifes.json	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ /dev/null	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
@@ -1,6 +0,0 @@
-{
-  "values": [
-    "immortalers_delight:rusty_ancient_blade",
-    "immortalers_delight:ancient_blade"
-  ]
-}
\ No newline at end of file
Index: src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightTags.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.init;\r\n\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport net.minecraft.core.registries.Registries;\r\nimport net.minecraft.tags.TagKey;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.level.biome.Biome;\r\nimport net.minecraft.world.level.block.Block;\r\n\r\npublic class ImmortalersDelightTags {\r\n    public static final TagKey<Biome> IS_CRIMSON_FOREST = createBiomeTag(\"is_crimson_forest\");\r\n\r\n    public static final TagKey<Item> ANCIENT_BOAT_NEED_1 = createItemTag(\"boat_needs/ancient_boat_need_1\");\r\n    public static final TagKey<Item> ANCIENT_BOAT_NEED_2 = createItemTag(\"boat_needs/ancient_boat_need_2\");\r\n    public static final TagKey<Item> ANCIENT_CHEST_BOAT_NEED_1 = createItemTag(\"boat_needs/ancient_chest_boat_need_1\");\r\n    public static final TagKey<Item> ANCIENT_CHEST_BOAT_NEED_2 = createItemTag(\"boat_needs/ancient_chest_boat_need_2\");\r\n    public static final TagKey<Item> IMMORTAL_KNIFES = createItemTag(\"tools/immortal_knifes\");\r\n    public static final TagKey<Block> MINEABLE_WITH_DRILL_ROD = createBlockTag(\"mineable/drill_rod\");\r\n\r\n    private static TagKey<Biome> createBiomeTag(String pName) {\r\n        return TagKey.create(Registries.BIOME, ImmortalersDelightMod.prefix(pName));\r\n    }\r\n\r\n    private static TagKey<Item> createItemTag(String pName) {\r\n        return TagKey.create(Registries.ITEM, ImmortalersDelightMod.prefix(pName));\r\n    }\r\n\r\n\r\n    private static TagKey<Block> createBlockTag(String pName) {\r\n        return TagKey.create(Registries.BLOCK, ImmortalersDelightMod.prefix(pName));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightTags.java b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightTags.java
--- a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightTags.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightTags.java	(date 1759415264779)
@@ -2,7 +2,9 @@
 
 import com.renyigesai.immortalers_delight.ImmortalersDelightMod;
 import net.minecraft.core.registries.Registries;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.TagKey;
+import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.Block;
@@ -14,9 +16,15 @@
     public static final TagKey<Item> ANCIENT_BOAT_NEED_2 = createItemTag("boat_needs/ancient_boat_need_2");
     public static final TagKey<Item> ANCIENT_CHEST_BOAT_NEED_1 = createItemTag("boat_needs/ancient_chest_boat_need_1");
     public static final TagKey<Item> ANCIENT_CHEST_BOAT_NEED_2 = createItemTag("boat_needs/ancient_chest_boat_need_2");
-    public static final TagKey<Item> IMMORTAL_KNIFES = createItemTag("tools/immortal_knifes");
+    public static final TagKey<Item> IMMORTAL_KNIVES = createItemTag("tools/immortal_knives");
     public static final TagKey<Block> MINEABLE_WITH_DRILL_ROD = createBlockTag("mineable/drill_rod");
 
+    public static final TagKey<EntityType<?>> IMMORTAL_NORMAL_MOBS = createEntityTag("normal_mobs");
+
+    public static final TagKey<EntityType<?>> IMMORTAL_ELITE_MOBS = createEntityTag("elite_mobs");
+
+    public static final TagKey<EntityType<?>> IMMORTAL_MINI_BOSS = createEntityTag("mini_boss");
+
     private static TagKey<Biome> createBiomeTag(String pName) {
         return TagKey.create(Registries.BIOME, ImmortalersDelightMod.prefix(pName));
     }
@@ -25,8 +33,11 @@
         return TagKey.create(Registries.ITEM, ImmortalersDelightMod.prefix(pName));
     }
 
-
     private static TagKey<Block> createBlockTag(String pName) {
         return TagKey.create(Registries.BLOCK, ImmortalersDelightMod.prefix(pName));
     }
+
+    private static TagKey<EntityType<?>> createEntityTag(String pName) {
+        return TagKey.create(Registries.ENTITY_TYPE, ImmortalersDelightMod.prefix(pName));
+    }
 }
Index: src/main/java/com/renyigesai/immortalers_delight/entities/living/TerracottaGolem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.entities.living;\r\n\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport com.renyigesai.immortalers_delight.screen.TerracottaGolemMenu;\r\nimport net.minecraft.nbt.CompoundTag;\r\nimport net.minecraft.nbt.ListTag;\r\nimport net.minecraft.nbt.Tag;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.network.syncher.EntityDataAccessor;\r\nimport net.minecraft.network.syncher.EntityDataSerializers;\r\nimport net.minecraft.network.syncher.SynchedEntityData;\r\nimport net.minecraft.server.level.ServerLevel;\r\nimport net.minecraft.server.level.ServerPlayer;\r\nimport net.minecraft.sounds.SoundEvent;\r\nimport net.minecraft.sounds.SoundEvents;\r\nimport net.minecraft.sounds.SoundSource;\r\nimport net.minecraft.tags.ItemTags;\r\nimport net.minecraft.util.TimeUtil;\r\nimport net.minecraft.util.valueproviders.UniformInt;\r\nimport net.minecraft.world.*;\r\nimport net.minecraft.world.damagesource.DamageSource;\r\nimport net.minecraft.world.damagesource.DamageTypes;\r\nimport net.minecraft.world.entity.*;\r\nimport net.minecraft.world.entity.ai.attributes.AttributeSupplier;\r\nimport net.minecraft.world.entity.ai.attributes.Attributes;\r\nimport net.minecraft.world.entity.ai.goal.*;\r\nimport net.minecraft.world.entity.ai.goal.target.*;\r\nimport net.minecraft.world.entity.animal.AbstractGolem;\r\nimport net.minecraft.world.entity.animal.Animal;\r\nimport net.minecraft.world.entity.animal.Wolf;\r\nimport net.minecraft.world.entity.animal.horse.AbstractHorse;\r\nimport net.minecraft.world.entity.monster.Creeper;\r\nimport net.minecraft.world.entity.monster.Enemy;\r\nimport net.minecraft.world.entity.monster.Monster;\r\nimport net.minecraft.world.entity.monster.RangedAttackMob;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.entity.projectile.AbstractArrow;\r\nimport net.minecraft.world.item.DyeColor;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.Items;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.gameevent.GameEvent;\r\nimport net.minecraft.world.phys.Vec3;\r\nimport net.minecraftforge.network.NetworkHooks;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\nimport java.util.UUID;\r\nimport java.util.function.Predicate;\r\n\r\nimport static com.renyigesai.immortalers_delight.potion.EsteemedGuestPotionEffect.FRIEND_TO;\r\n\r\npublic class TerracottaGolem extends TamableAnimal implements ContainerListener, HasCustomInventoryScreen, RangedAttackMob, NeutralMob {\r\n    private static final EntityDataAccessor<Byte> DATA_ID_DECORATE_LEFT = SynchedEntityData.defineId(TerracottaGolem.class, EntityDataSerializers.BYTE);\r\n    private static final EntityDataAccessor<Byte> DATA_ID_DECORATE_BACK = SynchedEntityData.defineId(TerracottaGolem.class, EntityDataSerializers.BYTE);\r\n    private static final EntityDataAccessor<Byte> DATA_ID_DECORATE_RIGHT = SynchedEntityData.defineId(TerracottaGolem.class, EntityDataSerializers.BYTE);\r\n\r\n    // 同步数据访问器：用于客户端和服务器同步马匹状态标志（驯服、鞍具等）\r\n    private static final EntityDataAccessor<Byte> DATA_ID_FLAGS = SynchedEntityData.defineId(TerracottaGolem.class, EntityDataSerializers.BYTE);\r\n    // 标志位：已驯服\r\n    private static final int FLAG_TAME = 2;\r\n    // 标志位：装备鞍具\r\n    private static final int FLAG_SADDLE = 4;\r\n    // 标志位：已繁殖\r\n    private static final int FLAG_BRED = 8;\r\n    // 标志位：正在进食\r\n    private static final int FLAG_EATING = 16;\r\n    // 标志位：正在站立（后腿站立）\r\n    private static final int FLAG_STANDING = 32;\r\n    // 标志位：张开嘴\r\n    private static final int FLAG_OPEN_MOUTH = 64;\r\n    // 马匹的 inventory 容器（存储鞍具、护甲等）\r\n    protected SimpleContainer inventory;\r\n\r\n    private net.minecraftforge.common.util.LazyOptional<?> itemHandler = null;\r\n    public static final int INV_SLOT_LEFT = 0;\r\n    public static final int INV_SLOT_BACK = 1;\r\n    public static final int INV_SLOT_RIGHT = 2;\r\n    private static final EntityDataAccessor<Boolean> DATA_INTERESTED_ID = SynchedEntityData.defineId(TerracottaGolem.class, EntityDataSerializers.BOOLEAN);\r\n    private static final EntityDataAccessor<Integer> DATA_COLLAR_COLOR = SynchedEntityData.defineId(TerracottaGolem.class, EntityDataSerializers.INT);\r\n    private static final EntityDataAccessor<Integer> DATA_REMAINING_ANGER_TIME = SynchedEntityData.defineId(TerracottaGolem.class, EntityDataSerializers.INT);\r\n    public static final Predicate<LivingEntity> PREY_SELECTOR = (p_289448_) -> {\r\n        EntityType<?> entitytype = p_289448_.getType();\r\n        return entitytype == EntityType.SHEEP || entitytype == EntityType.RABBIT || entitytype == EntityType.FOX;\r\n    };\r\n    private static final UniformInt PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);\r\n    @javax.annotation.Nullable\r\n    private UUID persistentAngerTarget;\r\n\r\n    public static final AnimationState idleAnimationState = new AnimationState();\r\n    public int idleAnimationTimeOut = 0;\r\n    public static final AnimationState attackAnimationState = new AnimationState();\r\n    public int attackAnimationTimeOut = 0;\r\n\r\n\r\n    /**===================数据管理部分，提供实体字段的getter和setter方法======================**/\r\n\r\n    /**\r\n     * 获取狼项圈的颜色\r\n     * @return 项圈颜色\r\n     */\r\n    public DyeColor getCollarColor() {\r\n        return DyeColor.byId(this.entityData.get(DATA_COLLAR_COLOR));\r\n    }\r\n\r\n    /**\r\n     * 设置狼项圈的颜色\r\n     * @param pCollarColor 项圈颜色\r\n     */\r\n    public void setCollarColor(DyeColor pCollarColor) {\r\n        this.entityData.set(DATA_COLLAR_COLOR, pCollarColor.getId());\r\n    }\r\n\r\n    public boolean isInterested() {\r\n        return this.entityData.get(DATA_INTERESTED_ID);\r\n    }\r\n\r\n    /**\r\n     * 设置狼是否感兴趣\r\n     * @param pIsInterested true表示感兴趣，false表示不感兴趣\r\n     */\r\n    public void setIsInterested(boolean pIsInterested) {\r\n        this.entityData.set(DATA_INTERESTED_ID, pIsInterested);\r\n    }\r\n\r\n    protected boolean getFlag(int pFlagId) {\r\n        return (this.entityData.get(DATA_ID_FLAGS) & pFlagId) != 0;\r\n    }\r\n\r\n    protected void setFlag(int pFlagId, boolean pValue) {\r\n        byte b0 = this.entityData.get(DATA_ID_FLAGS);\r\n        if (pValue) {\r\n            this.entityData.set(DATA_ID_FLAGS, (byte)(b0 | pFlagId));\r\n        } else {\r\n            this.entityData.set(DATA_ID_FLAGS, (byte)(b0 & ~pFlagId));\r\n        }\r\n\r\n    }\r\n\r\n    public boolean isEating() {\r\n        return this.getFlag(16);\r\n    }\r\n\r\n    public boolean isStanding() {\r\n        return this.getFlag(32);\r\n    }\r\n\r\n    public boolean isBred() {\r\n        return this.getFlag(8);\r\n    }\r\n\r\n    public void setBred(boolean pBreeding) {\r\n        this.setFlag(8, pBreeding);\r\n    }\r\n\r\n    public boolean isSaddleable() {\r\n        return this.isAlive() && !this.isBaby() && this.isTame();\r\n    }\r\n\r\n    public void equipSaddle(@javax.annotation.Nullable SoundSource pSource) {\r\n        this.inventory.setItem(0, new ItemStack(Items.SADDLE));\r\n    }\r\n\r\n    public void equipArmor(Player pPlayer, ItemStack pArmor) {\r\n        if (this.isArmor(pArmor)) {\r\n            this.inventory.setItem(1, pArmor.copyWithCount(1));\r\n            if (!pPlayer.getAbilities().instabuild) {\r\n                pArmor.shrink(1);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public boolean isArmor(ItemStack pStack) {\r\n        return pStack.is(ItemTags.DECORATED_POT_INGREDIENTS);\r\n    }\r\n\r\n    public boolean isSaddled() {\r\n        return this.getFlag(4);\r\n    }\r\n\r\n    /**==================处理中立生物的相关逻辑。of course，通常这个傀儡在创建时应该是已经驯服的==================**/\r\n\r\n    /**\r\n     * 获取狼持续愤怒的剩余时间\r\n     * @return 剩余愤怒时间\r\n     */\r\n    public int getRemainingPersistentAngerTime() {\r\n        return this.entityData.get(DATA_REMAINING_ANGER_TIME);\r\n    }\r\n\r\n    /**\r\n     * 设置狼持续愤怒的剩余时间\r\n     * @param pTime 剩余愤怒时间\r\n     */\r\n    public void setRemainingPersistentAngerTime(int pTime) {\r\n        this.entityData.set(DATA_REMAINING_ANGER_TIME, pTime);\r\n    }\r\n\r\n    /**\r\n     * 开始狼的持续愤怒计时\r\n     * 随机设置狼的持续愤怒时间\r\n     */\r\n    public void startPersistentAngerTimer() {\r\n        this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.sample(this.random));\r\n    }\r\n\r\n    /**\r\n     * 获取狼持续愤怒的目标UUID\r\n     * @return 目标UUID\r\n     */\r\n    @Nullable\r\n    public UUID getPersistentAngerTarget() {\r\n        return this.persistentAngerTarget;\r\n    }\r\n\r\n    /**\r\n     * 设置狼持续愤怒的目标UUID\r\n     * @param pTarget 目标UUID\r\n     */\r\n    public void setPersistentAngerTarget(@Nullable UUID pTarget) {\r\n        this.persistentAngerTarget = pTarget;\r\n    }\r\n\r\n\r\n    public int getAmbientStandInterval() {\r\n        return this.getAmbientSoundInterval();\r\n    }\r\n\r\n    /**======================背包管理相关方法，读取特定位置的陶片纹样并处理其他背包交互==========================**/\r\n\r\n//    public InteractionResult mobInteract(Player pPlayer, InteractionHand pHand) {\r\n//        if (!this.isVehicle() && !this.isBaby()) {\r\n//            if (this.isTame() && pPlayer.isSecondaryUseActive()) {\r\n//                this.openCustomInventoryScreen(pPlayer);\r\n//                return InteractionResult.sidedSuccess(this.level().isClientSide);\r\n//            } else {\r\n//                ItemStack itemstack = pPlayer.getItemInHand(pHand);\r\n//                if (!itemstack.isEmpty()) {\r\n//                    InteractionResult interactionresult = itemstack.interactLivingEntity(pPlayer, this, pHand);\r\n//                    if (interactionresult.consumesAction()) {\r\n//                        return interactionresult;\r\n//                    }\r\n//\r\n//                    if (this.canWearArmor() && this.isArmor(itemstack) && !this.isWearingArmor()) {\r\n//                        this.equipArmor(pPlayer, itemstack);\r\n//                        return InteractionResult.sidedSuccess(this.level().isClientSide);\r\n//                    }\r\n//                }\r\n//\r\n//                //this.doPlayerRide(pPlayer);\r\n//                return InteractionResult.sidedSuccess(this.level().isClientSide);\r\n//            }\r\n//        } else {\r\n//            return super.mobInteract(pPlayer, pHand);\r\n//        }\r\n//    }\r\n\r\n    /**\r\n     * 获取 inventory 槽位数量\r\n     * @return 槽位数量\r\n     */\r\n    protected int getInventorySize() {\r\n        return 23;\r\n    }\r\n\r\n    /**\r\n     * 获取 inventory 的列数\r\n     * @return 5列\r\n     */\r\n    public int getInventoryColumns() {\r\n        return 5;\r\n    }\r\n    /**\r\n     * 创建 inventory 容器\r\n     * 若已有 inventory，则复制其中的物品到新容器\r\n     */\r\n    protected void createInventory() {\r\n        SimpleContainer simplecontainer = this.inventory;\r\n        this.inventory = new SimpleContainer(this.getInventorySize()); // 创建新容器\r\n        if (simplecontainer != null) { // 若有旧容器\r\n            simplecontainer.removeListener(this);\r\n            int i = Math.min(simplecontainer.getContainerSize(), this.inventory.getContainerSize()); // 取最小槽位数量\r\n\r\n            for(int j = 0; j < i; ++j) { // 复制物品\r\n                ItemStack itemstack = simplecontainer.getItem(j);\r\n                if (!itemstack.isEmpty()) {\r\n                    this.inventory.setItem(j, itemstack.copy());\r\n                }\r\n            }\r\n        }\r\n\r\n        this.inventory.addListener(this); // 添加容器监听器（自身）\r\n        this.updateContainerEquipment(); // 更新装备状态\r\n        // 初始化Forge的物品处理器（用于mod扩展）\r\n        this.itemHandler = net.minecraftforge.common.util.LazyOptional.of(() -> new net.minecraftforge.items.wrapper.InvWrapper(this.inventory));\r\n    }\r\n\r\n    /**\r\n     * 更新容器中的装备状态（同步鞍具标志位）\r\n     */\r\n    protected void updateContainerEquipment() {\r\n        if (!this.level().isClientSide) { // 仅在服务器端执行\r\n            this.setFlag(FLAG_SADDLE, !this.inventory.getItem(INV_SLOT_BACK).isEmpty()); // 若鞍具槽有物品，设置鞍具标志\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 当容器内容变化时调用（实现ContainerListener接口）\r\n     * @param pContainer 发生变化的容器\r\n     */\r\n    @Override\r\n    public void containerChanged(Container pContainer) {\r\n        boolean flag = this.isSaddled(); // 记录之前的鞍具状态\r\n        this.updateContainerEquipment(); // 更新装备状态\r\n        // 若超过20tick且之前无鞍具现在有，则播放装备鞍具音效\r\n        if (this.tickCount > 20 && !flag && this.isSaddled()) {\r\n            //this.playSound(this.getSaddleSoundEvent(), 0.5F, 1.0F);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 打开自定义 inventory 界面（供玩家操作）\r\n     * 仅在服务器端、非骑乘状态或玩家是乘客、已驯服时生效\r\n     * @param pPlayer 打开界面的玩家\r\n     */\r\n    @Override\r\n    public void openCustomInventoryScreen(Player pPlayer) {\r\n        System.out.println(\"openCustomInventoryScreen开始\");\r\n//        if (!this.level().isClientSide && (!this.isVehicle() || this.hasPassenger(pPlayer)) && this.isTame()) {\r\n//            pPlayer.openHorseInventory(this, this.inventory); // 打开马匹 inventory 界面\r\n//        }\r\n        if(pPlayer instanceof ServerPlayer serverplayer) {\r\n            if (isAlive()) {\r\n\r\n                // 删除冗余代码并转用简洁的打开方式\r\n                NetworkHooks.openScreen(serverplayer,\r\n                        new SimpleMenuProvider((containerId, inv, ServerPlayer) -> new TerracottaGolemMenu(containerId,inv,this), Component.translatable(ImmortalersDelightMod.MODID + \".container.terracotta_golem\")),\r\n                        friendlyByteBuf -> friendlyByteBuf.writeVarInt(this.getId())); // 写入实体id，随后传入客户端\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable net.minecraft.core.Direction facing) {\r\n        if (this.isAlive() && capability == net.minecraftforge.common.capabilities.ForgeCapabilities.ITEM_HANDLER && itemHandler != null)\r\n            return itemHandler.cast();\r\n        return super.getCapability(capability, facing);\r\n    }\r\n\r\n    @Override\r\n    public void invalidateCaps() {\r\n        super.invalidateCaps();\r\n        if (itemHandler != null) {\r\n            net.minecraftforge.common.util.LazyOptional<?> oldHandler = itemHandler;\r\n            itemHandler = null;\r\n            oldHandler.invalidate();\r\n        }\r\n    }\r\n//\r\n    public boolean hasInventoryChanged(Container pInventory) {\r\n        return this.inventory != pInventory;\r\n    }\r\n\r\n    public boolean hasChest() {\r\n        return true;\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean isInvulnerableTo(DamageSource source) {\r\n        return source.is(DamageTypes.IN_WALL) || source.is(DamageTypes.FALLING_BLOCK) || super.isInvulnerableTo(source);\r\n    }\r\n\r\n    protected void dropEquipment() {\r\n        super.dropEquipment();\r\n        if (inventory != null) {\r\n            for (int i = 0; i < inventory.getContainerSize(); ++i) {\r\n                ItemStack itemstack = inventory.getItem(i);\r\n                if (!itemstack.isEmpty()) {\r\n                    this.spawnAtLocation(itemstack, 0.0F);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public boolean canBreatheUnderwater() {\r\n        return true;\r\n    }\r\n\r\n    /**==================实体基本方法，处理Goal注册、属性注册、音效等实体通用方法==================**/\r\n    public TerracottaGolem(EntityType<? extends TamableAnimal> pEntityType, Level pLevel) {\r\n        super(pEntityType, pLevel);\r\n        this.setTame(false);\r\n        this.setMaxUpStep(1.0F);\r\n        this.createInventory();\r\n    }\r\n    protected void registerGoals() {\r\n        this.goalSelector.addGoal(1, new FloatGoal(this));\r\n        this.goalSelector.addGoal(1, new TerracottaGolem.TerracottaGolemPanicGoal(1.5D));\r\n        this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));\r\n        this.goalSelector.addGoal(5, new MeleeAttackGoal(this, 1.0D, true));\r\n        this.goalSelector.addGoal(6, new FollowOwnerGoal(this, 1.0D, 10.0F, 2.0F, false));\r\n        this.goalSelector.addGoal(7, new BreedGoal(this, 1.0D));\r\n        this.goalSelector.addGoal(8, new WaterAvoidingRandomStrollGoal(this, 1.0D));\r\n\r\n        this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Player.class, 8.0F));\r\n        this.goalSelector.addGoal(10, new RandomLookAroundGoal(this));\r\n\r\n        this.targetSelector.addGoal(1, new OwnerHurtByTargetGoal(this));\r\n        this.targetSelector.addGoal(2, new OwnerHurtTargetGoal(this));\r\n        this.targetSelector.addGoal(3, (new HurtByTargetGoal(this)).setAlertOthers());\r\n        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt));\r\n        //this.targetSelector.addGoal(5, new NonTameRandomTargetGoal<>(this, Animal.class, false, PREY_SELECTOR));\r\n        //this.targetSelector.addGoal(6, new NonTameRandomTargetGoal<>(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR));\r\n        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Mob.class, 5, false, false, (p_28879_) -> {\r\n            return p_28879_ instanceof Enemy && !(p_28879_ instanceof Creeper);\r\n        }));\r\n        this.targetSelector.addGoal(8, new ResetUniversalAngerTargetGoal<>(this, true));\r\n    }\r\n\r\n    public static AttributeSupplier.Builder createTerracottaGolemAttributes() {\r\n        return Monster.createMonsterAttributes()\r\n                .add(Attributes.FOLLOW_RANGE, 24.0D)\r\n                .add(Attributes.MOVEMENT_SPEED, 0.3D)\r\n                .add(Attributes.ATTACK_DAMAGE, 4.0D)\r\n                .add(Attributes.ARMOR, 5.0D)\r\n                .add(Attributes.ARMOR_TOUGHNESS, 5.0D)\r\n                .add(Attributes.MAX_HEALTH, 10.0D);\r\n    }\r\n\r\n    protected void defineSynchedData() {\r\n        super.defineSynchedData();\r\n        this.entityData.define(DATA_INTERESTED_ID, false);\r\n        this.entityData.define(DATA_COLLAR_COLOR, DyeColor.RED.getId());\r\n        this.entityData.define(DATA_REMAINING_ANGER_TIME, 0);\r\n        this.entityData.define(DATA_ID_FLAGS, (byte)0);\r\n        this.entityData.define(DATA_ID_DECORATE_BACK, (byte)0);\r\n        this.entityData.define(DATA_ID_DECORATE_LEFT, (byte)0);\r\n        this.entityData.define(DATA_ID_DECORATE_RIGHT, (byte)0);\r\n    }\r\n\r\n\r\n    /**\r\n     * 将狼的额外数据保存到NBT标签中\r\n     * 保存狼的项圈颜色和愤怒状态等数据\r\n     * @param pCompound NBT标签\r\n     */\r\n    public void addAdditionalSaveData(CompoundTag pCompound) {\r\n        super.addAdditionalSaveData(pCompound);\r\n        // 将狼的项圈颜色保存到NBT标签中\r\n        pCompound.putByte(\"CollarColor\", (byte)this.getCollarColor().getId());\r\n        // 保存狼的持续愤怒数据\r\n        this.addPersistentAngerSaveData(pCompound);\r\n\r\n        ListTag listtag = new ListTag();\r\n\r\n        for(int i = 0; i < this.inventory.getContainerSize(); ++i) {\r\n            ItemStack itemstack = this.inventory.getItem(i);\r\n            if (!itemstack.isEmpty()) {\r\n                CompoundTag compoundtag = new CompoundTag();\r\n                compoundtag.putByte(\"Slot\", (byte)i);\r\n                itemstack.save(compoundtag);\r\n                listtag.add(compoundtag);\r\n            }\r\n        }\r\n\r\n        pCompound.put(\"Items\", listtag);\r\n    }\r\n\r\n    /**\r\n     * 从NBT标签中读取狼的额外数据\r\n     * 读取狼的项圈颜色和愤怒状态等数据\r\n     * @param pCompound NBT标签\r\n     */\r\n    public void readAdditionalSaveData(CompoundTag pCompound) {\r\n        super.readAdditionalSaveData(pCompound);\r\n        // 如果NBT标签中包含项圈颜色数据，则设置狼的项圈颜色\r\n        if (pCompound.contains(\"CollarColor\", 99)) {\r\n            this.setCollarColor(DyeColor.byId(pCompound.getInt(\"CollarColor\")));\r\n        }\r\n        // 读取狼的持续愤怒数据\r\n        this.readPersistentAngerSaveData(this.level(), pCompound);\r\n\r\n        System.out.println(\"readAdditionalSaveData读完了狼的nbt\");\r\n        this.createInventory();\r\n        ListTag listtag = pCompound.getList(\"Items\", 10); // 更改为正确的tag类型，防止读取时出错\r\n\r\n        for(int i = 0; i < listtag.size(); ++i) {\r\n            CompoundTag compoundtag = listtag.getCompound(i);\r\n            int j = compoundtag.getByte(\"Slot\") & 255;\r\n            if (j >= 2 && j < this.inventory.getContainerSize()) {\r\n                this.inventory.setItem(j, ItemStack.of(compoundtag));\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取狼的环境音效\r\n     * 根据狼的状态返回不同的环境音效，如愤怒、驯服、健康状态等\r\n     * @return 环境音效\r\n     */\r\n    protected SoundEvent getAmbientSound() {\r\n        if (this.isAngry()) {\r\n            return SoundEvents.WOLF_GROWL; // 狼愤怒时发出咆哮声\r\n        } else if (this.random.nextInt(3) == 0) {\r\n            return this.isTame() && this.getHealth() < 10.0F ? SoundEvents.WOLF_WHINE : SoundEvents.WOLF_PANT;\r\n            // 驯服且生命值低于10时发出呜咽声，否则发出喘气声\r\n        } else {\r\n            return SoundEvents.WOLF_AMBIENT; // 正常状态下发出环境音效\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取狼受伤时的音效\r\n     * 当狼受到伤害时播放该音效\r\n     * @param pDamageSource 伤害来源\r\n     * @return 受伤音效\r\n     */\r\n    protected SoundEvent getHurtSound(DamageSource pDamageSource) {\r\n        return SoundEvents.WOLF_HURT;\r\n    }\r\n\r\n    /**\r\n     * 获取狼死亡时的音效\r\n     * 当狼死亡时播放该音效\r\n     * @return 死亡音效\r\n     */\r\n    protected SoundEvent getDeathSound() {\r\n        return SoundEvents.WOLF_DEATH;\r\n    }\r\n\r\n    /**\r\n     * 设置狼的驯服状态\r\n     * 根据驯服状态调整狼的最大生命值和攻击伤害\r\n     * @param pTamed true表示驯服，false表示未驯服\r\n     */\r\n    public void setTame(boolean pTamed) {\r\n        super.setTame(pTamed);\r\n        if (pTamed) {\r\n            // 驯服时将最大生命值设置为20\r\n            this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(20.0D);\r\n            this.setHealth(20.0F);\r\n        } else {\r\n            // 未驯服时将最大生命值设置为8\r\n            this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(8.0D);\r\n        }\r\n        // 设置狼的攻击伤害为4\r\n        this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue(4.0D);\r\n    }\r\n\r\n    public boolean canBeLeashed(Player pPlayer) {\r\n        return !this.isAngry() && super.canBeLeashed(pPlayer);\r\n    }\r\n\r\n    public @NotNull Vec3 getLeashOffset() {\r\n        return new Vec3(0.0D, (double)(0.6F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.4F));\r\n    }\r\n\r\n    public InteractionResult openInventoryScreenByRightClick(Player player, InteractionHand hand) {\r\n        System.out.println(\"openInventoryScreenByRightClick开始\");\r\n        ItemStack stack = player.getItemInHand(hand);\r\n        boolean owner = this.isTame() && isOwnedBy(player);\r\n        InteractionResult type = super.mobInteract(player, hand);\r\n        //打开背包（仅主人）\r\n        if (owner) {\r\n            if (!player.isShiftKeyDown()) {\r\n                this.openCustomInventoryScreen(player);\r\n                this.setOrderedToSit(true);\r\n                return InteractionResult.sidedSuccess(this.level().isClientSide);\r\n            }\r\n\r\n        } else {\r\n            System.out.println(\"不是主人\");\r\n        }\r\n\r\n        //驯服该生物\r\n        if (!isTame() && stack.is(Items.DIAMOND_BLOCK)) {\r\n            this.usePlayerItem(player, hand, stack);\r\n            this.gameEvent(GameEvent.EAT);\r\n            if (!net.minecraftforge.event.ForgeEventFactory.onAnimalTame(this, player)) {\r\n                this.tame(player);\r\n                this.level().broadcastEntityEvent(this, (byte) 7);\r\n            } else {\r\n                this.level().broadcastEntityEvent(this, (byte) 6);\r\n            }\r\n            return InteractionResult.SUCCESS;\r\n        }\r\n\r\n        //治疗\r\n        if (isTame() && stack.is(Items.COAL) && this.getHealth() < this.getMaxHealth()) {\r\n            this.heal(5);\r\n            if (!player.getAbilities().instabuild) {\r\n                stack.shrink(1);\r\n            }\r\n\r\n            this.gameEvent(GameEvent.EAT, this);\r\n            return InteractionResult.SUCCESS;\r\n\r\n        }\r\n\r\n        //切换坐下跟随游荡\r\n//        InteractionResult interactionresult = stack.interactLivingEntity(player, this, hand);\r\n//        if (interactionresult != InteractionResult.SUCCESS && type != InteractionResult.SUCCESS && isTame() && isOwnedBy(player)) {\r\n//            if (player.isShiftKeyDown()) {\r\n//                this.setCommand(this.getCommand() + 1);\r\n//                if (this.getCommand() == 3) {\r\n//                    this.setCommand(0);\r\n//                }\r\n//                player.displayClientMessage(Component.translatable(\"entity.cataclysm.all.command_\" + this.getCommand(), this.getName()), true);\r\n//                boolean sit = this.getCommand() == 2;\r\n//                if (sit) {\r\n//                    this.setOrderedToSit(true);\r\n//                    return InteractionResult.SUCCESS;\r\n//                } else {\r\n//                    this.setOrderedToSit(false);\r\n//                    return InteractionResult.SUCCESS;\r\n//                }\r\n//            }\r\n//        }\r\n        return type;\r\n    }\r\n    /**===================================繁殖相关方法===============================**/\r\n    @Nullable\r\n    @Override\r\n    public Wolf getBreedOffspring(ServerLevel pLevel, AgeableMob pOtherParent) {\r\n        Wolf wolf = EntityType.WOLF.create(pLevel);\r\n        if (wolf != null) {\r\n            UUID uuid = this.getOwnerUUID();\r\n            if (uuid != null) {\r\n                // 如果当前狼有主人，设置后代狼的主人并标记为驯服\r\n                wolf.setOwnerUUID(uuid);\r\n                wolf.setTame(true);\r\n            }\r\n        }\r\n        return wolf;\r\n    }\r\n\r\n    /**\r\n     * 判断狼是否可以与另一个动物交配\r\n     * 狼必须被驯服且对方也是狼才能交配\r\n     * @param pOtherAnimal 另一个动物实体\r\n     * @return true表示可以交配，false表示不可以\r\n     */\r\n    public boolean canMate(Animal pOtherAnimal) {\r\n        if (pOtherAnimal == this) {\r\n            return false;\r\n        } else if (!this.isTame()) {\r\n            return false;\r\n        } else if (!(pOtherAnimal instanceof Wolf)) {\r\n            return false;\r\n        } else {\r\n            Wolf wolf = (Wolf)pOtherAnimal;\r\n            if (!wolf.isTame()) {\r\n                return false;\r\n            } else if (wolf.isInSittingPose()) {\r\n                return false;\r\n            } else {\r\n                return this.isInLove() && wolf.isInLove();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理玩家与狼的交互逻辑\r\n     * 包括喂食、染色、驯服等交互操作\r\n     * @param pPlayer 交互的玩家\r\n     * @param pHand 交互的手\r\n     * @return 交互结果\r\n     */\r\n    public InteractionResult mobInteract(Player pPlayer, InteractionHand pHand) {\r\n        ItemStack itemstack = pPlayer.getItemInHand(pHand);\r\n        Item item = itemstack.getItem();\r\n        openInventoryScreenByRightClick(pPlayer, pHand);\r\n        if (this.level().isClientSide) {\r\n            // 在客户端判断是否可以进行交互\r\n            boolean flag = this.isOwnedBy(pPlayer) || this.isTame() || itemstack.is(Items.BONE) && !this.isTame() && !this.isAngry();\r\n            return flag ? InteractionResult.CONSUME : InteractionResult.PASS;\r\n        } else if (this.isTame()) {\r\n//            // 如果狼已经被驯服\r\n            if (this.isFood(itemstack) && this.getHealth() < this.getMaxHealth()) {\r\n//                // 如果玩家手中的物品是狼的食物且狼的生命值未满，喂食狼\r\n//                this.heal((float)itemstack.getFoodProperties(this).getNutrition());\r\n//                if (!pPlayer.getAbilities().instabuild) {\r\n//                    // 非创造模式下减少物品数量\r\n//                    itemstack.shrink(1);\r\n//                }\r\n//                // 触发进食游戏事件\r\n//                this.gameEvent(GameEvent.EAT, this);\r\n                return InteractionResult.SUCCESS;\r\n            } else {\r\n//                if (item instanceof DyeItem) {\r\n//                    // 如果玩家手中的物品是染料\r\n//                    DyeItem dyeitem = (DyeItem)item;\r\n//                    if (this.isOwnedBy(pPlayer)) {\r\n//                        // 如果狼是该玩家的宠物\r\n//                        DyeColor dyecolor = dyeitem.getDyeColor();\r\n//                        if (dyecolor != this.getCollarColor()) {\r\n//                            // 如果染料颜色与狼的项圈颜色不同，染色狼的项圈\r\n//                            this.setCollarColor(dyecolor);\r\n//                            if (!pPlayer.getAbilities().instabuild) {\r\n//                                // 非创造模式下减少物品数量\r\n//                                itemstack.shrink(1);\r\n//                            }\r\n//                            return InteractionResult.SUCCESS;\r\n//                        }\r\n//                    }\r\n//                }\r\n                // 调用父类的交互方法\r\n                InteractionResult interactionresult = super.mobInteract(pPlayer, pHand);\r\n                if ((!interactionresult.consumesAction() || this.isBaby()) && this.isOwnedBy(pPlayer)) {\r\n                    // 如果交互未消耗动作或狼是幼崽，且狼是该玩家的宠物，切换狼的坐下状态\r\n                    this.setOrderedToSit(!this.isOrderedToSit());\r\n                    this.jumping = false;\r\n                    this.navigation.stop();\r\n                    this.setTarget((LivingEntity)null);\r\n                    return InteractionResult.SUCCESS;\r\n                } else {\r\n                    return interactionresult;\r\n                }\r\n            }\r\n        } else if (itemstack.is(Items.BONE) && !this.isAngry()) {\r\n            // 如果狼未被驯服，玩家手中拿着骨头且狼未愤怒，尝试驯服狼\r\n            if (!pPlayer.getAbilities().instabuild) {\r\n                // 非创造模式下减少物品数量\r\n                itemstack.shrink(1);\r\n            }\r\n            if (this.random.nextInt(3) == 0 && !net.minecraftforge.event.ForgeEventFactory.onAnimalTame(this, pPlayer)) {\r\n                // 有三分之一的概率驯服成功\r\n                this.tame(pPlayer);\r\n                this.navigation.stop();\r\n                this.setTarget((LivingEntity)null);\r\n                this.setOrderedToSit(true);\r\n                // 广播狼被驯服的事件\r\n                this.level().broadcastEntityEvent(this, (byte)7);\r\n            } else {\r\n                // 驯服失败，广播失败事件\r\n                this.level().broadcastEntityEvent(this, (byte)6);\r\n            }\r\n            return InteractionResult.SUCCESS;\r\n        } else {\r\n            return super.mobInteract(pPlayer, pHand);\r\n        }\r\n    }\r\n\r\n    /**======================战斗相关方法，处理远程与近战攻击的逻辑=========================**/\r\n    /**\r\n     * 处理攻击目标的方法，用于随同主人攻击与反击攻击主人的目标；防止友伤\r\n     * @param pTarget\r\n     * @param pOwner\r\n     * @return\r\n     */\r\n    @Override\r\n    public boolean wantsToAttack(LivingEntity pTarget, LivingEntity pOwner) {\r\n        if (!(pTarget instanceof Creeper) && !(pTarget instanceof AbstractGolem)) {\r\n            if (pTarget instanceof TerracottaGolem thisGolem) {\r\n                return !thisGolem.isTame();\r\n            } else if (pTarget instanceof TamableAnimal tamableAnimal) {\r\n                return !tamableAnimal.isTame() || tamableAnimal.getOwner() != pOwner;\r\n            } else if (pTarget instanceof Player && pOwner instanceof Player && !((Player)pOwner).canHarmPlayer((Player)pTarget)) {\r\n                return false;\r\n            } else if (pTarget instanceof AbstractHorse horse && horse.isTamed()) {\r\n                return false;\r\n            } else {\r\n                return !pTarget.getPersistentData().contains(FRIEND_TO, Tag.TAG_INT_ARRAY);\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    public boolean isAlliedTo(Entity entityIn) {\r\n        if (this.isTame()) {\r\n            LivingEntity livingentity = this.getOwner();\r\n            if (entityIn == livingentity) {\r\n                return true;\r\n            }\r\n            if (entityIn instanceof TamableAnimal) {\r\n                return ((TamableAnimal) entityIn).isOwnedBy(livingentity);\r\n            }\r\n            if (livingentity != null) {\r\n                return livingentity.isAlliedTo(entityIn);\r\n            }\r\n        }\r\n\r\n        return super.isAlliedTo(entityIn);\r\n    }\r\n\r\n    @Override\r\n    public void performRangedAttack(LivingEntity pTarget, float pVelocity) {\r\n\r\n    }\r\n\r\n    /**\r\n     * 处理狼受到伤害的逻辑\r\n     * 当狼受到伤害时，取消坐下命令，并根据伤害来源调整伤害值\r\n     * @param pSource 伤害来源\r\n     * @param pAmount 伤害量\r\n     * @return true表示伤害处理成功，false表示免疫该伤害\r\n     */\r\n    public boolean hurt(DamageSource pSource, float pAmount) {\r\n        if (this.isInvulnerableTo(pSource)) {\r\n            return false;\r\n        } else {\r\n            Entity entity = pSource.getEntity();\r\n            if (!this.level().isClientSide) {\r\n                this.setOrderedToSit(false);\r\n            }\r\n\r\n            if (entity != null && !(entity instanceof Player) && !(entity instanceof AbstractArrow)) {\r\n                pAmount = (pAmount + 1.0F) / 2.0F;\r\n            }\r\n\r\n            return super.hurt(pSource, pAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 狼攻击目标的逻辑\r\n     * 狼对目标造成伤害并应用附魔效果\r\n     * @param pEntity 攻击目标\r\n     * @return true表示攻击成功，false表示攻击失败\r\n     */\r\n    public boolean doHurtTarget(Entity pEntity) {\r\n        boolean flag = pEntity.hurt(this.damageSources().mobAttack(this), (float)((int)this.getAttributeValue(Attributes.ATTACK_DAMAGE)));\r\n        if (flag) {\r\n            // 攻击成功时应用附魔效果\r\n            this.doEnchantDamageEffects(this, pEntity);\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    public SimpleContainer getInventory() {\r\n        return this.inventory;\r\n    }\r\n\r\n    /**=========================内部类自定义AI，自定义攻击方式等等行为=========================**/\r\n\r\n    class TerracottaGolemPanicGoal extends PanicGoal {\r\n        public TerracottaGolemPanicGoal(double pSpeedModifier) {\r\n            super(TerracottaGolem.this, pSpeedModifier);\r\n        }\r\n\r\n        protected boolean shouldPanic() {\r\n            return this.mob.isFreezing() || this.mob.isOnFire();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/entities/living/TerracottaGolem.java b/src/main/java/com/renyigesai/immortalers_delight/entities/living/TerracottaGolem.java
--- a/src/main/java/com/renyigesai/immortalers_delight/entities/living/TerracottaGolem.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/entities/living/TerracottaGolem.java	(date 1755136560677)
@@ -230,6 +230,15 @@
 
     /**======================背包管理相关方法，读取特定位置的陶片纹样并处理其他背包交互==========================**/
 
+    public byte getLeftDecorateID() {
+        return this.entityData.get(DATA_ID_DECORATE_LEFT);
+    }
+    public byte getBackDecorateID() {
+        return this.entityData.get(DATA_ID_DECORATE_BACK);
+    }
+    public byte getRightDecorateID() {
+        return this.entityData.get(DATA_ID_DECORATE_RIGHT);
+    }
 //    public InteractionResult mobInteract(Player pPlayer, InteractionHand pHand) {
 //        if (!this.isVehicle() && !this.isBaby()) {
 //            if (this.isTame() && pPlayer.isSecondaryUseActive()) {
@@ -302,10 +311,60 @@
      */
     protected void updateContainerEquipment() {
         if (!this.level().isClientSide) { // 仅在服务器端执行
+            this.entityData.set(DATA_ID_DECORATE_LEFT, whatDecorateIs(this.inventory.getItem(INV_SLOT_LEFT)));
+            this.entityData.set(DATA_ID_DECORATE_BACK, whatDecorateIs(this.inventory.getItem(INV_SLOT_BACK)));
+            this.entityData.set(DATA_ID_DECORATE_RIGHT, whatDecorateIs(this.inventory.getItem(INV_SLOT_RIGHT)));
             this.setFlag(FLAG_SADDLE, !this.inventory.getItem(INV_SLOT_BACK).isEmpty()); // 若鞍具槽有物品，设置鞍具标志
         }
     }
 
+    protected byte whatDecorateIs(ItemStack itemStack) {
+        if (itemStack.is(Items.ANGLER_POTTERY_SHERD)) {
+            return 1;
+        } else if (itemStack.is(Items.ARCHER_POTTERY_SHERD)) {
+            return 2;
+        } else if (itemStack.is(Items.ARMS_UP_POTTERY_SHERD)) {
+            return 3;
+        } else if (itemStack.is(Items.BLADE_POTTERY_SHERD)) {
+            return 4;
+        } else if (itemStack.is(Items.BREWER_POTTERY_SHERD)) {
+            return 5;
+        } else if (itemStack.is(Items.BURN_POTTERY_SHERD)) {
+            return 6;
+        } else if (itemStack.is(Items.DANGER_POTTERY_SHERD)) {
+            return 7;
+        } else if (itemStack.is(Items.EXPLORER_POTTERY_SHERD)) {
+            return 8;
+        } else if (itemStack.is(Items.FRIEND_POTTERY_SHERD)) {
+            return 9;
+        } else if (itemStack.is(Items.HEART_POTTERY_SHERD)) {
+            return 10;
+        } else if (itemStack.is(Items.HEARTBREAK_POTTERY_SHERD)) {
+            return 11;
+        } else if (itemStack.is(Items.HOWL_POTTERY_SHERD)) {
+            return 12;
+        } else if (itemStack.is(Items.MINER_POTTERY_SHERD)) {
+            return 13;
+        } else if (itemStack.is(Items.MOURNER_POTTERY_SHERD)) {
+            return 14;
+        } else if (itemStack.is(Items.PLENTY_POTTERY_SHERD)) {
+            return 15;
+        } else if (itemStack.is(Items.PRIZE_POTTERY_SHERD)) {
+            return 16;
+        } else if (itemStack.is(Items.SHEAF_POTTERY_SHERD)) {
+            return 17;
+        } else if (itemStack.is(Items.SHELTER_POTTERY_SHERD)) {
+            return 18;
+        } else if (itemStack.is(Items.SKULL_POTTERY_SHERD)) {
+            return 19;
+        } else if (itemStack.is(Items.SNORT_POTTERY_SHERD)) {
+            return 20;
+        }
+        //HERO_POTTERY_SHERD
+        //PLENTIFUL_POTTERY_SHERD
+        return 0;
+    }
+
     /**
      * 当容器内容变化时调用（实现ContainerListener接口）
      * @param pContainer 发生变化的容器
@@ -328,15 +387,16 @@
     @Override
     public void openCustomInventoryScreen(Player pPlayer) {
         System.out.println("openCustomInventoryScreen开始");
-//        if (!this.level().isClientSide && (!this.isVehicle() || this.hasPassenger(pPlayer)) && this.isTame()) {
-//            pPlayer.openHorseInventory(this, this.inventory); // 打开马匹 inventory 界面
-//        }
         if(pPlayer instanceof ServerPlayer serverplayer) {
             if (isAlive()) {
 
                 // 删除冗余代码并转用简洁的打开方式
                 NetworkHooks.openScreen(serverplayer,
-                        new SimpleMenuProvider((containerId, inv, ServerPlayer) -> new TerracottaGolemMenu(containerId,inv,this), Component.translatable(ImmortalersDelightMod.MODID + ".container.terracotta_golem")),
+                        new SimpleMenuProvider(
+                                (containerId, inv, ServerPlayer) ->
+                                new TerracottaGolemMenu(containerId,inv,this),
+                                Component.translatable(ImmortalersDelightMod.MODID + ".container.terracotta_golem")
+                        ),
                         friendlyByteBuf -> friendlyByteBuf.writeVarInt(this.getId())); // 写入实体id，随后传入客户端
             }
         }
@@ -391,6 +451,11 @@
         return true;
     }
 
+//    @Override
+//    public boolean isBaby() {
+//        return true;
+//    }
+
     /**==================实体基本方法，处理Goal注册、属性注册、音效等实体通用方法==================**/
     public TerracottaGolem(EntityType<? extends TamableAnimal> pEntityType, Level pLevel) {
         super(pEntityType, pLevel);
@@ -492,7 +557,7 @@
         for(int i = 0; i < listtag.size(); ++i) {
             CompoundTag compoundtag = listtag.getCompound(i);
             int j = compoundtag.getByte("Slot") & 255;
-            if (j >= 2 && j < this.inventory.getContainerSize()) {
+            if (j < this.inventory.getContainerSize()) {
                 this.inventory.setItem(j, ItemStack.of(compoundtag));
             }
         }
Index: src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/InstructionObelisk.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/InstructionObelisk.java b/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/InstructionObelisk.java
new file mode 100644
--- /dev/null	(date 1759571720128)
+++ b/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/InstructionObelisk.java	(date 1759571720128)
@@ -0,0 +1,4 @@
+package com.renyigesai.immortalers_delight.entities.living.lost_barracks;
+
+public class InstructionObelisk {
+}
Index: src/main/java/com/renyigesai/immortalers_delight/item/PillagersKnifeItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/item/PillagersKnifeItem.java b/src/main/java/com/renyigesai/immortalers_delight/item/PillagersKnifeItem.java
new file mode 100644
--- /dev/null	(date 1760782039078)
+++ b/src/main/java/com/renyigesai/immortalers_delight/item/PillagersKnifeItem.java	(date 1760782039078)
@@ -0,0 +1,96 @@
+package com.renyigesai.immortalers_delight.item;
+
+import com.google.common.collect.Sets;
+import com.renyigesai.immortalers_delight.event.DifficultyModeHelper;
+import net.minecraft.ChatFormatting;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.MutableComponent;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.item.Tier;
+import net.minecraft.world.item.TooltipFlag;
+import net.minecraft.world.item.alchemy.Potion;
+import net.minecraft.world.item.alchemy.PotionUtils;
+import net.minecraft.world.item.alchemy.Potions;
+import net.minecraft.world.level.Level;
+import org.jetbrains.annotations.NotNull;
+import vectorwing.farmersdelight.common.Configuration;
+import vectorwing.farmersdelight.common.utility.TextUtils;
+
+import javax.annotation.Nullable;
+import java.util.Collection;
+import java.util.List;
+import java.util.Set;
+
+public class PillagersKnifeItem extends ImmortalersKnifeItem{
+    public PillagersKnifeItem(int type, Tier tier, float attackDamage, float attackSpeed, Properties properties) {
+        super(type, tier, attackDamage, attackSpeed, properties);
+    }
+
+    public @NotNull ItemStack getDefaultInstance() {
+        return PotionUtils.setPotion(super.getDefaultInstance(), Potions.POISON);
+    }
+
+    /**
+     * Allows items to add custom lines of information to the mouseover description.
+     */
+    public void appendHoverText(ItemStack pStack, @Nullable Level pLevel, List<Component> pTooltip, TooltipFlag pFlag) {
+        if ((Boolean) Configuration.FOOD_EFFECT_TOOLTIP.get()) {
+            MutableComponent textEmpty = TextUtils.getTranslation("tooltip." + this, new Object[0]);
+            pTooltip.add(textEmpty.withStyle(ChatFormatting.DARK_PURPLE));
+            PotionUtils.addPotionTooltip(pStack, pTooltip, 0.125F);
+        }
+        if (this.type_id == PILLAGER_KNIFE_TYPE) {
+            MutableComponent textEmpty = TextUtils.getTranslation("tooltip." + this + ".default_enchantment." + (DifficultyModeHelper.isPowerBattleMode() ? "power." + 1 : 1), new Object[0]);
+            pTooltip.add(textEmpty.withStyle(ChatFormatting.GRAY));
+        }
+
+        super.appendHoverText(pStack, pLevel, pTooltip, pFlag);
+    }
+
+    /**
+     * Returns the unlocalized name of this item. This version accepts an ItemStack so different stacks can have
+     * different names based on their damage or NBT.
+     */
+//    public String getDescriptionId(ItemStack pStack) {
+//        return PotionUtils.getPotion(pStack).getName(this.getDescriptionId() + ".effect.");
+//    }
+
+    @Override
+    public boolean hurtEnemy(ItemStack stack, LivingEntity target, LivingEntity attacker) {
+        boolean b = super.hurtEnemy(stack, target, attacker);
+        if (b && !target.level().isClientSide()) {
+            Potion potion = Potions.EMPTY;
+            Set<MobEffectInstance> effects = Sets.newHashSet();
+
+            potion = PotionUtils.getPotion(stack);
+            Collection<MobEffectInstance> collection = PotionUtils.getCustomEffects(stack);
+            if (!collection.isEmpty()) {
+                for(MobEffectInstance mobeffectinstance : collection) {
+                    effects.add(new MobEffectInstance(mobeffectinstance));
+                }
+            }
+
+            for(MobEffectInstance mobeffectinstance : potion.getEffects()) {
+                target.addEffect(new MobEffectInstance(
+                        mobeffectinstance.getEffect(),
+                        Math.max(mobeffectinstance.mapDuration((p_268168_) -> {return p_268168_ / 8;}), 1),
+                        mobeffectinstance.getAmplifier(),
+                        mobeffectinstance.isAmbient(),
+                        mobeffectinstance.isVisible()),
+                        attacker);
+            }
+
+            if (!effects.isEmpty()) {
+                for(MobEffectInstance mobeffectinstance1 : effects) {
+                    target.addEffect(mobeffectinstance1, attacker);
+                }
+            }
+        }
+        return b;
+    }
+
+}
Index: src/main/resources/data/forge/loot_modifiers/global_loot_modifiers.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"replace\": false,\r\n  \"entries\": [\r\n    \"immortalers_delight:add_loot_ancient_city\",\r\n    \"immortalers_delight:add_loot_ancient_city_ice_box\",\r\n    \"immortalers_delight:add_piglin_bartering\",\r\n    \"immortalers_delight:add_loot_sniffer\",\r\n    \"immortalers_delight:add_loot_ocean_ruin_warm\"\r\n  ]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/forge/loot_modifiers/global_loot_modifiers.json b/src/main/resources/data/forge/loot_modifiers/global_loot_modifiers.json
--- a/src/main/resources/data/forge/loot_modifiers/global_loot_modifiers.json	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/resources/data/forge/loot_modifiers/global_loot_modifiers.json	(date 1758617261761)
@@ -5,6 +5,16 @@
     "immortalers_delight:add_loot_ancient_city_ice_box",
     "immortalers_delight:add_piglin_bartering",
     "immortalers_delight:add_loot_sniffer",
-    "immortalers_delight:add_loot_ocean_ruin_warm"
+    "immortalers_delight:add_loot_ocean_ruin_warm",
+    "immortalers_delight:scavenging_pumpkin",
+    "immortalers_delight:scavenging_ham_from_pig",
+    "immortalers_delight:scavenging_ham_from_hoglin",
+    "immortalers_delight:scavenging_smoked_ham_from_pig",
+    "immortalers_delight:scavenging_smoked_ham_from_hoglin",
+    "immortalers_delight:scavenging_feather",
+    "immortalers_delight:scavenging_leather",
+    "immortalers_delight:scavenging_rabbit_hide",
+    "immortalers_delight:scavenging_shulker_shell",
+    "immortalers_delight:scavenging_string"
   ]
 }
\ No newline at end of file
Index: .idea/modules/immortalers_delight.main.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module version=\"4\">\r\n  <component name=\"AdditionalModuleElements\">\r\n    <content url=\"file://$MODULE_DIR$/../../build/generated/sources/annotationProcessor/java/main\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/../../build/generated/sources/annotationProcessor/java/main\" isTestSource=\"false\" generated=\"true\" />\r\n    </content>\r\n  </component>\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"minecraft\" name=\"Minecraft\">\r\n      <configuration>\r\n        <autoDetectTypes>\r\n          <platformType>FORGE</platformType>\r\n          <platformType>MIXIN</platformType>\r\n          <platformType>MCP</platformType>\r\n        </autoDetectTypes>\r\n        <projectReimportVersion>1</projectReimportVersion>\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n  <component name=\"McpModuleSettings\">\r\n    <option name=\"mappingFile\" value=\"F:\\immortalers_delight\\immortalers_delight\\build\\createMcpToSrg\\output.tsrg\" />\r\n    <option name=\"mcpVersion\" value=\"parchment_2023.09.03-1.20.1\" />\r\n    <option name=\"minecraftVersion\" value=\"1.20.1\" />\r\n    <option name=\"platformVersion\" value=\"47.1.0\" />\r\n    <option name=\"srgType\" value=\"TSRG\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules/immortalers_delight.main.iml b/.idea/modules/immortalers_delight.main.iml
--- a/.idea/modules/immortalers_delight.main.iml	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/.idea/modules/immortalers_delight.main.iml	(date 1759461079968)
@@ -18,7 +18,7 @@
     </facet>
   </component>
   <component name="McpModuleSettings">
-    <option name="mappingFile" value="F:\immortalers_delight\immortalers_delight\build\createMcpToSrg\output.tsrg" />
+    <option name="mappingFile" value="F:\IDF\Imm Delight\build\createMcpToSrg\output.tsrg" />
     <option name="mcpVersion" value="parchment_2023.09.03-1.20.1" />
     <option name="minecraftVersion" value="1.20.1" />
     <option name="platformVersion" value="47.1.0" />
Index: src/main/java/com/renyigesai/immortalers_delight/event/SkelverfishEventHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.event;\r\n\r\nimport com.renyigesai.immortalers_delight.entities.living.SkelverfishBase;\r\nimport com.renyigesai.immortalers_delight.entities.living.SkelverfishBomber;\r\nimport com.renyigesai.immortalers_delight.entities.living.SkelverfishThrasher;\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightEntities;\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightItems;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.tags.DamageTypeTags;\r\nimport net.minecraft.world.Difficulty;\r\nimport net.minecraft.world.effect.MobEffectInstance;\r\nimport net.minecraft.world.effect.MobEffects;\r\nimport net.minecraft.world.entity.EquipmentSlot;\r\nimport net.minecraft.world.entity.LivingEntity;\r\nimport net.minecraft.world.entity.ai.attributes.AttributeModifier;\r\nimport net.minecraft.world.entity.ai.attributes.Attributes;\r\nimport net.minecraft.world.entity.ai.goal.MeleeAttackGoal;\r\nimport net.minecraft.world.entity.ai.goal.TemptGoal;\r\nimport net.minecraft.world.entity.animal.sniffer.Sniffer;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.Items;\r\nimport net.minecraft.world.item.crafting.Ingredient;\r\nimport net.minecraftforge.event.entity.EntityJoinLevelEvent;\r\nimport net.minecraftforge.event.entity.EntityMobGriefingEvent;\r\nimport net.minecraftforge.event.entity.living.LivingHurtEvent;\r\nimport net.minecraftforge.eventbus.api.Event;\r\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\r\nimport net.minecraftforge.fml.common.Mod;\r\nimport net.minecraftforge.registries.ForgeRegistries;\r\n\r\nimport java.util.UUID;\r\n\r\n@Mod.EventBusSubscriber\r\npublic class SkelverfishEventHelper {\r\n\r\n    @SubscribeEvent\r\n    public static void onExplosionDamage(LivingHurtEvent event) {\r\n        if (event.getSource().is(DamageTypeTags.IS_EXPLOSION) && event.getSource().getEntity() instanceof SkelverfishBomber bomber) {\r\n            float f = event.getEntity().getRandom().nextFloat();\r\n            float extraDamage = (bomber.getMaxFireDamage() +\r\n                    (float)(bomber.getAttribute(Attributes.ATTACK_DAMAGE) == null ? 0.0F : bomber.getAttribute(Attributes.ATTACK_DAMAGE).getValue())) *\r\n                    (bomber.isPowered() ? 4.0F : 2.0F) +\r\n                    (bomber.level().getDifficulty() == Difficulty.EASY ? 2.0F + f * 1.5F : 0.0F) +\r\n                    (bomber.level().getDifficulty() == Difficulty.NORMAL ? 5.0F + f * 4.0F : 0.0F) +\r\n                    (bomber.level().getDifficulty() == Difficulty.HARD ? 6.0F + f * 3.0F : 0.0F);\r\n            event.setAmount(event.getAmount() + extraDamage); // 提升爆炸伤害，造成攻击力200%或400%爆炸伤害\r\n        }\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public static void onAmbusherAttack(LivingHurtEvent event) {\r\n        if (event.getSource().getEntity() instanceof LivingEntity attacker) {\r\n            ResourceLocation entityId = ForgeRegistries.ENTITY_TYPES.getKey(attacker.getType());\r\n            if (entityId != null && !attacker.level().isClientSide) {\r\n                String idString = entityId.toString();\r\n                if (idString.equals(ImmortalersDelightEntities.SKELVERFISH_AMBUSHER.getId().toString())) {\r\n                    int hurtArmor = event.getEntity().getArmorValue();\r\n                    if (hurtArmor > 0) {\r\n                        if (hurtArmor > 20) hurtArmor = 20;\r\n                        float damageBuffer = (1/(1-(hurtArmor * 0.04f))) > 3.0f ? 3.0f : (1/(1-(hurtArmor * 0.04f)));\r\n                        event.setAmount(event.getAmount() * damageBuffer);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public static void onThrasherJoinWorld(EntityJoinLevelEvent event) {\r\n        if (event.getEntity() instanceof Sniffer sniffer) {\r\n            sniffer.goalSelector.addGoal(3, new TemptGoal(sniffer, 3.0D, Ingredient.of(ImmortalersDelightItems.SACHETS.get()), false));\r\n        }\r\n//        if (event.getEntity() instanceof SkelverfishThrasher skelverfishThrasher) {\r\n//            skelverfishThrasher.goalSelector.removeGoal(new MeleeAttackGoal(skelverfishThrasher, 1.0D, false));\r\n//        }\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public static void onSilverfishsIntoStone(EntityMobGriefingEvent event) {\r\n        if (event.getEntity() instanceof SkelverfishBase skelverfishBase) {\r\n            event.setResult(Event.Result.DENY);\r\n        }\r\n//        if (event.getEntity() instanceof SkelverfishThrasher skelverfishThrasher) {\r\n//            skelverfishThrasher.goalSelector.removeGoal(new MeleeAttackGoal(skelverfishThrasher, 1.0D, false));\r\n//        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/event/SkelverfishEventHelper.java b/src/main/java/com/renyigesai/immortalers_delight/event/SkelverfishEventHelper.java
--- a/src/main/java/com/renyigesai/immortalers_delight/event/SkelverfishEventHelper.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/event/SkelverfishEventHelper.java	(date 1759463360410)
@@ -1,10 +1,15 @@
 package com.renyigesai.immortalers_delight.event;
 
+
+import com.renyigesai.immortalers_delight.ImmortalersDelightMod;
+import com.renyigesai.immortalers_delight.api.mobbase.ImmortalersMob;
 import com.renyigesai.immortalers_delight.entities.living.SkelverfishBase;
 import com.renyigesai.immortalers_delight.entities.living.SkelverfishBomber;
 import com.renyigesai.immortalers_delight.entities.living.SkelverfishThrasher;
 import com.renyigesai.immortalers_delight.init.ImmortalersDelightEntities;
 import com.renyigesai.immortalers_delight.init.ImmortalersDelightItems;
+import com.renyigesai.immortalers_delight.init.ImmortalersDelightTags;
+import com.renyigesai.immortalers_delight.init.ImmortalersTiers;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.DamageTypeTags;
 import net.minecraft.world.Difficulty;
@@ -22,6 +27,8 @@
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraftforge.event.entity.EntityJoinLevelEvent;
 import net.minecraftforge.event.entity.EntityMobGriefingEvent;
+import net.minecraftforge.event.entity.living.LivingAttackEvent;
+import net.minecraftforge.event.entity.living.LivingDamageEvent;
 import net.minecraftforge.event.entity.living.LivingHurtEvent;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
@@ -84,4 +91,150 @@
 //            skelverfishThrasher.goalSelector.removeGoal(new MeleeAttackGoal(skelverfishThrasher, 1.0D, false));
 //        }
     }
+
+    /**
+     *  超凡模式下，怪物的伤害随目标血量提升，作用类似百分比伤害。
+     *  但其实此处最大仅能造成3倍的伤害，限伤的存在实际使得过高的增伤意义不大。
+     *  保底伤害的触发在这个方法的时机之前，所以这个增伤不影响保底伤害。
+     */
+    @SubscribeEvent
+    public static void ImmortalrsMobAttackProgressDamage(LivingHurtEvent event) {
+        LivingEntity hurtOne = event.getEntity();
+        if (!hurtOne.level().isClientSide) {
+            if (event.getSource().getEntity() instanceof LivingEntity attacker) {
+                if (DifficultyModeHelper.isPowerBattleMode()) {
+                    if (attacker.getType().is(ImmortalersDelightTags.IMMORTAL_NORMAL_MOBS)
+                            || attacker.getType().is(ImmortalersDelightTags.IMMORTAL_ELITE_MOBS)
+                            || attacker.getType().is(ImmortalersDelightTags.IMMORTAL_MINI_BOSS)
+                    ) {
+                        float oldDamage = event.getAmount();
+                        float buffer = Math.min(3,1 + hurtOne.getMaxHealth() * 0.02F);
+                        event.setAmount(Math.max(oldDamage * buffer, 0.0F));
+                    }
+                }
+
+                if (attacker.level().getDifficulty().getId() >= 3) event.setAmount(event.getAmount() * 1.25F);
+            }
+
+            if (hurtOne.getType().is(ImmortalersDelightTags.IMMORTAL_NORMAL_MOBS)
+                    || hurtOne.getType().is(ImmortalersDelightTags.IMMORTAL_ELITE_MOBS)
+                    || hurtOne.getType().is(ImmortalersDelightTags.IMMORTAL_MINI_BOSS)
+            ) {
+                if (hurtOne.level().getDifficulty().getId() >= 3) event.setAmount(event.getAmount() * 0.8F);
+            }
+        }
+
+    }
+
+    /**
+     *  保底伤害：在本模组生物发出攻击行为时触发，直接进行一个改血攻击以制裁逆天减伤。
+     *  保底伤害为伤害值*0.2，精英怪以及以上等级怪物额外造成目标生命上限5%的伤害。
+     *  该事件触发时Forge的事件系统尚无法对伤害值进行修改，但生物自身hurt方法生效更快，可以修改伤害值
+     *  该攻击不会致死
+     */
+    @SubscribeEvent
+    public static void ImmortalrsMobAttackMinDamage(LivingAttackEvent event) {
+        if (DifficultyModeHelper.isPowerBattleMode()) {
+            if (event.getSource().getEntity() instanceof LivingEntity attacker && !attacker.level().isClientSide) {
+                LivingEntity hurtOne = event.getEntity();
+                if (hurtOne.getHealth() < 1.0F) return;
+
+                float minDamage = event.getAmount() * 0.2F;
+
+                boolean needMinDamage = false;
+                if (attacker.getType().is(ImmortalersDelightTags.IMMORTAL_NORMAL_MOBS)) {
+                    float damageProgress = 0;
+                    if (attacker instanceof ImmortalersMob immMob) {
+                        damageProgress = immMob.getAttackProportion();
+                        minDamage += hurtOne.getMaxHealth() * damageProgress;
+                    }
+                    needMinDamage = true;
+                }
+
+                if (attacker.getType().is(ImmortalersDelightTags.IMMORTAL_ELITE_MOBS)) {
+                    float damageProgress = 0.05F;
+                    if (attacker instanceof ImmortalersMob immMob) {
+                        damageProgress = immMob.getAttackProportion();
+                    }
+                    if (attacker.getAttributeValue(Attributes.ATTACK_DAMAGE) > 0) {
+                        float buffer = (float) (event.getAmount() / attacker.getAttributeValue(Attributes.ATTACK_DAMAGE));
+                        if (buffer < 1.0F) damageProgress *= buffer;
+                    }
+                    minDamage += hurtOne.getMaxHealth() * damageProgress;
+                    needMinDamage = true;
+                }
+
+                if (attacker.getType().is(ImmortalersDelightTags.IMMORTAL_MINI_BOSS)) {
+                    float damageProgress = 0.05F;
+                    if (attacker instanceof ImmortalersMob immMob) {
+                        damageProgress = immMob.getAttackProportion();
+                    }
+                    if (attacker.getAttributeValue(Attributes.ATTACK_DAMAGE) > 0) {
+                        float buffer = (float) (event.getAmount() / attacker.getAttributeValue(Attributes.ATTACK_DAMAGE));
+                        damageProgress *= buffer;
+                    }
+                    minDamage += hurtOne.getMaxHealth() * damageProgress;
+                    needMinDamage = true;
+                }
+
+                if (needMinDamage) hurtOne.setHealth(Math.max(hurtOne.getHealth() - minDamage, 0.01F));
+            }
+        }
+
+    }
+
+    /**
+     *  伤害衰减：伤害大于x时，将衰减为[原伤害值/(1+(原伤害值*0.01x))]。
+     *  根据怪物品级的不同，分母的上限分别为7,11,15。
+     *  该事件触发时生物自定义hurt方法、Forge伤害事件、原版护甲法抗已经完成计算
+     */
+    @SubscribeEvent
+    public static void ImmortalrsMobHurtDamageDecay(LivingDamageEvent event) {
+        if (DifficultyModeHelper.isPowerBattleMode()) {
+            LivingEntity hurtOne = event.getEntity();
+            if (!hurtOne.level().isClientSide) {
+                float oldDamage = event.getAmount();
+                float damage = oldDamage;
+                float damageDivisor = 0;
+
+                boolean needLimitDamage = false;
+                if (hurtOne.getType().is(ImmortalersDelightTags.IMMORTAL_NORMAL_MOBS)) {
+                    damageDivisor = 0.04f;
+                    if (hurtOne instanceof ImmortalersMob immMob) {
+                        damageDivisor = immMob.getDamageDivisor();
+                    }
+                    if (oldDamage > 100*damageDivisor) {
+                        float buffer = Math.min(7,1 + damageDivisor * (oldDamage - 100 * damageDivisor));
+                        damage = oldDamage / buffer;
+                        needLimitDamage = true;
+                    }
+                }
+
+                if (hurtOne.getType().is(ImmortalersDelightTags.IMMORTAL_ELITE_MOBS)) {
+                    damageDivisor = 0.05f;
+                    if (hurtOne instanceof ImmortalersMob immMob) {
+                        damageDivisor = immMob.getDamageDivisor();
+                    }
+                    if (oldDamage > 100*damageDivisor) {
+                        float buffer = Math.min(11,1 + damageDivisor * (oldDamage - 100 * damageDivisor));
+                        damage = oldDamage / buffer;
+                        needLimitDamage = true;
+                    }
+                }
+
+                if (hurtOne.getType().is(ImmortalersDelightTags.IMMORTAL_MINI_BOSS)) {
+                    damageDivisor = 0.08f;
+                    if (hurtOne instanceof ImmortalersMob immMob) {
+                        damageDivisor = immMob.getDamageDivisor();
+                    }
+                    if (oldDamage > 100*damageDivisor) {
+                        float buffer = Math.min(15,1 + damageDivisor * (oldDamage - 100 * damageDivisor));
+                        damage = oldDamage / buffer;
+                        needLimitDamage = true;
+                    }
+                }
+                if (needLimitDamage) event.setAmount(damage);
+            }
+        }
+    }
 }
Index: src/main/java/com/renyigesai/immortalers_delight/api/mobbase/AntiCheesedMob.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/api/mobbase/AntiCheesedMob.java b/src/main/java/com/renyigesai/immortalers_delight/api/mobbase/AntiCheesedMob.java
new file mode 100644
--- /dev/null	(date 1759461079579)
+++ b/src/main/java/com/renyigesai/immortalers_delight/api/mobbase/AntiCheesedMob.java	(date 1759461079579)
@@ -0,0 +1,12 @@
+package com.renyigesai.immortalers_delight.api.mobbase;
+
+public interface AntiCheesedMob extends ImmortalersMob{
+
+    //判断生物是否可以受伤，用于独立无敌帧
+    boolean canBeHurt();
+
+    //判断生物是否可以损失生命值，用于独立无敌帧
+    boolean canLoseHealth();
+
+
+}
Index: src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformCarrier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformCarrier.java b/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformCarrier.java
new file mode 100644
--- /dev/null	(date 1759571473662)
+++ b/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformCarrier.java	(date 1759571473662)
@@ -0,0 +1,4 @@
+package com.renyigesai.immortalers_delight.entities.living.lost_barracks;
+
+public class CuneiformCarrier {
+}
Index: src/main/java/com/renyigesai/immortalers_delight/client/renderer/entity/TerracottaGolemRenderer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.client.renderer.entity;\r\n\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport com.renyigesai.immortalers_delight.client.model.TerracottaGolemModel;\r\nimport com.renyigesai.immortalers_delight.entities.living.TerracottaGolem;\r\nimport net.minecraft.client.renderer.entity.EntityRendererProvider;\r\nimport net.minecraft.client.renderer.entity.MobRenderer;\r\nimport net.minecraft.resources.ResourceLocation;\r\n\r\npublic class TerracottaGolemRenderer extends MobRenderer<TerracottaGolem, TerracottaGolemModel<TerracottaGolem>> {\r\n    private static final ResourceLocation TEXTURE = new ResourceLocation(ImmortalersDelightMod.MODID, \"textures/entity/terracotta_golem.png\");\r\n\r\n    public TerracottaGolemRenderer(EntityRendererProvider.Context pContext) {\r\n        super(pContext,\r\n                new TerracottaGolemModel<>(pContext.bakeLayer(TerracottaGolemModel.TERRACOTTA_GOLEM)),\r\n                0.6F);\r\n    }\r\n\r\n    @Override\r\n    public ResourceLocation getTextureLocation(TerracottaGolem pEntity) {\r\n        return TEXTURE;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/client/renderer/entity/TerracottaGolemRenderer.java b/src/main/java/com/renyigesai/immortalers_delight/client/renderer/entity/TerracottaGolemRenderer.java
--- a/src/main/java/com/renyigesai/immortalers_delight/client/renderer/entity/TerracottaGolemRenderer.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/client/renderer/entity/TerracottaGolemRenderer.java	(date 1754961417887)
@@ -2,18 +2,20 @@
 
 import com.renyigesai.immortalers_delight.ImmortalersDelightMod;
 import com.renyigesai.immortalers_delight.client.model.TerracottaGolemModel;
+import com.renyigesai.immortalers_delight.client.model_layers.TerracottaGolemSideLayer;
 import com.renyigesai.immortalers_delight.entities.living.TerracottaGolem;
 import net.minecraft.client.renderer.entity.EntityRendererProvider;
 import net.minecraft.client.renderer.entity.MobRenderer;
 import net.minecraft.resources.ResourceLocation;
 
 public class TerracottaGolemRenderer extends MobRenderer<TerracottaGolem, TerracottaGolemModel<TerracottaGolem>> {
-    private static final ResourceLocation TEXTURE = new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem.png");
+    private static final ResourceLocation TEXTURE = new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/terracotta_golem.png");
 
     public TerracottaGolemRenderer(EntityRendererProvider.Context pContext) {
         super(pContext,
                 new TerracottaGolemModel<>(pContext.bakeLayer(TerracottaGolemModel.TERRACOTTA_GOLEM)),
                 0.6F);
+        this.addLayer(new TerracottaGolemSideLayer<>(this, pContext.getModelSet()));
     }
 
     @Override
Index: src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformCustodian.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformCustodian.java b/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformCustodian.java
new file mode 100644
--- /dev/null	(date 1759571503892)
+++ b/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformCustodian.java	(date 1759571503892)
@@ -0,0 +1,4 @@
+package com.renyigesai.immortalers_delight.entities.living.lost_barracks;
+
+public class CuneiformCustodian {
+}
Index: src/main/java/com/renyigesai/immortalers_delight/Config.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight;\r\n\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.item.Item;\r\nimport net.minecraftforge.common.ForgeConfigSpec;\r\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\r\nimport net.minecraftforge.fml.common.Mod;\r\nimport net.minecraftforge.fml.event.config.ModConfigEvent;\r\nimport net.minecraftforge.registries.ForgeRegistries;\r\n\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n// An example config class. This is not required, but it's a good idea to have one to keep your config organized.\r\n// Demonstrates how to use Forge's config APIs\r\n@Mod.EventBusSubscriber(modid = ImmortalersDelightMod.MODID, bus = Mod.EventBusSubscriber.Bus.MOD)\r\npublic class Config {\r\n    static final ForgeConfigSpec SPEC;\r\n    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();\r\n\r\n    private static final ForgeConfigSpec.BooleanValue LOG_DIRT_BLOCK = BUILDER.comment(\"Whether to log the dirt block on common setup\").define(\"logDirtBlock\", true);\r\n\r\n    private static final ForgeConfigSpec.IntValue MAGIC_NUMBER = BUILDER.comment(\"A magic number\").defineInRange(\"magicNumber\", 42, 0, Integer.MAX_VALUE);\r\n\r\n    public static final ForgeConfigSpec.ConfigValue<String> MAGIC_NUMBER_INTRODUCTION = BUILDER.comment(\"What you want the introduction message to be for the magic number\").define(\"magicNumberIntroduction\", \"The magic number is... \");\r\n\r\n    // a list of strings that are treated as resource locations for items\r\n    private static final ForgeConfigSpec.ConfigValue<List<? extends String>> ITEM_STRINGS = BUILDER.comment(\"A list of items to log on common setup.\").defineListAllowEmpty(\"items\", List.of(\"minecraft:iron_ingot\"), Config::validateItemName);\r\n\r\n    private static final ForgeConfigSpec.BooleanValue WEAK_POISON_HEALTH_OVERLAY = BUILDER.comment(\"Whether to enable the health value display override for the weak potion effect\").define(\"useWeakPoisonOverLay\", true);\r\n\r\n    private static final ForgeConfigSpec.IntValue ANCIENT_BOAT_NEEDED_1_NUMBER = BUILDER.comment(\"The number of #ancient_boat_need_1 that need to be held in hand to repair the ancient boat.\").defineInRange(\"count of [ancient_boat_need_1]\", 5, 0, Short.MAX_VALUE);\r\n\r\n    private static final ForgeConfigSpec.IntValue ANCIENT_BOAT_NEEDED_2_NUMBER = BUILDER.comment(\"The number of #ancient_boat_need_2 that need to be held in hand to repair the ancient boat.\").defineInRange(\"count of [ancient_boat_need_2]\", 2, 0, Short.MAX_VALUE);\r\n    private static final ForgeConfigSpec.IntValue ANCIENT_CHEST_BOAT_NEEDED_1_NUMBER = BUILDER.comment(\"The number of #ancient_chest_boat_need_1 that need to be held in hand to repair the ancient chest boat.\").defineInRange(\"count of [ancient_chest_boat_need_1]\", 5, 0, Short.MAX_VALUE);\r\n    private static final ForgeConfigSpec.IntValue ANCIENT_CHEST_BOAT_NEEDED_2_NUMBER = BUILDER.comment(\"The number of #ancient_chest_boat_need_2 that need to be held in hand to repair the ancient chest boat.\").defineInRange(\"count of [ancient_chest_boat_need_2]\", 1, 0, Short.MAX_VALUE);\r\n\r\n    public static final ForgeConfigSpec.ConfigValue<String> POWER_BATTLE_MODE = BUILDER\r\n            .comment(\"Greatly enhance effects and monsters. Use for that games using mods with additional cultivation content- such as Curios, any Skill mods or Guns mods.\")\r\n            .comment(\"true: Always enabled this mode.\")\r\n            .comment(\"default: Automatically determine whether to enable it based on the player's combat performance.\")\r\n            .comment(\"false: Never enabled this mode.\")\r\n            .define(\"powerBattleMode\", \"default\");\r\n\r\n    public static final ForgeConfigSpec.ConfigValue<List<? extends List<?>>> REVERSE_NORMAL_EFFECT;\r\n    public static final ForgeConfigSpec.ConfigValue<List<? extends List<?>>> REVERSE_INSTANT_EFFECT;\r\n    private static final ForgeConfigSpec.BooleanValue RIGHT_CLICK_HARVEST = BUILDER.comment(\"After opening, you can right-click to harvest the crops of the module\").define(\"rightClickHarvest\", true);\r\n\r\n    private static final ForgeConfigSpec.DoubleValue MININ_PROBABILITY = BUILDER.comment(\"Set the probability of the sniffer beast mining Mod items\").defineInRange(\"mininProbability\", 0.5,0.0,1.0);\r\n    static {\r\n        BUILDER.push(\"ReverseNormalEffect\")\r\n                .comment(\"Potion effects that can be reversed. Effect in this Map will be remove every tick. \",\r\n                        \"It does not prevent the application of effects, so it may not completely block the activation of harmful potion effects sometimes if only use this.\",\r\n                        \"\\\"input-effect-n\\\" means ID of the effect to be converted,\\\"output-effect-n\\\" means ID of the effect that conversion result.\",\r\n                        \"Format: [[\\\"input-effect-1\\\", \\\"output-effect-1\\\"], [\\\"input-effect-2\\\", \\\"output-effect-2\\\"], ...etc]\");\r\n        REVERSE_NORMAL_EFFECT = BUILDER\r\n                .defineList(\"reverseNormalEffect\", Arrays.asList\r\n                                (\r\n                                        Arrays.asList(\"minecraft:bad_omen\", \"minecraft:hero_of_the_village\"),\r\n                                        Arrays.asList(\"minecraft:unluck\", \"minecraft:luck\"),\r\n                                        Arrays.asList(\"minecraft:glowing\", \"minecraft:invisibility\"),\r\n                                        Arrays.asList(\"minecraft:slowness\", \"minecraft:speed\"),\r\n                                        Arrays.asList(\"minecraft:levitation\", \"minecraft:slow_falling\"),\r\n                                        Arrays.asList(\"minecraft:darkness\", \"minecraft:conduit_power\"),\r\n                                        Arrays.asList(\"minecraft:mining_fatigue\", \"minecraft:haste\"),\r\n                                        Arrays.asList(\"minecraft:weakness\", \"minecraft:strength\"),\r\n                                        Arrays.asList(\"minecraft:poison\", \"immortalers_delight:lingering_infusion\"),\r\n                                        Arrays.asList(\"minecraft:hunger\", \"immortalers_delight:satiated\"),\r\n                                        Arrays.asList(\"minecraft:wither\", \"immortalers_delight:vitality\"),\r\n                                        Arrays.asList(\"minecraft:nausea\", \"farmersdelight:nourishment\"),\r\n                                        Arrays.asList(\"minecraft:blindness\", \"minecraft:night_vision\"),\r\n                                        Arrays.asList(\"immortalers_delight:weak_poison\", \"farmersdelight:comfort\"),\r\n                                        Arrays.asList(\"immortalers_delight:weak_wither\", \"minecraft:regeneration\"),\r\n                                        Arrays.asList(\"twilightforest:frosty\", \"immortalers_delight:cool\"),\r\n                                        Arrays.asList(\"aether:inebriation\", \"aether:remedy\")\r\n\r\n                                ),\r\n                        it -> it instanceof List && ((List<?>) it).get(0) instanceof String && ((List<?>) it).get(1) instanceof String);\r\n\r\n        BUILDER.pop();\r\n\r\n        BUILDER.push(\"ReverseInstantEffect\")\r\n                .comment(\"It takes effect when the effect in this Map is being applied, blocking its application and reversing it.\",\r\n                        \"It only takes effect when the effect is being added, so it alone cannot convert existing effects.\",\r\n                        \"\\\"input-effect-n\\\" means ID of the effect to be converted,\\\"output-effect-n\\\" means ID of the effect that conversion result.\",\r\n                        \"Format: [[\\\"input-effect-1\\\", \\\"output-effect-1\\\"], [\\\"input-effect-2\\\", \\\"output-effect-2\\\"], ...etc]\");\r\n        REVERSE_INSTANT_EFFECT = BUILDER\r\n                .defineList(\"reverseInstantEffect\", Arrays.asList\r\n                                (\r\n                                        Arrays.asList(\"minecraft:instant_damage\", \"minecraft:instant_health\"),\r\n                                        Arrays.asList(\"minecraft:blindness\", \"minecraft:night_vision\")\r\n\r\n                                        ),\r\n                        it -> it instanceof List && ((List<?>) it).get(0) instanceof String && ((List<?>) it).get(1) instanceof String);\r\n\r\n        BUILDER.pop();\r\n\r\n        SPEC = BUILDER.build();\r\n    }\r\n\r\n    public static boolean logDirtBlock;\r\n    public static int magicNumber;\r\n    public static int ancientBoatNeeded_1;\r\n    public static int ancientChestBoatNeeded_1;\r\n    public static int ancientBoatNeeded_2;\r\n    public static int ancientChestBoatNeeded_2;\r\n    public static String magicNumberIntroduction;\r\n    public static Set<Item> items;\r\n    public static boolean rightClickHarvest;\r\n    public static double mininProbability;\r\n\r\n    public static boolean weakPoisonHealthOverlay;\r\n\r\n    public static String powerBattleMode;\r\n\r\n\r\n    private static boolean validateItemName(final Object obj) {\r\n        return obj instanceof final String itemName && ForgeRegistries.ITEMS.containsKey(new ResourceLocation(itemName));\r\n    }\r\n\r\n    @SubscribeEvent\r\n    static void onLoad(final ModConfigEvent event) {\r\n        logDirtBlock = LOG_DIRT_BLOCK.get();\r\n        magicNumber = MAGIC_NUMBER.get();\r\n        ancientBoatNeeded_1 = ANCIENT_BOAT_NEEDED_1_NUMBER.get();\r\n        ancientChestBoatNeeded_1 = ANCIENT_CHEST_BOAT_NEEDED_1_NUMBER.get();\r\n        ancientBoatNeeded_2 = ANCIENT_BOAT_NEEDED_2_NUMBER.get();\r\n        ancientChestBoatNeeded_2 = ANCIENT_CHEST_BOAT_NEEDED_2_NUMBER.get();\r\n        magicNumberIntroduction = MAGIC_NUMBER_INTRODUCTION.get();\r\n\r\n        // convert the list of strings into a set of items\r\n        items = ITEM_STRINGS.get().stream().map(itemName -> ForgeRegistries.ITEMS.getValue(new ResourceLocation(itemName))).collect(Collectors.toSet());\r\n\r\n        weakPoisonHealthOverlay = WEAK_POISON_HEALTH_OVERLAY.get();\r\n\r\n        powerBattleMode = POWER_BATTLE_MODE.get();\r\n        rightClickHarvest = RIGHT_CLICK_HARVEST.get();\r\n        mininProbability = MININ_PROBABILITY.get();\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/Config.java b/src/main/java/com/renyigesai/immortalers_delight/Config.java
--- a/src/main/java/com/renyigesai/immortalers_delight/Config.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/Config.java	(date 1754957745810)
@@ -42,6 +42,11 @@
             .comment("false: Never enabled this mode.")
             .define("powerBattleMode", "default");
 
+    private static final ForgeConfigSpec.ConfigValue<List<? extends String>> TERRACOTTA_GOLEM_SIDE_DECORATES = BUILDER
+            .comment("A list of items that can use on side of terracotta golem.")
+            .comment("You can add other item to this list, it's texture must named be the same as item id.")
+            .defineListAllowEmpty("items", List.of("minecraft:iron_ingot"), Config::validateItemName);
+
     public static final ForgeConfigSpec.ConfigValue<List<? extends List<?>>> REVERSE_NORMAL_EFFECT;
     public static final ForgeConfigSpec.ConfigValue<List<? extends List<?>>> REVERSE_INSTANT_EFFECT;
     private static final ForgeConfigSpec.BooleanValue RIGHT_CLICK_HARVEST = BUILDER.comment("After opening, you can right-click to harvest the crops of the module").define("rightClickHarvest", true);
Index: src/main/java/com/renyigesai/immortalers_delight/api/mobbase/ImmortalersMob.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/api/mobbase/ImmortalersMob.java b/src/main/java/com/renyigesai/immortalers_delight/api/mobbase/ImmortalersMob.java
new file mode 100644
--- /dev/null	(date 1759410222531)
+++ b/src/main/java/com/renyigesai/immortalers_delight/api/mobbase/ImmortalersMob.java	(date 1759410222531)
@@ -0,0 +1,102 @@
+package com.renyigesai.immortalers_delight.api.mobbase;
+
+import net.minecraft.core.particles.ParticleType;
+import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.Vec3;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public interface ImmortalersMob {
+
+    //获取生物的伤害百分比，用于超凡模式保底伤害
+    float getAttackProportion();
+
+    //获取生物的伤害除数，用于超凡模式的高伤害衰减
+    int getDamageDivisor();
+
+    boolean shouldBlastDamageHurt(LivingEntity target);
+
+    default void performBlastAttack(LivingEntity attacker, Vec3 pos, float range,
+                                    DamageSource source, float damage,
+                                    boolean isExplosion, boolean bypassCooldown, boolean isCircular) {
+        if (!attacker.level().isClientSide) {
+            ServerLevel serverLevel = (ServerLevel) attacker.level();
+
+            if (isExplosion) {
+                serverLevel.sendParticles(ParticleTypes.EXPLOSION,
+                        pos.x, pos.y, pos.z,
+                        10,
+                        0.5, 0.5, 0.5,
+                        0.1
+                );
+            }
+
+            doBlastDamage(getTargetsOfBlastDamage(attacker, pos, range, isCircular), pos, range, source, damage, true, bypassCooldown);
+        }
+    }
+
+    /**
+     * 获取指定范围内所有 LivingEntity 实体，用于范围伤害。
+     * 具有两种效果，圆形和正方形。
+     * @param attacker
+     * @param pos
+     * @param range
+     * @param isCircular
+     * @return
+     */
+    default List<LivingEntity> getTargetsOfBlastDamage(LivingEntity attacker, Vec3 pos, float range, boolean isCircular) {
+        if (!attacker.level().isClientSide) {
+            ServerLevel serverLevel = (ServerLevel) attacker.level();
+
+            AABB boundingBox = new AABB(
+                    pos.x - range, pos.y - range, pos.z - range,
+                    pos.x + range, pos.y + range, pos.z + range
+            );
+
+            List<LivingEntity> entitiesInRange = serverLevel.getEntitiesOfClass(
+                    LivingEntity.class,
+                    boundingBox,
+                    LivingEntity::isAlive
+            );
+
+            if (isCircular) {
+                entitiesInRange.removeIf(entity -> entity.distanceToSqr(pos) > range * range);
+            }
+            return entitiesInRange;
+        }
+        return new ArrayList<>();
+    }
+
+    /**
+     * 实际处理爆炸伤害与击退。默认范围越大的范围伤害击退越强。
+     * 具有两种模式，类似爆炸的伤害随范围衰减，另一种为全额伤害。
+     * @param targets
+     * @param pos
+     * @param range
+     * @param source
+     * @param damage
+     * @param isExplosion
+     * @param bypassCooldown
+     */
+    default void doBlastDamage(List<LivingEntity> targets, Vec3 pos, float range, DamageSource source, float damage, boolean isExplosion, boolean bypassCooldown) {
+        for (LivingEntity target : targets) {
+            if (shouldBlastDamageHurt(target)) {
+                if (bypassCooldown) {target.invulnerableTime = 0;}
+                if (isExplosion) {
+                    target.hurt(source, (float) (damage * damage / target.distanceToSqr(pos)));
+                } else target.hurt(source, damage);
+
+                double knockbackX = (target.getX() - pos.x) * 0.1;
+                double knockbackY = (target.getY() - pos.y > 0 ? range - (target.getY() - pos.y) : (range * -1) - (target.getY() - pos.y)) * 0.1;
+                double knockbackZ = (target.getZ() - pos.z) * 0.1;
+                target.setDeltaMovement(knockbackX, knockbackY, knockbackZ);
+            }
+
+        }
+    }
+}
Index: src/main/java/com/renyigesai/immortalers_delight/client/model_layers/TerracottaGolemSideLayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/client/model_layers/TerracottaGolemSideLayer.java b/src/main/java/com/renyigesai/immortalers_delight/client/model_layers/TerracottaGolemSideLayer.java
new file mode 100644
--- /dev/null	(date 1754964029862)
+++ b/src/main/java/com/renyigesai/immortalers_delight/client/model_layers/TerracottaGolemSideLayer.java	(date 1754964029862)
@@ -0,0 +1,167 @@
+package com.renyigesai.immortalers_delight.client.model_layers;
+
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.blaze3d.vertex.VertexConsumer;
+import com.renyigesai.immortalers_delight.ImmortalersDelightMod;
+import com.renyigesai.immortalers_delight.client.model.TerracottaGolemModel;
+import com.renyigesai.immortalers_delight.client.model.TerracottaGolemSideModel;
+import com.renyigesai.immortalers_delight.entities.living.TerracottaGolem;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.model.EntityModel;
+import net.minecraft.client.model.SkullModel;
+import net.minecraft.client.model.SlimeModel;
+import net.minecraft.client.model.geom.EntityModelSet;
+import net.minecraft.client.model.geom.ModelLayers;
+import net.minecraft.client.model.geom.PartPose;
+import net.minecraft.client.model.geom.builders.CubeListBuilder;
+import net.minecraft.client.model.geom.builders.LayerDefinition;
+import net.minecraft.client.model.geom.builders.MeshDefinition;
+import net.minecraft.client.model.geom.builders.PartDefinition;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.RenderType;
+import net.minecraft.client.renderer.entity.EntityRenderer;
+import net.minecraft.client.renderer.entity.EntityRendererProvider;
+import net.minecraft.client.renderer.entity.LivingEntityRenderer;
+import net.minecraft.client.renderer.entity.RenderLayerParent;
+import net.minecraft.client.renderer.entity.layers.RenderLayer;
+import net.minecraft.client.renderer.texture.OverlayTexture;
+import net.minecraft.core.BlockPos;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.Mth;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.projectile.WitherSkull;
+import net.minecraft.world.item.Items;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class TerracottaGolemSideLayer<T extends  TerracottaGolem> extends RenderLayer<T, TerracottaGolemModel<T>> {
+    private static final String BRICK_NAME = "decorated_pot_side";
+    private static final String ANGLER_NAME = "angler_pottery_pattern";
+    private static final String ARCHER_NAME = "archer_pottery_pattern";
+    private static final String ARMS_UP_NAME = "arms_up_pottery_pattern";
+    private static final String BLADE_NAME = "blade_pottery_pattern";
+    private static final String BREWER_NAME = "brewer_pottery_pattern";
+    private static final String BURN_NAME = "burn_pottery_pattern";
+    private static final String DANGER_NAME = "danger_pottery_pattern";
+    private static final String EXPLORER_NAME = "explorer_pottery_pattern";
+    private static final String FRIEND_NAME = "friend_pottery_pattern";
+    private static final String HEART_NAME = "heart_pottery_pattern";
+    private static final String HEARTBREAK_NAME = "heartbreak_pottery_pattern";
+    private static final String HOWL_NAME = "howl_pottery_pattern";
+    private static final String MINER_NAME = "miner_pottery_pattern";
+    private static final String MOURNER_NAME = "mourner_pottery_pattern";
+    private static final String PLENTY_NAME = "plenty_pottery_pattern";
+    private static final String PRIZE_NAME = "prize_pottery_pattern";
+    private static final String SHEAF_NAME = "sheaf_pottery_pattern";
+    private static final String SHELTER_NAME = "shelter_pottery_pattern";
+    private static final String SKULL_NAME = "skull_pottery_pattern";
+    private static final String SNORT_NAME = "snort_pottery_pattern";
+    private final List<String> properties;
+    private final List<ResourceLocation> textrues;
+    private final EntityModel<T> model;
+
+    public TerracottaGolemSideLayer(RenderLayerParent<T, TerracottaGolemModel<T>> pRenderer, EntityModelSet pModelSet) {
+        super(pRenderer);
+        this.model = new TerracottaGolemSideModel<>(pModelSet.bakeLayer(TerracottaGolemSideModel.TERRACOTTA_GOLEM_SIDE_LAYER));
+        this.properties = new ArrayList<String>();
+        this.textrues = new ArrayList<ResourceLocation>();
+        createTextures();
+    }
+
+    public void render(PoseStack pPoseStack, MultiBufferSource pBuffer, int pPackedLight, T pLivingEntity, float pLimbSwing, float pLimbSwingAmount, float pPartialTicks, float pAgeInTicks, float pNetHeadYaw, float pHeadPitch) {
+
+        this.getParentModel().copyPropertiesTo(this.model);
+        this.model.prepareMobModel(pLivingEntity, pLimbSwing, pLimbSwingAmount, pPartialTicks);
+        this.model.setupAnim(pLivingEntity, pLimbSwing, pLimbSwingAmount, pAgeInTicks, pNetHeadYaw, pHeadPitch);
+        if (this.model instanceof TerracottaGolemSideModel) {
+            for (int j = 0; j < 3; ++j) {
+                VertexConsumer vertexconsumer = pBuffer.getBuffer(this.model.renderType(this.getTextureLocation(pLivingEntity,j)));
+                ((TerracottaGolemSideModel<T>) this.model).renderSide(j, pPoseStack, vertexconsumer, pPackedLight, LivingEntityRenderer.getOverlayCoords(pLivingEntity, 0.0F), 1.0F, 1.0F, 1.0F, 1.0F);
+            }
+        } else {
+            VertexConsumer vertexconsumer = pBuffer.getBuffer(this.model.renderType(this.getTextureLocation(pLivingEntity)));
+            this.model.renderToBuffer(pPoseStack, vertexconsumer, pPackedLight, LivingEntityRenderer.getOverlayCoords(pLivingEntity, 0.0F), 1.0F, 1.0F, 1.0F, 1.0F);
+        }
+//        Minecraft minecraft = Minecraft.getInstance();
+//        boolean flag = minecraft.shouldEntityAppearGlowing(pLivingEntity) && pLivingEntity.isInvisible();
+//        if (!pLivingEntity.isInvisible() || flag) {
+//            VertexConsumer vertexconsumer;
+//            if (flag) {
+//                //发光轮廓渲染缓冲区
+//                vertexconsumer = pBuffer.getBuffer(RenderType.outline(this.getTextureLocation(pLivingEntity)));
+//            } else {
+//                //半透明渲染缓冲区
+//                vertexconsumer = pBuffer.getBuffer(RenderType.entityTranslucent(this.getTextureLocation(pLivingEntity)));
+//            }
+//
+//        }
+    }
+
+
+    /**
+     * Returns the location of an entity's texture.
+     */
+    public ResourceLocation getTextureLocation(TerracottaGolem pEntity) {
+        return this.textrues.get(0);
+    }
+
+    public ResourceLocation getTextureLocation(TerracottaGolem pEntity, int pSlotID) {
+        if (pSlotID == TerracottaGolem.INV_SLOT_LEFT) {
+            return this.textrues.get(pEntity.getLeftDecorateID());
+        }
+        if (pSlotID == TerracottaGolem.INV_SLOT_BACK) {
+            return this.textrues.get(pEntity.getBackDecorateID());
+        }
+        if (pSlotID == TerracottaGolem.INV_SLOT_RIGHT) {
+            return this.textrues.get(pEntity.getRightDecorateID());
+        }
+        return this.textrues.get(0);
+    }
+
+
+    public void createTextures() {
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + BRICK_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + ANGLER_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + ARCHER_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + ARMS_UP_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + BLADE_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + BREWER_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + BURN_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + DANGER_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + EXPLORER_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + FRIEND_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + HEART_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + HEARTBREAK_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + HOWL_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + MINER_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + MOURNER_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + PLENTY_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + PRIZE_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + SHEAF_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + SHELTER_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + SKULL_NAME + ".png"));
+        textrues.add(new ResourceLocation(ImmortalersDelightMod.MODID, "textures/entity/terracotta_golem/" + SNORT_NAME + ".png"));
+        properties.add(BRICK_NAME);
+        properties.add(ANGLER_NAME);
+        properties.add(ARCHER_NAME);
+        properties.add(ARMS_UP_NAME);
+        properties.add(BLADE_NAME);
+        properties.add(BREWER_NAME);
+        properties.add(BURN_NAME);
+        properties.add(DANGER_NAME);
+        properties.add(EXPLORER_NAME);
+        properties.add(FRIEND_NAME);
+        properties.add(HEART_NAME);
+        properties.add(HEARTBREAK_NAME);
+        properties.add(HOWL_NAME);
+        properties.add(MINER_NAME);
+        properties.add(MOURNER_NAME);
+        properties.add(PLENTY_NAME);
+        properties.add(PRIZE_NAME);
+        properties.add(SHEAF_NAME);
+        properties.add(SHELTER_NAME);
+        properties.add(SKULL_NAME);
+        properties.add(SNORT_NAME);
+    }
+}
Index: src/main/java/com/renyigesai/immortalers_delight/screen/TerracottaGolemMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.screen;\r\n\r\n\r\nimport com.renyigesai.immortalers_delight.entities.living.TerracottaGolem;\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightMenuTypes;\r\nimport net.minecraft.network.FriendlyByteBuf;\r\nimport net.minecraft.world.Container;\r\nimport net.minecraft.world.entity.player.Inventory;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.inventory.AbstractContainerMenu;\r\nimport net.minecraft.world.inventory.Slot;\r\nimport net.minecraft.world.item.ItemStack;\r\n\r\npublic class TerracottaGolemMenu extends AbstractContainerMenu {\r\n    private final Container horseContainer;\r\n    private final TerracottaGolem horse;\r\n\r\n    // 客户端专用构造函数\r\n    public TerracottaGolemMenu(int id, Inventory inventory, FriendlyByteBuf buf)\r\n    {\r\n        this(id,inventory, (TerracottaGolem)inventory.player.level().getEntity(buf.readVarInt())); // 反序列化实体id，再调用统一构造\r\n    }\r\n\r\n    // 统一构造函数\r\n    public TerracottaGolemMenu(int pContainerId, Inventory pPlayerInventory, final TerracottaGolem pHorse) {\r\n        super(ImmortalersDelightMenuTypes.TERRACOTTA_GOLEM_MENU.get(), pContainerId);\r\n        this.horseContainer = pHorse.getInventory();\r\n        this.horse = pHorse;\r\n        int i = 3;\r\n        horseContainer.startOpen(pPlayerInventory.player);\r\n        int j = -18;\r\n//        this.addSlot(new Slot(pContainer, 0, 8, 18) {\r\n//            /**\r\n//             * Check if the stack is allowed to be placed in this slot, used for armor slots as well as furnace fuel.\r\n//             */\r\n//            public boolean mayPlace(ItemStack p_39677_) {\r\n//                return p_39677_.is(Items.SADDLE) && !this.hasItem() && pHorse.isSaddleable();\r\n//            }\r\n//\r\n//            /**\r\n//             * Actually only call when we want to render the white square effect over the slots. Return always True, except\r\n//             * for the armor slot of the Donkey/Mule (we can't interact with the Undead and Skeleton horses)\r\n//             */\r\n//            public boolean isActive() {\r\n//                return pHorse.isSaddleable();\r\n//            }\r\n//        });\r\n//        this.addSlot(new Slot(pContainer, 1, 8, 36) {\r\n//            /**\r\n//             * Check if the stack is allowed to be placed in this slot, used for armor slots as well as furnace fuel.\r\n//             */\r\n//            public boolean mayPlace(ItemStack p_39690_) {\r\n//                return pHorse.isArmor(p_39690_);\r\n//            }\r\n//\r\n//            /**\r\n//             * Actually only call when we want to render the white square effect over the slots. Return always True, except\r\n//             * for the armor slot of the Donkey/Mule (we can't interact with the Undead and Skeleton horses)\r\n//             */\r\n//            public boolean isActive() {\r\n//                return pHorse.canWearArmor();\r\n//            }\r\n//\r\n//            /**\r\n//             * Returns the maximum stack size for a given slot (usually the same as getInventoryStackLimit(), but 1 in the\r\n//             * case of armor slots)\r\n//             */\r\n//            public int getMaxStackSize() {\r\n//                return 1;\r\n//            }\r\n//        });\r\n        if (this.hasChest(pHorse)) {\r\n            for(int k = 0; k < 4; ++k) {\r\n                for(int l = 0; l < pHorse.getInventoryColumns(); ++l) {\r\n                    this.addSlot(new Slot(horseContainer, 3 + l + k * pHorse.getInventoryColumns(), 80 + l * 18, 8 + k * 18));\r\n                }\r\n            }\r\n        }\r\n\r\n        for(int i1 = 0; i1 < 3; ++i1) {\r\n            for(int k1 = 0; k1 < 9; ++k1) {\r\n                this.addSlot(new Slot(pPlayerInventory, k1 + i1 * 9 + 9, 8 + k1 * 18, 102 + i1 * 18 + -18));\r\n            }\r\n        }\r\n\r\n        for(int j1 = 0; j1 < 9; ++j1) {\r\n            this.addSlot(new Slot(pPlayerInventory, j1, 8 + j1 * 18, 142));\r\n        }\r\n\r\n    }\r\n\r\n    // 给予客户端一个getDisplayName的路径\r\n    public TerracottaGolem getHorse()\r\n    {\r\n        return horse;\r\n    }\r\n\r\n\r\n    /**\r\n     * Determines whether supplied player can use this container\r\n     */\r\n    public boolean stillValid(Player pPlayer) {\r\n        return !this.horse.hasInventoryChanged(this.horseContainer) && this.horseContainer.stillValid(pPlayer) && this.horse.isAlive() && this.horse.distanceTo(pPlayer) < 8.0F;\r\n    }\r\n\r\n    private boolean hasChest(TerracottaGolem pHorse) {\r\n        return pHorse.hasChest();\r\n    }\r\n\r\n    /**\r\n     * Handle when the stack in slot {@code index} is shift-clicked. Normally this moves the stack between the player\r\n     * inventory and the other inventory(s).\r\n     */\r\n    public ItemStack quickMoveStack(Player pPlayer, int pIndex) {\r\n        ItemStack itemstack = ItemStack.EMPTY;\r\n        Slot slot = this.slots.get(pIndex);\r\n        if (slot != null && slot.hasItem()) {\r\n            ItemStack itemstack1 = slot.getItem();\r\n            itemstack = itemstack1.copy();\r\n            int i = this.horseContainer.getContainerSize();\r\n            if (pIndex < i) {\r\n                if (!this.moveItemStackTo(itemstack1, i, this.slots.size(), true)) {\r\n                    return ItemStack.EMPTY;\r\n                }\r\n            } else if (this.getSlot(1).mayPlace(itemstack1) && !this.getSlot(1).hasItem()) {\r\n                if (!this.moveItemStackTo(itemstack1, 1, 2, false)) {\r\n                    return ItemStack.EMPTY;\r\n                }\r\n            } else if (this.getSlot(0).mayPlace(itemstack1)) {\r\n                if (!this.moveItemStackTo(itemstack1, 0, 1, false)) {\r\n                    return ItemStack.EMPTY;\r\n                }\r\n            } else if (i <= 2 || !this.moveItemStackTo(itemstack1, 2, i, false)) {\r\n                int j = i + 27;\r\n                int k = j + 9;\r\n                if (pIndex >= j && pIndex < k) {\r\n                    if (!this.moveItemStackTo(itemstack1, i, j, false)) {\r\n                        return ItemStack.EMPTY;\r\n                    }\r\n                } else if (pIndex >= i && pIndex < j) {\r\n                    if (!this.moveItemStackTo(itemstack1, j, k, false)) {\r\n                        return ItemStack.EMPTY;\r\n                    }\r\n                } else if (!this.moveItemStackTo(itemstack1, j, j, false)) {\r\n                    return ItemStack.EMPTY;\r\n                }\r\n\r\n                return ItemStack.EMPTY;\r\n            }\r\n\r\n            if (itemstack1.isEmpty()) {\r\n                slot.setByPlayer(ItemStack.EMPTY);\r\n            } else {\r\n                slot.setChanged();\r\n            }\r\n        }\r\n\r\n        return itemstack;\r\n    }\r\n\r\n    /**\r\n     * Called when the container is closed.\r\n     */\r\n    public void removed(Player pPlayer) {\r\n        super.removed(pPlayer);\r\n        this.horseContainer.stopOpen(pPlayer);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/screen/TerracottaGolemMenu.java b/src/main/java/com/renyigesai/immortalers_delight/screen/TerracottaGolemMenu.java
--- a/src/main/java/com/renyigesai/immortalers_delight/screen/TerracottaGolemMenu.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/screen/TerracottaGolemMenu.java	(date 1754961135387)
@@ -4,6 +4,7 @@
 import com.renyigesai.immortalers_delight.entities.living.TerracottaGolem;
 import com.renyigesai.immortalers_delight.init.ImmortalersDelightMenuTypes;
 import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.tags.ItemTags;
 import net.minecraft.world.Container;
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
@@ -26,25 +27,13 @@
         super(ImmortalersDelightMenuTypes.TERRACOTTA_GOLEM_MENU.get(), pContainerId);
         this.horseContainer = pHorse.getInventory();
         this.horse = pHorse;
-        int i = 3;
+
         horseContainer.startOpen(pPlayerInventory.player);
         int j = -18;
-//        this.addSlot(new Slot(pContainer, 0, 8, 18) {
-//            /**
-//             * Check if the stack is allowed to be placed in this slot, used for armor slots as well as furnace fuel.
-//             */
-//            public boolean mayPlace(ItemStack p_39677_) {
-//                return p_39677_.is(Items.SADDLE) && !this.hasItem() && pHorse.isSaddleable();
-//            }
-//
-//            /**
-//             * Actually only call when we want to render the white square effect over the slots. Return always True, except
-//             * for the armor slot of the Donkey/Mule (we can't interact with the Undead and Skeleton horses)
-//             */
-//            public boolean isActive() {
-//                return pHorse.isSaddleable();
-//            }
-//        });
+        for (int i = 0; i < 3; ++i) {
+            this.addSlot(new PreviewSlot(horseContainer, i, 8, 18* (i + 1)));
+        }
+
 //        this.addSlot(new Slot(pContainer, 1, 8, 36) {
 //            /**
 //             * Check if the stack is allowed to be placed in this slot, used for armor slots as well as furnace fuel.
@@ -165,5 +154,24 @@
         super.removed(pPlayer);
         this.horseContainer.stopOpen(pPlayer);
     }
+    class PreviewSlot extends Slot {
+        public PreviewSlot(Container p_40223_, int p_40224_, int p_40225_, int p_40226_) {
+            super(p_40223_, p_40224_, p_40225_, p_40226_);
+        }
+        /**
+         * Check if the stack is allowed to be placed in this slot, used for armor slots as well as furnace fuel.
+         */
+        public boolean mayPlace(ItemStack p_39677_) {
+            return p_39677_.is(ItemTags.DECORATED_POT_SHERDS) && !this.hasItem();
+        }
+
+        /**
+         * Actually only call when we want to render the white square effect over the slots. Return always True, except
+         * for the armor slot of the Donkey/Mule (we can't interact with the Undead and Skeleton horses)
+         */
+//        public boolean isActive() {
+//            return pHorse.isSaddleable();
+//        }
+    }
 
 }
Index: src/main/java/com/renyigesai/immortalers_delight/recipe/PillagerKnifeAddPotionRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/recipe/PillagerKnifeAddPotionRecipe.java b/src/main/java/com/renyigesai/immortalers_delight/recipe/PillagerKnifeAddPotionRecipe.java
new file mode 100644
--- /dev/null	(date 1760787864336)
+++ b/src/main/java/com/renyigesai/immortalers_delight/recipe/PillagerKnifeAddPotionRecipe.java	(date 1760787864336)
@@ -0,0 +1,119 @@
+package com.renyigesai.immortalers_delight.recipe;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonObject;
+import com.renyigesai.immortalers_delight.ImmortalersDelightMod;
+import com.renyigesai.immortalers_delight.init.ImmortalersDelightItems;
+import net.minecraft.core.NonNullList;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.GsonHelper;
+import net.minecraft.world.inventory.CraftingContainer;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.item.alchemy.PotionUtils;
+import net.minecraft.world.item.crafting.*;
+import net.minecraft.world.level.Level;
+import net.minecraftforge.common.crafting.CraftingHelper;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class PillagerKnifeAddPotionRecipe extends CustomRecipe {
+    public PillagerKnifeAddPotionRecipe(ResourceLocation pId, CraftingBookCategory pCategory) {
+        super(pId, pCategory);
+    }
+
+    /**
+     * Used to check if a recipe matches current crafting inventory
+     */
+    public boolean matches(CraftingContainer pInv, Level pLevel) {
+        boolean hasPotion = false;
+        boolean hasKnife = false;
+        for(int i = 0; i < pInv.getWidth(); ++i) {
+            for(int j = 0; j < pInv.getHeight(); ++j) {
+                ItemStack itemstack = pInv.getItem(i + j * pInv.getWidth());
+                if (itemstack.is(Items.POTION)) {
+                    if (hasPotion) {
+                        return false;
+                    } else {
+                        hasPotion = true;
+                    }
+                }
+                if (itemstack.is(ImmortalersDelightItems.PILLAGER_KNIFE.get())) {
+                    if (hasKnife) {
+                        return false;
+                    } else {
+                        hasKnife = true;
+                    }
+                }
+            }
+        }
+        System.out.println("hasPotion:"+hasPotion+" hasKnife:"+hasKnife);
+        return hasPotion && hasKnife;
+    }
+
+    public @NotNull ItemStack assemble(CraftingContainer pInv, @NotNull RegistryAccess pRegistryAccess) {
+        ItemStack potion = ItemStack.EMPTY;
+        ItemStack knife = ItemStack.EMPTY;
+        for(int i = 0; i < pInv.getWidth(); ++i) {
+            for(int j = 0; j < pInv.getHeight(); ++j) {
+                ItemStack itemstack = pInv.getItem(i + j * pInv.getWidth());
+                if (itemstack.is(Items.POTION)) {
+                    potion = itemstack;
+                }
+                if (itemstack.is(ImmortalersDelightItems.PILLAGER_KNIFE.get())) {
+                    knife = itemstack;
+                }
+            }
+        }
+        System.out.println("potion_stack:"+potion+" knife_stack:"+knife);
+        if (potion.isEmpty() || knife.isEmpty()) {
+            return ItemStack.EMPTY;
+        } else {
+            ItemStack itemstack1 = knife.copy();
+            PotionUtils.setPotion(itemstack1, PotionUtils.getPotion(potion));
+            PotionUtils.setCustomEffects(itemstack1, PotionUtils.getCustomEffects(potion));
+            return itemstack1;
+        }
+    }
+
+    /**
+     * Used to determine if this recipe can fit in a grid of the given width/height
+     */
+    public boolean canCraftInDimensions(int pWidth, int pHeight) {
+        return pWidth >= 2 && pHeight >= 2;
+    }
+
+    @Override
+    public @NotNull RecipeType<?> getType() {return Type.INSTANCE;}
+    @Override
+    public @NotNull RecipeSerializer<?> getSerializer() {
+        return RecipeSerializer.TIPPED_ARROW;
+    }
+
+    public static class Type implements RecipeType<PillagerKnifeAddPotionRecipe> {
+        public static final Type INSTANCE = new Type();
+        public static final String ID = "pillagers_knife_add_potion";
+    }
+
+    public static class Serializer implements RecipeSerializer<PillagerKnifeAddPotionRecipe> {
+        public static final Serializer INSTANCE = new Serializer();
+        public static final ResourceLocation ID = new ResourceLocation(ImmortalersDelightMod.MODID, "pillagers_knife_add_potion");
+
+        @Override
+        public PillagerKnifeAddPotionRecipe fromJson(ResourceLocation pRecipeId, JsonObject pSerializedRecipe) {
+            return new PillagerKnifeAddPotionRecipe(pRecipeId, CraftingBookCategory.MISC);
+        }
+
+        @Override
+        public @Nullable PillagerKnifeAddPotionRecipe fromNetwork(ResourceLocation pRecipeId, FriendlyByteBuf pBuffer) {
+            return new PillagerKnifeAddPotionRecipe(pRecipeId, CraftingBookCategory.MISC);
+        }
+
+        @Override
+        public void toNetwork(FriendlyByteBuf pBuffer, PillagerKnifeAddPotionRecipe pRecipe) {
+
+        }
+    }
+}
Index: src/main/java/com/renyigesai/immortalers_delight/client/model/TerracottaGolemModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.client.model;\r\nimport com.renyigesai.immortalers_delight.client.animation.TerracottaGolemAnimation;\r\nimport com.renyigesai.immortalers_delight.entities.living.TerracottaGolem;\r\nimport net.minecraft.client.model.HierarchicalModel;\r\nimport net.minecraft.client.model.geom.ModelLayerLocation;\r\nimport net.minecraft.client.model.geom.ModelPart;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport com.mojang.blaze3d.vertex.PoseStack;\r\nimport com.mojang.blaze3d.vertex.VertexConsumer;\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport net.minecraft.client.model.geom.PartPose;\r\nimport net.minecraft.client.model.geom.builders.*;\r\nimport net.minecraft.world.entity.Entity;\r\n// Made with Blockbench 4.12.6\r\n// Exported for Minecraft version 1.17 or later with Mojang mappings\r\n// Paste this class into your mod and generate all required imports\r\n\r\npublic class TerracottaGolemModel<T extends Entity> extends HierarchicalModel<T> {\r\n\t// This layer location should be baked with EntityRendererProvider.Context in the entity renderer and passed into this model's constructor\r\n\tpublic static final ModelLayerLocation TERRACOTTA_GOLEM = new ModelLayerLocation(new ResourceLocation(ImmortalersDelightMod.MODID, \"terracotta_golem\"), \"main\");\r\n\tprivate final ModelPart Body;\r\n\tprivate final ModelPart right_arm;\r\n\tprivate final ModelPart right_bristles_1;\r\n\tprivate final ModelPart right_bristles_2;\r\n\tprivate final ModelPart right_blade;\r\n\tprivate final ModelPart right_bristles_3;\r\n\tprivate final ModelPart left_arm;\r\n\tprivate final ModelPart left_bristles_1;\r\n\tprivate final ModelPart left_bristles_2;\r\n\tprivate final ModelPart left_blade;\r\n\tprivate final ModelPart left_bristles_3;\r\n\tprivate final ModelPart RightLeg;\r\n\tprivate final ModelPart LeftLeg;\r\n\r\n\tpublic TerracottaGolemModel(ModelPart root) {\r\n\t\tthis.Body = root.getChild(\"Body\");\r\n\t\tthis.right_arm = this.Body.getChild(\"right_arm\");\r\n\t\tthis.right_bristles_1 = this.right_arm.getChild(\"right_bristles_1\");\r\n\t\tthis.right_bristles_2 = this.right_arm.getChild(\"right_bristles_2\");\r\n\t\tthis.right_blade = this.right_bristles_2.getChild(\"right_blade\");\r\n\t\tthis.right_bristles_3 = this.right_arm.getChild(\"right_bristles_3\");\r\n\t\tthis.left_arm = this.Body.getChild(\"left_arm\");\r\n\t\tthis.left_bristles_1 = this.left_arm.getChild(\"left_bristles_1\");\r\n\t\tthis.left_bristles_2 = this.left_arm.getChild(\"left_bristles_2\");\r\n\t\tthis.left_blade = this.left_bristles_2.getChild(\"left_blade\");\r\n\t\tthis.left_bristles_3 = this.left_arm.getChild(\"left_bristles_3\");\r\n\t\tthis.RightLeg = root.getChild(\"RightLeg\");\r\n\t\tthis.LeftLeg = root.getChild(\"LeftLeg\");\r\n\t}\r\n\r\n\tpublic static LayerDefinition createBodyLayer() {\r\n\t\tMeshDefinition meshdefinition = new MeshDefinition();\r\n\t\tPartDefinition partdefinition = meshdefinition.getRoot();\r\n\r\n\t\tPartDefinition Body = partdefinition.addOrReplaceChild(\"Body\", CubeListBuilder.create().texOffs(0, 0).addBox(-9.0F, -18.0F, -8.0F, 18.0F, 18.0F, 18.0F, new CubeDeformation(0.0F))\r\n\t\t.texOffs(88, 0).addBox(-5.0F, -20.0F, -4.0F, 10.0F, 2.0F, 10.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 20.0F, 0.0F));\r\n\r\n\t\tPartDefinition right_arm = Body.addOrReplaceChild(\"right_arm\", CubeListBuilder.create(), PartPose.offset(0.0F, -9.0F, 0.0F));\r\n\r\n\t\tPartDefinition right_bristles_1 = right_arm.addOrReplaceChild(\"right_bristles_1\", CubeListBuilder.create().texOffs(64, 36).addBox(-15.5F, -8.0F, -11.0F, 6.0F, 20.0F, 6.0F, new CubeDeformation(0.25F))\r\n\t\t.texOffs(88, 49).addBox(-15.5F, 12.0F, -11.0F, 6.0F, 3.0F, 10.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, -2.0F, 0.0F));\r\n\r\n\t\tPartDefinition right_bristles_2 = right_arm.addOrReplaceChild(\"right_bristles_2\", CubeListBuilder.create(), PartPose.offset(0.0F, 0.0F, 0.0F));\r\n\r\n\t\tPartDefinition cube_r1 = right_bristles_2.addOrReplaceChild(\"cube_r1\", CubeListBuilder.create().texOffs(64, 46).addBox(0.0F, 0.0F, -4.0F, 0.0F, 18.0F, 16.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(-14.0F, -1.0F, -13.0F, -0.7854F, 0.0F, 1.5708F));\r\n\r\n\t\tPartDefinition right_blade = right_bristles_2.addOrReplaceChild(\"right_blade\", CubeListBuilder.create(), PartPose.offset(-9.0F, 0.0F, 0.0F));\r\n\r\n\t\tPartDefinition cube_r2 = right_blade.addOrReplaceChild(\"cube_r2\", CubeListBuilder.create().texOffs(96, 46).addBox(0.0F, 0.0F, -4.0F, 0.0F, 18.0F, 16.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(-4.0F, -1.0F, 15.0F, 0.7854F, 0.0F, 1.5708F));\r\n\r\n\t\tPartDefinition right_bristles_3 = right_arm.addOrReplaceChild(\"right_bristles_3\", CubeListBuilder.create().texOffs(64, 84).addBox(30.0F, -2.0F, -1.0F, 3.0F, 3.0F, 3.0F, new CubeDeformation(0.0F))\r\n\t\t.texOffs(76, 84).addBox(-15.0F, -2.0F, -1.0F, 3.0F, 3.0F, 3.0F, new CubeDeformation(0.0F))\r\n\t\t.texOffs(88, 84).addBox(7.0F, -2.0F, 21.0F, 3.0F, 3.0F, 3.0F, new CubeDeformation(0.0F))\r\n\t\t.texOffs(100, 84).addBox(7.0F, -2.0F, -24.0F, 3.0F, 3.0F, 3.0F, new CubeDeformation(0.0F)), PartPose.offset(-9.0F, 4.0F, 0.0F));\r\n\r\n\t\tPartDefinition cubeLayer4_r1 = right_bristles_3.addOrReplaceChild(\"cubeLayer4_r1\", CubeListBuilder.create().texOffs(100, 90).addBox(-1.5F, -1.5F, -1.5F, 3.0F, 3.0F, 3.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(8.5F, -0.5F, -22.5F, -0.7854F, -0.7854F, 0.7854F));\r\n\r\n\t\tPartDefinition cubeLayer3_r1 = right_bristles_3.addOrReplaceChild(\"cubeLayer3_r1\", CubeListBuilder.create().texOffs(88, 90).addBox(-1.5F, -1.5F, -1.5F, 3.0F, 3.0F, 3.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(8.5F, -0.5F, 22.5F, -0.7854F, -0.7854F, 0.7854F));\r\n\r\n\t\tPartDefinition cubeLayer2_r1 = right_bristles_3.addOrReplaceChild(\"cubeLayer2_r1\", CubeListBuilder.create().texOffs(76, 90).addBox(-1.5F, -1.5F, -1.5F, 3.0F, 3.0F, 3.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(-13.5F, -0.5F, 0.5F, -0.7854F, -0.7854F, 0.7854F));\r\n\r\n\t\tPartDefinition cubeLayer1_r1 = right_bristles_3.addOrReplaceChild(\"cubeLayer1_r1\", CubeListBuilder.create().texOffs(64, 90).addBox(-1.5F, -1.5F, -1.5F, 3.0F, 3.0F, 3.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(31.5F, -0.5F, 0.5F, -0.7854F, -0.7854F, 0.7854F));\r\n\r\n\t\tPartDefinition left_arm = Body.addOrReplaceChild(\"left_arm\", CubeListBuilder.create(), PartPose.offset(0.0F, -9.0F, 0.0F));\r\n\r\n\t\tPartDefinition left_bristles_1 = left_arm.addOrReplaceChild(\"left_bristles_1\", CubeListBuilder.create().texOffs(0, 36).addBox(9.5F, -8.0F, -11.0F, 6.0F, 20.0F, 6.0F, new CubeDeformation(0.25F))\r\n\t\t.texOffs(24, 49).addBox(9.5F, 12.0F, -11.0F, 6.0F, 3.0F, 10.0F, new CubeDeformation(0.25F)), PartPose.offset(0.0F, -2.0F, 0.0F));\r\n\r\n\t\tPartDefinition left_bristles_2 = left_arm.addOrReplaceChild(\"left_bristles_2\", CubeListBuilder.create(), PartPose.offset(0.0F, 0.0F, 0.0F));\r\n\r\n\t\tPartDefinition cube_r3 = left_bristles_2.addOrReplaceChild(\"cube_r3\", CubeListBuilder.create().texOffs(0, 46).addBox(0.0F, 0.0F, -12.0F, 0.0F, 18.0F, 16.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(14.0F, -1.0F, -13.0F, -0.7854F, 0.0F, -1.5708F));\r\n\r\n\t\tPartDefinition left_blade = left_bristles_2.addOrReplaceChild(\"left_blade\", CubeListBuilder.create(), PartPose.offset(-8.0F, 39.0F, 9.0F));\r\n\r\n\t\tPartDefinition cube_r4 = left_blade.addOrReplaceChild(\"cube_r4\", CubeListBuilder.create().texOffs(32, 46).addBox(0.0F, 0.0F, -12.0F, 0.0F, 18.0F, 16.0F, new CubeDeformation(0.0F)), PartPose.offsetAndRotation(20.0F, -40.0F, 5.0F, 0.7854F, 0.0F, -1.5708F));\r\n\r\n\t\tPartDefinition left_bristles_3 = left_arm.addOrReplaceChild(\"left_bristles_3\", CubeListBuilder.create().texOffs(0, 90).addBox(-4.0F, -1.0F, -25.0F, 8.0F, 2.0F, 4.0F, new CubeDeformation(0.0F))\r\n\t\t.texOffs(24, 90).addBox(-4.0F, -1.0F, 21.0F, 8.0F, 2.0F, 4.0F, new CubeDeformation(0.0F))\r\n\t\t.texOffs(0, 80).addBox(21.0F, -1.0F, -4.0F, 4.0F, 2.0F, 8.0F, new CubeDeformation(0.0F))\r\n\t\t.texOffs(24, 80).addBox(-25.0F, -1.0F, -4.0F, 4.0F, 2.0F, 8.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 1.0F, 0.0F));\r\n\r\n\t\tPartDefinition RightLeg = partdefinition.addOrReplaceChild(\"RightLeg\", CubeListBuilder.create().texOffs(108, 17).addBox(-2.0F, 12.0F, -2.5F, 4.0F, 5.0F, 6.0F, new CubeDeformation(0.0F)), PartPose.offset(-4.0F, 7.0F, 0.0F));\r\n\r\n\t\tPartDefinition LeftLeg = partdefinition.addOrReplaceChild(\"LeftLeg\", CubeListBuilder.create().texOffs(88, 17).addBox(-2.0F, 12.0F, -2.5F, 4.0F, 5.0F, 6.0F, new CubeDeformation(0.0F)), PartPose.offset(4.0F, 7.0F, 0.0F));\r\n\r\n\t\treturn LayerDefinition.create(meshdefinition, 128, 128);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void setupAnim(Entity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {\r\n\t\tthis.root().getAllParts().forEach(ModelPart::resetPose);\r\n\t\tthis.animateWalk(TerracottaGolemAnimation.WALK, limbSwing, limbSwingAmount,2f,2.5f);\r\n\t\tthis.animate(TerracottaGolem.idleAnimationState, TerracottaGolemAnimation.IDLE,ageInTicks, 0.5f);\r\n\t\tthis.animate(TerracottaGolem.attackAnimationState, TerracottaGolemAnimation.ATTACK_LEFT,ageInTicks, 1.0f);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void renderToBuffer(PoseStack poseStack, VertexConsumer vertexConsumer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {\r\n\t\tBody.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);\r\n\t\tRightLeg.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);\r\n\t\tLeftLeg.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic ModelPart root() {\r\n\t\treturn Body;\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/client/model/TerracottaGolemModel.java b/src/main/java/com/renyigesai/immortalers_delight/client/model/TerracottaGolemModel.java
--- a/src/main/java/com/renyigesai/immortalers_delight/client/model/TerracottaGolemModel.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/client/model/TerracottaGolemModel.java	(date 1754920428644)
@@ -11,6 +11,7 @@
 import net.minecraft.client.model.geom.PartPose;
 import net.minecraft.client.model.geom.builders.*;
 import net.minecraft.world.entity.Entity;
+import org.jetbrains.annotations.NotNull;
 // Made with Blockbench 4.12.6
 // Exported for Minecraft version 1.17 or later with Mojang mappings
 // Paste this class into your mod and generate all required imports
@@ -122,7 +123,7 @@
 	}
 
 	@Override
-	public ModelPart root() {
+	public @NotNull ModelPart root() {
 		return Body;
 	}
 }
\ No newline at end of file
Index: src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.init;\r\n\r\nimport com.google.common.collect.Sets;\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport com.renyigesai.immortalers_delight.entities.boat.ImmortalersBoat;\r\nimport com.renyigesai.immortalers_delight.entities.boat.ImmortalersChestBoat;\r\nimport com.renyigesai.immortalers_delight.item.*;\r\n//import com.renyigesai.immortalers_delight.util.datautil.worlddata.BaseImmortalWorldData;\r\nimport net.minecraft.tags.BlockTags;\r\nimport net.minecraft.world.food.FoodProperties;\r\nimport net.minecraft.world.item.*;\r\nimport net.minecraft.world.level.block.Block;\r\nimport net.minecraftforge.common.ForgeSpawnEggItem;\r\nimport net.minecraftforge.registries.DeferredRegister;\r\nimport net.minecraftforge.registries.ForgeRegistries;\r\nimport net.minecraftforge.registries.RegistryObject;\r\nimport vectorwing.farmersdelight.common.item.ConsumableItem;\r\nimport vectorwing.farmersdelight.common.item.DrinkableItem;\r\n\r\nimport java.util.LinkedHashSet;\r\nimport java.util.function.Supplier;\r\n\r\n\r\npublic class ImmortalersDelightItems {\r\n\r\n\r\n    public static final DeferredRegister<Item> REGISTER = DeferredRegister.create(ForgeRegistries.ITEMS, ImmortalersDelightMod.MODID);\r\n    public static LinkedHashSet<RegistryObject<Item>> CREATIVE_TAB_ITEMS = Sets.newLinkedHashSet();\r\n    public static final RegistryObject<Item> HIMEKAIDO_LOG;\r\n    public static final RegistryObject<Item> HIMEKAIDO_WOOD;\r\n    public static final RegistryObject<Item> STRIPPED_HIMEKAIDO_WOOD;\r\n    public static final RegistryObject<Item> STRIPPED_HIMEKAIDO_LOG;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FRUITED_LEAVES;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FLOWERING_LEAVES;\r\n    public static final RegistryObject<Item> HIMEKAIDO_LEAVES;\r\n    public static final RegistryObject<Item> HIMEKAIDO_PLANKS;\r\n    public static final RegistryObject<Item> HIMEKAIDO_STAIRS;\r\n    public static final RegistryObject<Item> HIMEKAIDO_SLAB;\r\n    public static final RegistryObject<Item> HIMEKAIDO_DOOR;\r\n    public static final RegistryObject<Item> HIMEKAIDO_TRAPDOOR;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FENCE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_FENCE_GATE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_PRESSURE_PLATE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_BUTTON;\r\n    public static final RegistryObject<Item> HIMEKAIDO_CABINET;\r\n    public static final RegistryObject<Item> HIMEKAIDO_BOAT;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_BOAT;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_BOAT;\r\n    public static final RegistryObject<Item> HIMEKAIDO_CHEST_BOAT;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_CHEST_BOAT;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_CHEST_BOAT;\r\n    public static final RegistryObject<Item> MILLENIAN_BAMBOO;\r\n    public static final RegistryObject<Item> STEWED_ROTTEN_MEAT_POT;\r\n    public static final RegistryObject<Item> BRAISED_SPIDER_EYES_BLOCK;\r\n    public static final RegistryObject<Item> EVOLUTCORN_GRAIN_BAG;\r\n    public static final RegistryObject<Item> HIMEKAIDO_CRATE;\r\n    public static final RegistryObject<Item> PEARLIP_CRATE;\r\n    public static final RegistryObject<Item> EVOLUTCORN_BLOCK;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_BLOCK;\r\n    public static final RegistryObject<Item> ALFALFA_BLOCK;\r\n    public static final RegistryObject<Item> LEISAMBOO_BLOCK;\r\n    public static final RegistryObject<Item> HIMEKAIDO_SIGN;\r\n    public static final RegistryObject<Item> HIMEKAIDO_HANGING_SIGN;\r\n    public static final RegistryObject<Item> LEISAMBOO_PLANKS;\r\n    public static final RegistryObject<Item> LEISAMBOO_STAIRS;\r\n    public static final RegistryObject<Item> LEISAMBOO_SLAB;\r\n    public static final RegistryObject<Item> LEISAMBOO_CABINET;\r\n    public static final RegistryObject<Item> LEISAMBOO_DOOR;\r\n    public static final RegistryObject<Item> LEISAMBOO_TRAPDOOR;\r\n    public static final RegistryObject<Item> LEISAMBOO_FENCE;\r\n    public static final RegistryObject<Item> LEISAMBOO_FENCE_GATE;\r\n    public static final RegistryObject<Item> LEISAMBOO_PRESSURE_PLATE;\r\n    public static final RegistryObject<Item> LEISAMBOO_BUTTON;\r\n    public static final RegistryObject<Item> LEISAMBOO_SIGN;\r\n    public static final RegistryObject<Item> LEISAMBOO_HANGING_SIGN;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_PLANKS;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_STAIRS;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_SLAB;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_CABINET;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_DOOR;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_TRAPDOOR;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_FENCE;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_FENCE_GATE;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_PRESSURE_PLATE;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_BUTTON;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_SIGN;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL_HANGING_SIGN;\r\n    public static final RegistryObject<Item> ANCIENT_FIBER;\r\n    public static final RegistryObject<Item> BOWL_OF_MILLENIAN_BAMBOO;\r\n    public static final RegistryObject<Item> PITCHER_POD_PETAL;\r\n    public static final RegistryObject<Item> TRAVASTRUGGLER_LOG;\r\n    public static final RegistryObject<Item> STRIPPED_TRAVASTRUGGLER_LOG;\r\n    public static final RegistryObject<Item> TRAVA_PLANKS;\r\n    public static final RegistryObject<Item> TRAVASTRUGGLER_LEAVES;\r\n    public static final RegistryObject<Item> TRAVASTRUGGLER_LEAVES_TRAVARICE;\r\n\r\n    /*\r\n    玉米系列物品\r\n    */\r\n    public static final RegistryObject<Item> EVOLUTCORN;\r\n    public static final RegistryObject<Item> ROAST_EVOLUTCORN;\r\n    public static final RegistryObject<Item> EVOLUTCORN_GRAINS;\r\n    public static final RegistryObject<Item> ROAST_EVOLUTCORN_CHOPS;\r\n    public static final RegistryObject<Item> POPOLUTCORN;\r\n    public static final RegistryObject<Item> CRETACEOUS_ZEA_BALL;\r\n    public static final RegistryObject<Item> COLORFUL_GRILLED_SKEWERS;\r\n    public static final RegistryObject<Item> ZEA_PANCAKE;\r\n    public static final RegistryObject<Item> ZEA_PANCAKE_SLICE;\r\n    public static final RegistryObject<Item> EVOLUTCORN_PIE_CRUST;\r\n    public static final RegistryObject<Item> EVOLUTCORN_BEER;\r\n    public static final RegistryObject<Item> STICKY_BEER;\r\n    public static final RegistryObject<Item> CUSTARD_TART_PASTRY;\r\n    public static final RegistryObject<Item> EVOLUTCORN_HARD_CANDY;\r\n    /*\r\n    香蕉系列物品\r\n    */\r\n    public static final RegistryObject<Item> PEARLIP;\r\n    public static final RegistryObject<Item> PEARLIP_SHELL;\r\n    public static final RegistryObject<Item> PEARLIPEARL;\r\n    public static final RegistryObject<Item> PEATIC_MUSA_SALAD;\r\n    public static final RegistryObject<Item> PEARLIP_MILK_SHAKE;\r\n    public static final RegistryObject<Item> PEARLIP_PUMPKIN_PIE;\r\n    public static final RegistryObject<Item> PEARLIPEARL_TART;\r\n    public static final RegistryObject<Item> PEARLIPEARL_EGGSTEAM;\r\n    public static final RegistryObject<Item> PEARLIP_JELLY;\r\n    public static final RegistryObject<Item> PEARLIP_PIE;\r\n    public static final RegistryObject<Item> PEARLIP_PIE_SLICE;\r\n    public static final RegistryObject<Item> ICE_PEARLIP;\r\n    public static final RegistryObject<Item> CHOCOLATE_PEARLIP_STICKS;\r\n    public static final RegistryObject<Item> PERFECT_SUMMER_ICE;\r\n    public static final RegistryObject<Item> TWILIGHT_GELATO;\r\n    public static final RegistryObject<Item> PEARLIP_BUBBLE_MILK;\r\n    public static final RegistryObject<Item> CHOCOREEZE;\r\n    public static final RegistryObject<Item> TROPICAL_FRUITY_CYCLONE;\r\n    /*\r\n    姬海棠系列物品\r\n     */\r\n    public static final RegistryObject<Item> MASHED_POTATOES;\r\n    public static final RegistryObject<Item> MASHED_POISONOUS_POTATO;\r\n    public static final RegistryObject<Item> MASHED_POTATO_WITH_JAM;\r\n    public static final RegistryObject<Item> MASHED_POISONOUS_POTATO_WITH_JAM;\r\n    public static final RegistryObject<Item> ROTTEN_FLESH_CUTS;\r\n    public static final RegistryObject<Item> HIMEKAIDO_JELLY;\r\n    public static final RegistryObject<Item> YOGURT;\r\n    public static final RegistryObject<Item> HIMEKAIDO;\r\n    public static final RegistryObject<Item> BAKED_POISONOUS_POTATO;\r\n    public static final RegistryObject<Item> BRAISED_SPIDER_EYES_IN_GRAVY;\r\n    public static final RegistryObject<Item> DIPPED_ROTTEN_FLESH;\r\n    public static final RegistryObject<Item> CRISPY_YOGURT_ROTTEN_FLESH;\r\n    public static final RegistryObject<Item> MEATY_ROTTEN_TOMATO_BROTH;\r\n    public static final RegistryObject<Item> STUFFED_POISONOUS_POTATO;\r\n    public static final RegistryObject<Item> PUFFERFISH_ROLL;\r\n    public static final RegistryObject<Item> GOLDEN_HIMEKAIDO;\r\n    public static final RegistryObject<Item> ENCHANTED_GOLDEN_HIMEKAIDO;\r\n    public static final RegistryObject<Item> HIMEKAIDO_SEED;\r\n    public static final RegistryObject<Item> BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT;\r\n    public static final RegistryObject<Item> TARTARE_CHICKEN;\r\n    public static final RegistryObject<Item> ENCHANTAL_COOLER;\r\n    public static final RegistryObject<Item> ANCIENT_STOVE;\r\n    public static final RegistryObject<Item> OXIDIZED_ANCIENT_STOVE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_YOGURT_PIE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_YOGURT_PIE_SLICE;\r\n    public static final RegistryObject<Item> DREUMK_WINE;\r\n    public static final RegistryObject<Item> SCARLET_GELATO;\r\n    public static final RegistryObject<Item> SCARLET_SUNDAE;\r\n    public static final RegistryObject<Item> HIMEKAIDO_CHAZUKE;\r\n    /*\r\n    古木相关\r\n    */\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_LOG;\r\n    public static final RegistryObject<Item> STRIPPED_ANCIENT_WOOD_LOG;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD;\r\n    public static final RegistryObject<Item> STRIPPED_ANCIENT_WOOD;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_PLANKS;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_CABINET;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_STAIRS;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_SLAB;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_DOOR;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_TRAPDOOR;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_FENCE;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_FENCE_GATE;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_PRESSURE_PLATE;\r\n    public static final RegistryObject<Item> ANCIENT_WOOD_BUTTON;\r\n\r\n    /*\r\n     溪竹相关物品\r\n     */\r\n    public static final RegistryObject<Item> LEAF_TEA;\r\n    public static final RegistryObject<Item> CONTAINS_TEA_LEISAMBOO;\r\n    public static final RegistryObject<Item> EMPTY_BAMBOO_CUP;\r\n    public static final RegistryObject<Item> LEISAMBOO_TEA;\r\n    public static final RegistryObject<Item> ICED_BLACK_TEA;\r\n    public static final RegistryObject<Item> PEARLIPEARL_MILK_TEA;\r\n    public static final RegistryObject<Item> PEARLIPEARL_MILK_GREEN;\r\n    public static final RegistryObject<Item> STOVE_BLACK_TEA;\r\n    public static final RegistryObject<Item> LEAF_GREEN_TEA;\r\n    public static final RegistryObject<Item> BRITISH_YELLOW_TEA;\r\n    public static final RegistryObject<Item> CHERRY_PEARLIPEARL_TEA;\r\n    public static final RegistryObject<Item> GLEEMAN_TEAR;\r\n    public static final RegistryObject<Item> FRUIT_TEA;\r\n    public static final RegistryObject<Item> LEISAMBOO_TEA_CAKE;\r\n\r\n    /*\r\n    通天竹相关\r\n    */\r\n    public static final RegistryObject<Item> TRAVAPLANK;\r\n    public static final RegistryObject<Item> TRAVARICE;\r\n    public static final RegistryObject<Item> COOKED_TRAVARICE;\r\n    public static final RegistryObject<Item> TRAVEER;\r\n\r\n    /*\r\n    瓦斯麦相关物品\r\n    */\r\n    public static final RegistryObject<Item> KWAT_WHEAT_SEEDS;\r\n    public static final RegistryObject<Item> KWAT_WHEAT;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_DOUGH;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_PASTE;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_DOUFU;\r\n    public static final RegistryObject<Item> FRY_KWAT_WHEAT_DOUFU;\r\n    public static final RegistryObject<Item> SUTFFED_KWAT_WHEAT_DOUFU;\r\n    public static final RegistryObject<Item> JADE_AND_RUBY_SOUP;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_TOAST;\r\n    public static final RegistryObject<Item> KWAT_WHEAT_TOAST_SLICE;\r\n    public static final RegistryObject<Item> GOLDEN_KWAT_TOAST;\r\n    public static final RegistryObject<Item> GOLDEN_KWAT_TOAST_SLICE;\r\n    public static final RegistryObject<Item> NETHER_BREAD_CREAM_SOUP;\r\n    public static final RegistryObject<Item> NETHER_CREAM_SOUP;\r\n    public static final RegistryObject<Item> NETHER_CREAM_BREAD;\r\n    /*\r\n    火把花相关物品\r\n    */\r\n    public static final RegistryObject<Item> TORCHFLOWER_MUSTARD;\r\n    public static final RegistryObject<Item> HOT_HI_SOUP;\r\n    public static final RegistryObject<Item> INCANDESCENCE_SUSHI;\r\n    public static final RegistryObject<Item> TORCHFLOWER_CAKE;\r\n    public static final RegistryObject<Item> TORCHFLOWER_CURRY_RICE;\r\n    public static final RegistryObject<Item> EXTRA_SPICY_PASTA;\r\n    public static final RegistryObject<Item> TORCHFLOWER_COOKIE;\r\n\r\n\r\n    public static final RegistryObject<Item> PITCHER_PLANT_BARBECUE;\r\n    public static final RegistryObject<Item> POD_SHELL_BURGER_MEAT;\r\n    public static final RegistryObject<Item> POD_SHELL_BURGER_MEAT_CUBE;\r\n    public static final RegistryObject<Item> AROMATIC_POD_AFFOGATO;\r\n\r\n    public static final RegistryObject<Item> GOLDEN_FABRIC;\r\n    public static final RegistryObject<Item> GOLDEN_FABRIC_VEIL;\r\n    public static final RegistryObject<Item> RAW_SNIFFER_SLICE;\r\n    public static final RegistryObject<Item> COOKED_SNIFFER_SLICE;\r\n    public static final RegistryObject<Item> RAW_SNIFFER_STEAK;\r\n    public static final RegistryObject<Item> COOKED_SNIFFER_STEAK;\r\n    public static final RegistryObject<Item> SNIFFER_FUR;\r\n    public static final RegistryObject<Item> BRUSH;\r\n    public static final RegistryObject<Item> SNIFFER_FUR_BRUSH;\r\n    public static final RegistryObject<Item> CLEAR_WATER_VODKA;\r\n    public static final RegistryObject<Item> SNIFFER_ROTATING_ROAST_MEAT;\r\n    public static final RegistryObject<Item> VULCAN_COKTAIL;\r\n    public static final RegistryObject<Item> NETHER_KVASS;\r\n    public static final RegistryObject<Item> PURGATORY_ALE;\r\n    public static final RegistryObject<Item> PIGLIN_ODORI_SAKE;\r\n    public static final RegistryObject<Item> HIMEKANDY;\r\n    //public static final RegistryObject<Item> PALE_DEW_WINE;\r\n    //public static final RegistryObject<Item> TEST_DAMAGE_ITEM;\r\n    public static final RegistryObject<Item> SCARLET_DEVILS_CAKE;\r\n    public static final RegistryObject<Item> SCARLET_DEVILS_CAKE_SLICE;\r\n    public static final RegistryObject<Item> RED_STUFFED_BUN;\r\n    //public static final RegistryObject<Item> SPICY_PUDDING;\r\n\r\n\r\n//    public static final RegistryObject<Item> POISONOUS_LONG_SPIKE_TRAP;\r\n//    public static final RegistryObject<Item> LONG_SPIKE_TRAP;\r\n//    public static final RegistryObject<Item> POISONOUS_SPIKE_TRAP;\r\n//    public static final RegistryObject<Item> SPIKE_TRAP;\r\n//    public static final RegistryObject<Item> POISONOUS_METAL_CALTROP;\r\n//    public static final RegistryObject<Item> METAL_CALTROP;\r\n    public static final RegistryObject<Item> SPIKE_BAR_BASE;\r\n//    public static final RegistryObject<Item> SPIKE_BAR;\r\n    public static final RegistryObject<Item> MUD_TILES;\r\n    public static final RegistryObject<Item> MUD_TILES_STAIRS;\r\n    public static final RegistryObject<Item> MUD_TILES_SLAB;\r\n    public static final RegistryObject<Item> MUD_TILES_WALL;\r\n    public static final RegistryObject<Item> CRACKED_MUD_TILES;\r\n    public static final RegistryObject<Item> CRACKED_MUD_TILES_STAIRS;\r\n    public static final RegistryObject<Item> CRACKED_MUD_TILES_SLAB;\r\n    public static final RegistryObject<Item> CRACKED_MUD_TILES_WALL;\r\n    public static final RegistryObject<Item> MOSSY_MUD_BRICK;\r\n    public static final RegistryObject<Item> MOSSY_MUD_BRICK_STAIRS;\r\n    public static final RegistryObject<Item> MOSSY_MUD_BRICK_SLAB;\r\n    public static final RegistryObject<Item> MOSSY_MUD_BRICK_WALL;\r\n    public static final RegistryObject<Item>CRACKED_MUD_BRICK;\r\n    public static final RegistryObject<Item>CRACKED_MUD_BRICK_STAIRS;\r\n    public static final RegistryObject<Item>CRACKED_MUD_BRICK_SLAB;\r\n    public static final RegistryObject<Item>CRACKED_MUD_BRICK_WALL;\r\n    public static final RegistryObject<Item>CHISELED_MUD_BRICK;\r\n    public static final RegistryObject<Item>PACKED_MUD_STAIRS;\r\n    public static final RegistryObject<Item>PACKED_MUD_SLAB;\r\n    public static final RegistryObject<Item>PACKED_MUD_WALL;\r\n\r\n    public static final RegistryObject<Item> INFESTED_GRAVEL;\r\n    public static final RegistryObject<Item> INFESTED_SAND;\r\n\r\n//    public static final RegistryObject<Item> INFESTED_COAL_BLOCK;\r\n//    public static final RegistryObject<Item> INFESTED_COPPER_BLOCK;\r\n//    public static final RegistryObject<Item> INFESTED_IRON_BLOCK;\r\n//    public static final RegistryObject<Item> INFESTED_REDSTONE_BLOCK;\r\n//    public static final RegistryObject<Item> INFESTED_LAPIS_BLOCK;\r\n//    public static final RegistryObject<Item> INFESTED_GOLD_BLOCK;\r\n//    public static final RegistryObject<Item> INFESTED_EMERALD_BLOCK;\r\n//    public static final RegistryObject<Item> INFESTED_DIAMOND_BLOCK;\r\n\r\n    /*ALFALFA*/\r\n    public static final RegistryObject<Item> ALFALFA_SEEDS;\r\n    public static final RegistryObject<Item> ALFALFA;\r\n    public static final RegistryObject<Item> ALFALFA_PORRIDGE;\r\n\r\n    public static final RegistryObject<Item> BANANA_BOX_SALMON;\r\n    public static final RegistryObject<Item> BANANA_BOX_COD;\r\n    public static final RegistryObject<Item> PEARLIP_RICE_ROLL_BOAT;\r\n\r\n\r\n    //public static final RegistryObject<Item> STRANGE_ARMOUR_STAND_SPAWN_EGG;\r\n    public static final RegistryObject<Item> SKELVERFISH_AMBUSHER_SPAWN_EGG;\r\n    public static final RegistryObject<Item> SKELVERFISH_BOMBER_SPAWN_EGG;\r\n    public static final RegistryObject<Item> SKELVERFISH_THRASHER_SPAWN_EGG;\r\n    public static final RegistryObject<Item> STRANGE_ARMOUR_STAND_SPAWN_EGG;\r\n    public static final RegistryObject<Item> SCAVENGER_SPAWN_EGG;\r\n\r\n\r\n    public static final RegistryObject<Item> SACHETS;\r\n    public static final RegistryObject<Item> DRILL_ROD_WAND;\r\n    public static final RegistryObject<Item> RUSTY_ANCIENT_BLADE;\r\n    public static final RegistryObject<Item> ANCIENT_BLADE;\r\n    public static final RegistryObject<Item> REPEATING_CROSSBOW;\r\n    public static final RegistryObject<Item> SEALED_ANCIENT_RATIONS;\r\n\r\n    static {\r\n\r\n        ENCHANTAL_COOLER = block(ImmortalersDelightBlocks.ENCHANTAL_COOLER);\r\n\r\n        ANCIENT_STOVE = block(ImmortalersDelightBlocks.ANCIENT_STOVE);\r\n\r\n        OXIDIZED_ANCIENT_STOVE = block(ImmortalersDelightBlocks.OXIDIZED_ANCIENT_STOVE);\r\n\r\n        EVOLUTCORN_GRAIN_BAG = registerWithTab(\"evolutcorn_grain_bag\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.EVOLUTCORN_GRAIN_BAG.get(), basicItem()));\r\n\r\n        HIMEKAIDO_CRATE = registerWithTab(\"himekaido_crate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_CRATE.get(), basicItem()));\r\n\r\n        PEARLIP_CRATE = registerWithTab(\"pearlip_crate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.PEARLIP_CRATE.get(), basicItem()));\r\n\r\n        EVOLUTCORN_BLOCK = registerWithTab(\"evolutcorn_block\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.EVOLUTCORN_BLOCK.get(), basicItem()));\r\n        KWAT_WHEAT_BLOCK = registerWithTab(\"kwat_wheat_block\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.KWAT_WHEAT_BLOCK.get(), basicItem()));\r\n        ALFALFA_BLOCK = registerWithTab(\"alfalfa_block\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.ALFALFA_BLOCK.get(), basicItem()));\r\n        LEISAMBOO_BLOCK = registerWithTab(\"leisamboo_block\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_BLOCK.get(), basicItem()));\r\n\r\n        HIMEKAIDO_LOG = registerWithTab(\"himekaido_log\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_LOG.get(), basicItem()));\r\n        HIMEKAIDO_WOOD = registerWithTab(\"himekaido_wood\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_WOOD.get(), basicItem()));\r\n\r\n        STRIPPED_HIMEKAIDO_WOOD = registerWithTab(\"stripped_himekaido_wood\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.STRIPPED_HIMEKAIDO_WOOD.get(), basicItem()));\r\n\r\n        STRIPPED_HIMEKAIDO_LOG = registerWithTab(\"stripped_himekaido_log\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.STRIPPED_HIMEKAIDO_LOG.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FRUITED_LEAVES = registerWithTab(\"himekaido_fruited_leaves\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FRUITED_LEAVES.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FLOWERING_LEAVES = registerWithTab(\"himekaido_flowering_leaves\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FLOWERING_LEAVES.get(), basicItem()));\r\n\r\n        HIMEKAIDO_LEAVES = registerWithTab(\"himekaido_leaves\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_LEAVES.get(), basicItem()));\r\n\r\n        HIMEKAIDO_PLANKS = registerWithTab(\"himekaido_planks\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_PLANKS.get(), basicItem()));\r\n        HIMEKAIDO_CABINET = registerWithTab(\"himekaido_cabinet\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_CABINET.get(), basicItem()));\r\n        HIMEKAIDO_STAIRS = registerWithTab(\"himekaido_stairs\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_STAIRS.get(), basicItem()));\r\n\r\n        HIMEKAIDO_SLAB = registerWithTab(\"himekaido_slab\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_SLAB.get(), basicItem()));\r\n\r\n        HIMEKAIDO_DOOR = registerWithTab(\"himekaido_door\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_DOOR.get(), basicItem()));\r\n\r\n        HIMEKAIDO_TRAPDOOR = registerWithTab(\"himekaido_trapdoor\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_TRAPDOOR.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FENCE = registerWithTab(\"himekaido_fence\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FENCE.get(), basicItem()));\r\n\r\n        HIMEKAIDO_FENCE_GATE = registerWithTab(\"himekaido_fence_gate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_FENCE_GATE.get(), basicItem()));\r\n\r\n        HIMEKAIDO_PRESSURE_PLATE = registerWithTab(\"himekaido_pressure_plate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_PRESSURE_PLATE.get(), basicItem()));\r\n\r\n        HIMEKAIDO_BUTTON = registerWithTab(\"himekaido_button\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.HIMEKAIDO_BUTTON.get(), basicItem()));\r\n        HIMEKAIDO_SIGN = registerWithTab(\"himekaido_sign\",() ->\r\n                new SignItem((new Item.Properties()).stacksTo(16),\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_SIGN.get(),\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_WALL_SIGN.get()\r\n                        ));\r\n        HIMEKAIDO_HANGING_SIGN = registerWithTab(\"himekaido_hanging_sign\",() ->\r\n                new HangingSignItem(\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_HANGING_SIGN.get(),\r\n                        ImmortalersDelightBlocks.HIMEKAIDO_WALL_HANGING_SIGN.get(),\r\n                        (new Item.Properties()).stacksTo(16)\r\n                ));\r\n        HIMEKAIDO_BOAT = registerWithTab(\"himekaido_boat\",()->\r\n                new ImmortalersBoatItem(ImmortalersBoat.Type.HIMEKAIDO, basicItem().stacksTo(1)));\r\n        HIMEKAIDO_CHEST_BOAT = registerWithTab(\"himekaido_chest_boat\",()->\r\n                new ImmortalersChestBoatItem(ImmortalersChestBoat.Type.HIMEKAIDO, basicItem().stacksTo(1)));\r\n\r\n        /*\r\n        溪竹装饰方块\r\n         */\r\n        LEISAMBOO_PLANKS = registerWithTab(\"leisamboo_planks\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_PLANKS.get(), basicItem()));\r\n\r\n        LEISAMBOO_STAIRS = registerWithTab(\"leisamboo_stairs\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_STAIRS.get(), basicItem()));\r\n\r\n        LEISAMBOO_CABINET = block(ImmortalersDelightBlocks.LEISAMBOO_CABINET);\r\n\r\n        LEISAMBOO_SLAB = registerWithTab(\"leisamboo_slab\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_SLAB.get(), basicItem()));\r\n\r\n        LEISAMBOO_DOOR = block(ImmortalersDelightBlocks.LEISAMBOO_DOOR);\r\n\r\n        LEISAMBOO_TRAPDOOR = block(ImmortalersDelightBlocks.LEISAMBOO_TRAPDOOR);\r\n\r\n        LEISAMBOO_FENCE = registerWithTab(\"leisamboo_fence\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_FENCE.get(), basicItem()));\r\n\r\n        LEISAMBOO_FENCE_GATE = registerWithTab(\"leisamboo_fence_gate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_FENCE_GATE.get(), basicItem()));\r\n\r\n        LEISAMBOO_PRESSURE_PLATE = registerWithTab(\"leisamboo_pressure_plate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_PRESSURE_PLATE.get(), basicItem()));\r\n\r\n        LEISAMBOO_BUTTON = registerWithTab(\"leisamboo_button\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.LEISAMBOO_BUTTON.get(), basicItem()));\r\n        LEISAMBOO_SIGN = registerWithTab(\"leisamboo_sign\",() ->\r\n                new SignItem((new Item.Properties()).stacksTo(16),\r\n                        ImmortalersDelightBlocks.LEISAMBOO_SIGN.get(),\r\n                        ImmortalersDelightBlocks.LEISAMBOO_WALL_SIGN.get()\r\n                ));\r\n        LEISAMBOO_HANGING_SIGN = registerWithTab(\"leisamboo_hanging_sign\",() ->\r\n                new HangingSignItem(\r\n                        ImmortalersDelightBlocks.LEISAMBOO_HANGING_SIGN.get(),\r\n                        ImmortalersDelightBlocks.LEISAMBOO_WALL_HANGING_SIGN.get(),\r\n                        (new Item.Properties()).stacksTo(16)\r\n                ));\r\n\r\n        /*\r\n        棱蕉装饰方块\r\n         */\r\n        PEARLIP_SHELL_PLANKS = registerWithTab(\"pearlip_shell_planks\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.PEARLIP_SHELL_PLANKS.get(), basicItem()));\r\n\r\n        PEARLIP_SHELL_STAIRS = registerWithTab(\"pearlip_shell_stairs\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.PEARLIP_SHELL_STAIRS.get(), basicItem()));\r\n\r\n        PEARLIP_SHELL_CABINET = block(ImmortalersDelightBlocks.PEARLIP_SHELL_CABINET);\r\n\r\n        PEARLIP_SHELL_SLAB = registerWithTab(\"pearlip_shell_slab\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.PEARLIP_SHELL_SLAB.get(), basicItem()));\r\n\r\n        PEARLIP_SHELL_DOOR = block(ImmortalersDelightBlocks.PEARLIP_SHELL_DOOR);\r\n\r\n        PEARLIP_SHELL_TRAPDOOR = block(ImmortalersDelightBlocks.PEARLIP_SHELL_TRAPDOOR);\r\n\r\n        PEARLIP_SHELL_FENCE = registerWithTab(\"pearlip_shell_fence\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.PEARLIP_SHELL_FENCE.get(), basicItem()));\r\n\r\n        PEARLIP_SHELL_FENCE_GATE = registerWithTab(\"pearlip_shell_fence_gate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.PEARLIP_SHELL_FENCE_GATE.get(), basicItem()));\r\n\r\n        PEARLIP_SHELL_PRESSURE_PLATE = registerWithTab(\"pearlip_shell_pressure_plate\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.PEARLIP_SHELL_PRESSURE_PLATE.get(), basicItem()));\r\n\r\n        PEARLIP_SHELL_BUTTON = registerWithTab(\"pearlip_shell_button\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.PEARLIP_SHELL_BUTTON.get(), basicItem()));\r\n        PEARLIP_SHELL_SIGN = registerWithTab(\"pearlip_shell_sign\",() ->\r\n                new SignItem((new Item.Properties()).stacksTo(16),\r\n                        ImmortalersDelightBlocks.PEARLIP_SHELL_SIGN.get(),\r\n                        ImmortalersDelightBlocks.PEARLIP_SHELL_WALL_SIGN.get()\r\n                ));\r\n        PEARLIP_SHELL_HANGING_SIGN = registerWithTab(\"pearlip_shell_hanging_sign\",() ->\r\n                new HangingSignItem(\r\n                        ImmortalersDelightBlocks.PEARLIP_SHELL_HANGING_SIGN.get(),\r\n                        ImmortalersDelightBlocks.PEARLIP_SHELL_WALL_HANGING_SIGN.get(),\r\n                        (new Item.Properties()).stacksTo(16)\r\n                ));\r\n        PEARLIP_SHELL_BOAT = registerWithTab(\"pearlip_shell_boat\",()->\r\n                new ImmortalersBoatItem(ImmortalersBoat.Type.PEARLIP_SHELL, basicItem().stacksTo(1)));\r\n        PEARLIP_SHELL_CHEST_BOAT = registerWithTab(\"pearlip_shell_chest_boat\",()->\r\n                new ImmortalersChestBoatItem(ImmortalersChestBoat.Type.PEARLIP_SHELL, basicItem().stacksTo(1)));\r\n\r\n        /*\r\n        古木\r\n        */\r\n        ANCIENT_WOOD_LOG = block(ImmortalersDelightBlocks.ANCIENT_WOOD_LOG);\r\n        STRIPPED_ANCIENT_WOOD_LOG = block(ImmortalersDelightBlocks.STRIPPED_ANCIENT_WOOD_LOG);\r\n        ANCIENT_WOOD = block(ImmortalersDelightBlocks.ANCIENT_WOOD);\r\n        STRIPPED_ANCIENT_WOOD = block(ImmortalersDelightBlocks.STRIPPED_ANCIENT_WOOD);\r\n        ANCIENT_WOOD_PLANKS = block(ImmortalersDelightBlocks.ANCIENT_WOOD_PLANKS);\r\n        ANCIENT_WOOD_CABINET = block(ImmortalersDelightBlocks.ANCIENT_WOOD_CABINET);\r\n        ANCIENT_WOOD_SLAB = block(ImmortalersDelightBlocks.ANCIENT_WOOD_SLAB);\r\n        ANCIENT_WOOD_DOOR = block(ImmortalersDelightBlocks.ANCIENT_WOOD_DOOR);\r\n        ANCIENT_WOOD_TRAPDOOR = block(ImmortalersDelightBlocks.ANCIENT_WOOD_TRAPDOOR);\r\n        ANCIENT_WOOD_STAIRS = block(ImmortalersDelightBlocks.ANCIENT_WOOD_STAIRS);\r\n        ANCIENT_WOOD_FENCE = block(ImmortalersDelightBlocks.ANCIENT_WOOD_FENCE);\r\n        ANCIENT_WOOD_FENCE_GATE = block(ImmortalersDelightBlocks.ANCIENT_WOOD_FENCE_GATE);\r\n        ANCIENT_WOOD_PRESSURE_PLATE = block(ImmortalersDelightBlocks.ANCIENT_WOOD_PRESSURE_PLATE);\r\n        ANCIENT_WOOD_BUTTON = block(ImmortalersDelightBlocks.ANCIENT_WOOD_BUTTON);\r\n        ANCIENT_WOOD_BOAT = registerWithTab(\"ancient_wood_boat\",()->\r\n                new ImmortalersBoatItem(ImmortalersBoat.Type.ANCIENT_WOOD, basicItem().stacksTo(1)));\r\n        ANCIENT_WOOD_CHEST_BOAT = registerWithTab(\"ancient_wood_chest_boat\",()->\r\n                new ImmortalersChestBoatItem(ImmortalersChestBoat.Type.ANCIENT_WOOD, basicItem().stacksTo(1)));\r\n\r\n        ANCIENT_FIBER = registerWithTab(\"ancient_fiber\", () ->\r\n                new Item(basicItem()));\r\n\r\n        /*\r\n        泥砖\r\n         */\r\n        MUD_TILES = block(ImmortalersDelightBlocks.MUD_TILES);\r\n        MUD_TILES_STAIRS = block(ImmortalersDelightBlocks.MUD_TILES_STAIRS);\r\n        MUD_TILES_SLAB = block(ImmortalersDelightBlocks.MUD_TILES_SLAB);\r\n        MUD_TILES_WALL = block(ImmortalersDelightBlocks.MUD_TILES_WALL);\r\n        CRACKED_MUD_TILES = block(ImmortalersDelightBlocks.CRACKED_MUD_TILES);\r\n        CRACKED_MUD_TILES_STAIRS = block(ImmortalersDelightBlocks.CRACKED_MUD_TILES_STAIRS);\r\n        CRACKED_MUD_TILES_SLAB = block(ImmortalersDelightBlocks.CRACKED_MUD_TILES_SLAB);\r\n        CRACKED_MUD_TILES_WALL = block(ImmortalersDelightBlocks.CRACKED_MUD_TILES_WALL);\r\n        MOSSY_MUD_BRICK = block(ImmortalersDelightBlocks.MOSSY_MUD_BRICK);\r\n        MOSSY_MUD_BRICK_STAIRS = block(ImmortalersDelightBlocks.MOSSY_MUD_BRICK_STAIRS);\r\n        MOSSY_MUD_BRICK_SLAB = block(ImmortalersDelightBlocks.MOSSY_MUD_BRICK_SLAB);\r\n        MOSSY_MUD_BRICK_WALL = block(ImmortalersDelightBlocks.MOSSY_MUD_BRICK_WALL);\r\n        CRACKED_MUD_BRICK = block(ImmortalersDelightBlocks.CRACKED_MUD_BRICK);\r\n        CRACKED_MUD_BRICK_STAIRS = block(ImmortalersDelightBlocks.CRACKED_MUD_BRICK_STAIRS);\r\n        CRACKED_MUD_BRICK_SLAB = block(ImmortalersDelightBlocks.CRACKED_MUD_BRICK_SLAB);\r\n        CRACKED_MUD_BRICK_WALL = block(ImmortalersDelightBlocks.CRACKED_MUD_BRICK_WALL);\r\n        CHISELED_MUD_BRICK = block(ImmortalersDelightBlocks.CHISELED_MUD_BRICK);\r\n        PACKED_MUD_STAIRS = block(ImmortalersDelightBlocks.PACKED_MUD_STAIRS);\r\n        PACKED_MUD_SLAB = block(ImmortalersDelightBlocks.PACKED_MUD_SLAB);\r\n        PACKED_MUD_WALL = block(ImmortalersDelightBlocks.PACKED_MUD_WALL);\r\n\r\n\r\n        /*\r\n        地牢工具箱\r\n         */\r\n//        POISONOUS_LONG_SPIKE_TRAP = block(ImmortalersDelightBlocks.POISONOUS_LONG_SPIKE_TRAP);\r\n//        LONG_SPIKE_TRAP = block(ImmortalersDelightBlocks.LONG_SPIKE_TRAP);\r\n//        POISONOUS_SPIKE_TRAP = block(ImmortalersDelightBlocks.POISONOUS_SPIKE_TRAP);\r\n//        SPIKE_TRAP = block(ImmortalersDelightBlocks.SPIKE_TRAP);\r\n//        POISONOUS_METAL_CALTROP = block(ImmortalersDelightBlocks.POISONOUS_METAL_CALTROP);\r\n//        METAL_CALTROP = block(ImmortalersDelightBlocks.METAL_CALTROP);\r\n        SPIKE_BAR_BASE = block(ImmortalersDelightBlocks.SPIKE_BAR_BASE);\r\n        //SPIKE_BAR = block(ImmortalersDelightBlocks.SPIKE_BAR);\r\n        INFESTED_GRAVEL = block(ImmortalersDelightBlocks.INFESTED_GRAVEL);\r\n        INFESTED_SAND = block(ImmortalersDelightBlocks.INFESTED_SAND);\r\n//        INFESTED_COAL_BLOCK = block(ImmortalersDelightBlocks.INFESTED_COAL_BLOCK);\r\n//        INFESTED_COPPER_BLOCK = block(ImmortalersDelightBlocks.INFESTED_COPPER_BLOCK);\r\n//        INFESTED_IRON_BLOCK = block(ImmortalersDelightBlocks.INFESTED_IRON_BLOCK);\r\n//        INFESTED_REDSTONE_BLOCK = block(ImmortalersDelightBlocks.INFESTED_REDSTONE_BLOCK);\r\n//        INFESTED_LAPIS_BLOCK = block(ImmortalersDelightBlocks.INFESTED_LAPIS_BLOCK);\r\n//        INFESTED_GOLD_BLOCK = block(ImmortalersDelightBlocks.INFESTED_GOLD_BLOCK);\r\n//        INFESTED_EMERALD_BLOCK = block(ImmortalersDelightBlocks.INFESTED_EMERALD_BLOCK);\r\n//        INFESTED_DIAMOND_BLOCK = block(ImmortalersDelightBlocks.INFESTED_DIAMOND_BLOCK);\r\n\r\n        /*\r\n        材料类物品\r\n        */\r\n\r\n        EVOLUTCORN = registerWithTab(\"evolutcorn\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.EVOLUTCORN)));\r\n\r\n        ROAST_EVOLUTCORN = registerWithTab(\"roast_evolutcorn\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.ROAST_EVOLUTCORN)));\r\n\r\n        EVOLUTCORN_GRAINS = registerWithTab(\"evolutcorn_grains\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.EVOLUTCORN.get(), new Item.Properties().food(ImmortalersDelightFoodProperties.EVOLUTCORN_GRAINS)));\r\n\r\n        ROAST_EVOLUTCORN_CHOPS = registerWithTab(\"roast_evolutcorn_chops\", () ->\r\n                new Item(foodItem(ImmortalersDelightFoodProperties.ROAST_EVOLUTCORN_CHOPS)));\r\n\r\n        PEARLIP = registerWithTab(\"pearlip\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.PEARLIPEARL_BUNDLE.get(), new Item.Properties().food(ImmortalersDelightFoodProperties.PEARLIP)));\r\n\r\n        PEARLIPEARL = registerWithTab(\"pearlipearl\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.PEARLIPEARL_STALK.get(), new Item.Properties().food(ImmortalersDelightFoodProperties.PEARLIPEARL)));\r\n\r\n        PEARLIP_SHELL = registerWithTab(\"pearlip_shell\", () ->\r\n                new Item(basicItem()));\r\n\r\n        CONTAINS_TEA_LEISAMBOO = registerWithTab(\"contains_tea_leisamboo\",()->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.LEISAMBOO_CROP.get(),new Item.Properties()));\r\n\r\n        HIMEKAIDO_SEED = registerWithTab(\"himekaido_seed\", () ->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.HIMEKAIDO_SHRUB.get(), new Item.Properties()));\r\n\r\n        ROTTEN_FLESH_CUTS = registerWithTab(\"rotten_flesh_cuts\", () ->\r\n                new Item(new Item.Properties()));\r\n\r\n        PITCHER_POD_PETAL = registerWithTab(\"pitcher_pod_petal\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        KWAT_WHEAT_SEEDS =  registerWithTab(\"kwat_wheat_seeds\",()->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.KWAT_WHEAT.get(), new Item.Properties()));\r\n\r\n        KWAT_WHEAT = registerWithTab(\"kwat_wheat\", () ->\r\n                new GasToxicFoodItem(fantasticFoodItem(ImmortalersDelightFoodProperties.KWAT_WHEAT, Rarity.COMMON, false),true,false));\r\n\r\n        ALFALFA_SEEDS = registerWithTab(\"alfalfa_seeds\",()->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.ALFALFA.get(),basicItem()));\r\n\r\n        ALFALFA = registerWithTab(\"alfalfa\",()-> new Item(basicItem()));\r\n\r\n        CUSTARD_TART_PASTRY = registerWithTab(\"custard_tart_pastry\",()-> new Item(basicItem()));\r\n        /*\r\n        玉米系列物品\r\n        */\r\n\r\n        CRETACEOUS_ZEA_BALL = registerWithTab(\"cretaceous_zea_ball\", () ->\r\n                new PowerfulAbleFoodItem(foodItem(ImmortalersDelightFoodProperties.CRETACEOUS_ZEA_BALL), ImmortalersDelightFoodProperties.CRETACEOUS_ZEA_BALL_POWERED, true, false));\r\n\r\n        COLORFUL_GRILLED_SKEWERS = registerWithTab(\"colorful_grilled_skewers\", () ->\r\n                new PowerfulAbleFoodItem(new Item.Properties().food(ImmortalersDelightFoodProperties.COLORFUL_GRILLED_SKEWERS), ImmortalersDelightFoodProperties.COLORFUL_GRILLED_SKEWERS_POWERED, true, false));\r\n\r\n        POPOLUTCORN = registerWithTab(\"popolutcorn\", () ->\r\n                new PowerfulAbleFoodItem(new Item.Properties().food(ImmortalersDelightFoodProperties.POPOLUTCORN), ImmortalersDelightFoodProperties.POPOLUTCORN_POWERED, true, false));\r\n\r\n        ZEA_PANCAKE = registerWithTab(\"zea_pancake\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.ZEA_PANCAKE.get(), basicItem()));\r\n\r\n        ZEA_PANCAKE_SLICE = registerWithTab(\"zea_pancake_slice\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.ZEA_PANCAKE_SLICE), true));\r\n\r\n        EVOLUTCORN_PIE_CRUST = registerWithTab(\"evolutcorn_pie_crust\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        PEARLIP_PIE = block(ImmortalersDelightBlocks.PEARLIP_PIE);\r\n\r\n        PEARLIP_PIE_SLICE = registerWithTab(\"pearlip_pie_slice\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.PEARLIP_PIE_SLICE), true));\r\n\r\n        PEATIC_MUSA_SALAD = registerWithTab(\"peatic_musa_salad\", () ->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.PEATIC_MUSA_SALAD), ImmortalersDelightFoodProperties.PEATIC_MUSA_SALAD_POWERED, true, false));\r\n\r\n        EVOLUTCORN_HARD_CANDY = registerWithTab(\"evolutcorn_hard_candy\", () ->\r\n                new ShieldLikeFoodItem(foodItem(ImmortalersDelightFoodProperties.EVOLUTCORN_HARD_CANDY),ImmortalersDelightFoodProperties.EVOLUTCORN_HARD_CANDY_POWERED,\r\n                        ImmortalersDelightFoodProperties.EVOLUTCORN_HARD_CANDY_AHEAD,ImmortalersDelightFoodProperties.EVOLUTCORN_HARD_CANDY_AHEAD_POWERED,\r\n                        true,true)\r\n        );\r\n\r\n        /*\r\n        香蕉系列物品\r\n        */\r\n\r\n        PEARLIP_MILK_SHAKE = registerWithTab(\"pearlip_milk_shake\", () ->\r\n                new DrinkableItem(new Item.Properties().craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).food(ImmortalersDelightFoodProperties.PEARLIP_MILK_SHAKE), true, false));\r\n\r\n        PEARLIP_PUMPKIN_PIE = registerWithTab(\"pearlip_pumpkin_pie\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.PEARLIP_PUMPKIN_PIE),true));\r\n\r\n        PEARLIPEARL_EGGSTEAM = registerWithTab(\"pearlipearl_eggsteam\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.PEARLIPEARL_EGGSTEAM), true));\r\n\r\n        PEARLIP_JELLY = registerWithTab(\"pearlip_jelly\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.PEARLIP_JELLY), true));\r\n\r\n        PEARLIPEARL_TART = registerWithTab(\"pearlipearl_tart\", () ->\r\n                new PowerfulAbleFoodItem((foodItem(ImmortalersDelightFoodProperties.PEARLIPEARL_TART)), ImmortalersDelightFoodProperties.PEARLIPEARL_TART_POWERED, true,false));\r\n\r\n        ICE_PEARLIP = registerWithTab(\"ice_pearlip\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.ICE_PEARLIP), true));\r\n\r\n        CHOCOLATE_PEARLIP_STICKS = registerWithTab(\"chocolate_pearlip_sticks\", () ->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.CHOCOLATE_PEARLIP_STICKS), true));\r\n\r\n        PERFECT_SUMMER_ICE = registerWithTab(\"perfect_summer_ice\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.PERFECT_SUMMER_ICE),true));\r\n\r\n        TWILIGHT_GELATO = registerWithTab(\"twilight_gelato\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.TWILIGHT_GELATO),true));\r\n\r\n        PEARLIP_BUBBLE_MILK = registerWithTab(\"pearlip_bubble_milk\",()->\r\n                new ConsumableItem(drinkItem(ImmortalersDelightFoodProperties.PEARLIP_BUBBLE_MILK),true, true));\r\n\r\n        CHOCOREEZE = registerWithTab(\"chocoreeze\",()->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.CHOCOREEZE),true, false));\r\n\r\n        TROPICAL_FRUITY_CYCLONE = registerWithTab(\"tropical_fruity_cyclone\",()->\r\n                new PowerfulAbleFoodItem(drinkItem(ImmortalersDelightFoodProperties.TROPICAL_FRUITY_CYCLONE),ImmortalersDelightFoodProperties.TROPICAL_FRUITY_CYCLONE_POWERED,true, false));\r\n\r\n        BANANA_BOX_COD = registerWithTab(\"banana_box_cod\",()->\r\n                new PowerfulAbleFoodItem(new Item.Properties().food(ImmortalersDelightFoodProperties.BANANA_BOX_COD),ImmortalersDelightFoodProperties.BANANA_BOX_COD_POWERED,true,false));\r\n\r\n        BANANA_BOX_SALMON = registerWithTab(\"banana_box_salmon\",()->\r\n                new PowerfulAbleFoodItem(new Item.Properties().food(ImmortalersDelightFoodProperties.BANANA_BOX_SALMON),ImmortalersDelightFoodProperties.BANANA_BOX_SALMON_POWERED,true,false));\r\n\r\n        PEARLIP_RICE_ROLL_BOAT = registerWithTab(\"pearlip_rice_roll_boat\",()->\r\n                new BlockItem(ImmortalersDelightBlocks.PEARLIP_RICE_ROLL_BOAT.get(),new Item.Properties().stacksTo(1)));\r\n\r\n\r\n        /*\r\n         溪竹相关物品\r\n        */\r\n        LEAF_TEA = registerWithTab(\"leaf_tea\",()->\r\n                new DrinkItem(ImmortalersDelightBlocks.LEAF_TEA.get(), drinkItem(ImmortalersDelightFoodProperties.LEAF_TEA),true));\r\n\r\n        EMPTY_BAMBOO_CUP = registerWithTab(\"empty_bamboo_cup\", () ->\r\n                new Item(new Item.Properties().stacksTo(16)));\r\n\r\n        LEISAMBOO_TEA = registerWithTab(\"leisamboo_tea\", () ->\r\n                new DrinkItem(ImmortalersDelightBlocks.LEISAMBOO_TEA.get(), drinkItem(ImmortalersDelightFoodProperties.LEISAMBOO_TEA)));\r\n\r\n        ICED_BLACK_TEA = registerWithTab(\"iced_black_tea\",()->\r\n                new DrinkItem(ImmortalersDelightBlocks.ICED_BLACK_TEA.get(), drinkItem(ImmortalersDelightFoodProperties.ICED_BLACK_TEA),true));\r\n\r\n        PEARLIPEARL_MILK_TEA = registerWithTab(\"pearlipearl_milk_tea\",()->\r\n                new DrinkItem(ImmortalersDelightBlocks.PEARLIPEARL_MILK_TEA.get(), drinkItem(ImmortalersDelightFoodProperties.PEARLIPEARL_MILK_TEA),true));\r\n\r\n        PEARLIPEARL_MILK_GREEN = registerWithTab(\"pearlipearl_milk_green\",()->\r\n                new DrinkItem(ImmortalersDelightBlocks.PEARLIPEARL_MILK_GREEN.get(), drinkItem(ImmortalersDelightFoodProperties.PEARLIPEARL_MILK_GREEN),true));\r\n\r\n        STOVE_BLACK_TEA = registerWithTab(\"stove_black_tea\",() ->\r\n                new DrinkItem(ImmortalersDelightBlocks.STOVE_BLACK_TEA.get(), drinkItem(ImmortalersDelightFoodProperties.STOVE_BLACK_TEA),true));\r\n\r\n        LEAF_GREEN_TEA = registerWithTab(\"leaf_green_tea\",() ->\r\n                new DrinkItem(ImmortalersDelightBlocks.LEAF_GREEN_TEA.get(), drinkItem(ImmortalersDelightFoodProperties.LEAF_GREEN_TEA),true));\r\n\r\n        BRITISH_YELLOW_TEA = registerWithTab(\"british_yellow_tea\",() ->\r\n                new DrinkItem(ImmortalersDelightBlocks.BRITISH_YELLOW_TEA.get(), drinkItem(ImmortalersDelightFoodProperties.BRITISH_YELLOW_TEA),true));\r\n\r\n        CHERRY_PEARLIPEARL_TEA = registerWithTab(\"cherry_pearlipearl_tea\",()->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.CHERRY_PEARLIPEARL_TEA),true, false));\r\n\r\n        GLEEMAN_TEAR = registerWithTab(\"gleeman_tear\",()->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.GLEEMAN_TEAR),true, false));\r\n\r\n        FRUIT_TEA = registerWithTab(\"fruit_tea\",()->\r\n                new DrinkableItem(drinkItem(ImmortalersDelightFoodProperties.FRUIT_TEA),true, false));\r\n\r\n        MILLENIAN_BAMBOO = registerWithTab(\"millenian_bamboo\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.MILLENIAN_BAMBOO.get(), basicItem()));\r\n\r\n        BOWL_OF_MILLENIAN_BAMBOO = registerWithTab(\"bowl_of_millenian_bamboo\", () ->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.BOWL_OF_MILLENIAN_BAMBOO),ImmortalersDelightFoodProperties.BOWL_OF_MILLENIAN_BAMBOO_POWERED,true, false));\r\n\r\n        LEISAMBOO_TEA_CAKE = registerWithTab(\"leisamboo_tea_cake\",()->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.LEISAMBOO_TEA_CAKE),true, false));\r\n\r\n        /*\r\n        通天竹\r\n        */\r\n        TRAVAPLANK = registerWithTab(\"travaplank\",()->new Item(basicItem()));\r\n        TRAVARICE = registerWithTab(\"travarice\",()->new ItemNameBlockItem(ImmortalersDelightBlocks.TRAVASTRUGGLER_SAPLING.get(), basicItem()));\r\n        COOKED_TRAVARICE = registerWithTab(\"cooked_travarice\",()->new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.COOKED_TRAVARICE),true));\r\n\r\n\r\n\r\n        /*\r\n        姬海棠系列物品\r\n         */\r\n\r\n        MASHED_POTATOES = foodItem(\"mashed_potatoes\",ImmortalersDelightFoodProperties.MASHED_POTATOES);\r\n\r\n        MASHED_POISONOUS_POTATO = registerWithTab(\"mashed_poisonous_potato\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.MASHED_POISONOUS_POTATO)));\r\n\r\n        MASHED_POTATO_WITH_JAM = registerWithTab(\"mashed_potato_with_jam\",()->\r\n                new PowerfulAbleFoodItem(new Item.Properties().food(ImmortalersDelightFoodProperties.MASHED_POTATO_WITH_JAM).craftRemainder(Items.BOWL),ImmortalersDelightFoodProperties.MASHED_POTATO_WITH_JAM_POWERED,true,false));\r\n\r\n        MASHED_POISONOUS_POTATO_WITH_JAM = registerWithTab(\"mashed_poisonous_potato_with_jam\",()->\r\n                new PowerfulAbleFoodItem(new Item.Properties().food(ImmortalersDelightFoodProperties.MASHED_POISONOUS_POTATO_WITH_JAM).craftRemainder(Items.BOWL),ImmortalersDelightFoodProperties.MASHED_POISONOUS_POTATO_WITH_JAM_POWERED,true,false));\r\n\r\n        HIMEKAIDO_YOGURT_PIE = block(ImmortalersDelightBlocks.HIMEKAIDO_YOGURT_PIE);\r\n\r\n        HIMEKAIDO_YOGURT_PIE_SLICE = registerWithTab(\"himekaido_yogurt_pie_slice\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.HIMEKAIDO_YOGURT_PIE_SLICE),true));\r\n\r\n        SCARLET_GELATO = registerWithTab(\"scarlet_gelato\",()->\r\n                new ConsumableItem(foodItem(ImmortalersDelightFoodProperties.SCARLET_GELATO),true));\r\n\r\n        SCARLET_SUNDAE = registerWithTab(\"scarlet_sundae\",()->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.SCARLET_SUNDAE),true));\r\n\r\n        HIMEKAIDO_CHAZUKE = registerWithTab(\"himekaido_chazuke\",()->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.HIMEKAIDO_CHAZUKE),ImmortalersDelightFoodProperties.HIMEKAIDO_CHAZUKE_POWERED,true,false));\r\n\r\n        HIMEKAIDO = registerWithTab(\"himekaido\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.HIMEKAIDO, Rarity.COMMON, false), true));\r\n\r\n        GOLDEN_HIMEKAIDO = registerWithTab(\"golden_himekaido\", () ->\r\n                new GoldenHimkaidoFoodItem(fantasticFoodItem(ImmortalersDelightFoodProperties.GOLDEN_HIMEKAIDO, Rarity.RARE, false),true, true,false));\r\n\r\n        ENCHANTED_GOLDEN_HIMEKAIDO = registerWithTab(\"enchanted_golden_himekaido\", () ->\r\n                new EnchantedGoldenHimekaidoFoodItem((new Item.Properties()).rarity(Rarity.EPIC).food(ImmortalersDelightFoodProperties.ENCHANTED_GOLDEN_HIMEKAIDO),true,true,true,3,1.0));\r\n\r\n        HIMEKAIDO_JELLY = registerWithTab(\"himekaido_jelly\", () ->\r\n                new Item(new Item.Properties().craftRemainder(Items.GLASS_BOTTLE).stacksTo(16)));\r\n\r\n        HIMEKANDY = registerWithTab(\"himekandy\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.HIMEKANDY, Rarity.COMMON, false), true));\r\n\r\n        YOGURT = registerWithTab(\"yogurt\", () ->\r\n                new DrinkItem(ImmortalersDelightBlocks.YOGURT.get(), drinkItem(ImmortalersDelightFoodProperties.YOGURT),true));\r\n\r\n        STUFFED_POISONOUS_POTATO = registerWithTab(\"stuffed_poisonous_potato\", () ->\r\n                new PowerfulAbleFoodItem(fantasticFoodItem(ImmortalersDelightFoodProperties.STUFFED_POISONOUS_POTATO, Rarity.COMMON, false),ImmortalersDelightFoodProperties.STUFFED_POISONOUS_POTATO_POWERED, true,false));\r\n\r\n        BAKED_POISONOUS_POTATO = registerWithTab(\"baked_poisonous_potato\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.BAKED_POISONOUS_POTATO, Rarity.COMMON, false), true));\r\n\r\n        BRAISED_SPIDER_EYES_BLOCK = registerWithTab(\"braised_spider_eyes_block\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.BRAISED_SPIDER_EYES_BLOCK.get(), basicItem()));\r\n\r\n        BRAISED_SPIDER_EYES_IN_GRAVY = registerWithTab(\"braised_spider_eyes_in_gravy\", () ->\r\n                new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.BRAISED_SPIDER_EYES_IN_GRAVY), true));\r\n\r\n\r\n        TARTARE_CHICKEN = registerWithTab(\"tartare_chicken\", () ->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.TARTARE_CHICKEN),ImmortalersDelightFoodProperties.TARTARE_CHICKEN_POWERED, true,false));\r\n\r\n\r\n        DIPPED_ROTTEN_FLESH = registerWithTab(\"dipped_rotten_flesh\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.DIPPED_ROTTEN_FLESH, Rarity.COMMON, false), true));\r\n\r\n        CRISPY_YOGURT_ROTTEN_FLESH = registerWithTab(\"crispy_yogurt_rotten_flesh\", () ->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.CRISPY_YOGURT_ROTTEN_FLESH),ImmortalersDelightFoodProperties.CRISPY_YOGURT_ROTTEN_FLESH_POWERED, true,false));\r\n\r\n        MEATY_ROTTEN_TOMATO_BROTH = registerWithTab(\"meaty_rotten_tomato_broth\", () ->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.MEATY_ROTTEN_TOMATO_BROTH),ImmortalersDelightFoodProperties.MEATY_ROTTEN_TOMATO_BROTH_POWERED, true,false));\r\n\r\n        PUFFERFISH_ROLL = registerWithTab(\"pufferfish_roll\", () ->\r\n                new PowerfulAbleFoodItem(fantasticFoodItem(ImmortalersDelightFoodProperties.PUFFERFISH_ROLL, Rarity.COMMON, false),ImmortalersDelightFoodProperties.PUFFERFISH_ROLL_POWERED, true,false));\r\n\r\n        STEWED_ROTTEN_MEAT_POT = registerWithTab(\"stewed_rotten_meat_pot\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.STEWED_ROTTEN_MEAT_POT.get(), basicItem()));\r\n\r\n        BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT = registerWithTab(\"bowl_of_stewed_rotten_meat_in_clay_pot\", () ->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT), ImmortalersDelightFoodProperties.BOWL_OF_STEWED_ROTTEN_MEAT_IN_CLAY_POT_POWERED, true,false));\r\n        /*\r\n        瓦斯麦相关物品\r\n        */\r\n\r\n        KWAT_WHEAT_DOUGH = registerWithTab(\"kwat_wheat_dough\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        KWAT_WHEAT_PASTE = registerWithTab(\"kwat_wheat_paste\",()->\r\n                new Item(new Item.Properties().stacksTo(16).craftRemainder(Items.GLASS_BOTTLE)));\r\n\r\n        KWAT_WHEAT_TOAST = registerWithTab(\"kwat_wheat_toast\",() ->new PowerfulAbleFoodItem(foodItem(ImmortalersDelightFoodProperties.KWAT_WHEAT_TOAST),ImmortalersDelightFoodProperties.KWAT_WHEAT_TOAST_POWERED,true,false));\r\n\r\n        KWAT_WHEAT_TOAST_SLICE = registerWithTab(\"kwat_wheat_toast_slice\",() ->new PowerfulAbleFoodItem(foodItem(ImmortalersDelightFoodProperties.KWAT_WHEAT_TOAST_SLICE),ImmortalersDelightFoodProperties.KWAT_WHEAT_TOAST_SLICE_POWERED,true,false));\r\n\r\n        GOLDEN_KWAT_TOAST = registerWithTab(\"golden_kwat_toast\",() ->\r\n                new GoldenToastItem(fantasticFoodItem(ImmortalersDelightFoodProperties.GOLDEN_TOAST,Rarity.RARE,false),ImmortalersDelightFoodProperties.GOLDEN_TOAST_POWERED,true,true,1));\r\n\r\n        GOLDEN_KWAT_TOAST_SLICE = registerWithTab(\"golden_kwat_toast_slice\",() ->\r\n                new GoldenToastItem(fantasticFoodItem(ImmortalersDelightFoodProperties.GOLDEN_TOAST_SLICE,Rarity.RARE,false),ImmortalersDelightFoodProperties.GOLDEN_TOAST_SLICE_POWERED,true,true,2));\r\n\r\n        NETHER_BREAD_CREAM_SOUP = block(ImmortalersDelightBlocks.NETHER_BREAD_CREAM_SOUP);\r\n\r\n        NETHER_CREAM_SOUP = registerWithTab(\"nether_cream_soup\",() ->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.NETHER_CREAM_SOUP),ImmortalersDelightFoodProperties.NETHER_CREAM_SOUP_POWERED,true,false));\r\n\r\n        NETHER_CREAM_BREAD = registerWithTab(\"nether_cream_bread\",() ->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.NETHER_CREAM_BREAD),ImmortalersDelightFoodProperties.NETHER_CREAM_BREAD_POWERED,true,false));\r\n\r\n        KWAT_WHEAT_DOUFU = registerWithTab(\"kwat_wheat_doufu\",() -> new ConsumableItem(bowlFoodItem(ImmortalersDelightFoodProperties.KWAT_WHEAT_DOUFU),true));\r\n\r\n        FRY_KWAT_WHEAT_DOUFU = registerWithTab(\"fry_kwat_wheat_doufu\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.FRY_KWAT_WHEAT_DOUFU),true,false));\r\n\r\n        SUTFFED_KWAT_WHEAT_DOUFU = registerWithTab(\"sutffed_kwat_wheat_doufu\",()->\r\n                new PowerfulAbleFoodItem(new Item.Properties().food(ImmortalersDelightFoodProperties.SUTFFED_KWAT_WHEAT_DOUFU), ImmortalersDelightFoodProperties.SUTFFED_KWAT_WHEAT_DOUFU_POWERED,true, false));\r\n\r\n        JADE_AND_RUBY_SOUP = registerWithTab(\"jade_and_ruby_soup\",()->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.JADE_AND_RUBY_SOUP),ImmortalersDelightFoodProperties.JADE_AND_RUBY_SOUP_POWERED,true,false));\r\n\r\n        SCARLET_DEVILS_CAKE = registerWithTab(\"scarlet_devils_cake\", () ->\r\n                new BlockItem(ImmortalersDelightBlocks.SCARLET_DEVILS_CAKE.get(), basicItem()));\r\n\r\n        SCARLET_DEVILS_CAKE_SLICE = registerWithTab(\"scarlet_devils_cake_slice\",()->\r\n                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.SCARLET_DEVILS_CAKE_SLICE),true,false));\r\n\r\n        RED_STUFFED_BUN = registerWithTab(\"red_stuffed_bun\",()->\r\n                new PowerfulAbleFoodItem(new Item.Properties().food(ImmortalersDelightFoodProperties.RED_STUFFED_BUN),ImmortalersDelightFoodProperties.RED_STUFFED_BUN_POWERED,true,false));\r\n\r\n//        SPICY_PUDDING = registerWithTab(\"spicy_pudding\",()->\r\n//                new ConsumableItem(new Item.Properties().food(ImmortalersDelightFoodProperties.SPICY_PUDDING),true,false));\r\n\r\n        /*\r\n        冒险相关物品\r\n         */\r\n        GOLDEN_FABRIC = register(\"golden_fabric\", () ->\r\n                new ConsumableItem(fantasticItem(Rarity.RARE),false,true));\r\n\r\n        GOLDEN_FABRIC_VEIL = registerWithTab(\"golden_fabric_veil\", () ->\r\n                new GoldenFabricArmor(ImmortalersArmorMaterials.GOLDEN_FABRIC,ArmorItem.Type.HELMET,fantasticItem(Rarity.RARE)));\r\n\r\n        RAW_SNIFFER_SLICE = REGISTER.register(\"raw_sniffer_slice\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.RAW_SNIFFER_SLICE, Rarity.COMMON, false), true));\r\n\r\n        COOKED_SNIFFER_SLICE = REGISTER.register(\"cooked_sniffer_slice\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.COOKED_SNIFFER_SLICE, Rarity.COMMON, false), true));\r\n\r\n        RAW_SNIFFER_STEAK = REGISTER.register(\"raw_sniffer_steak\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.RAW_SNIFFER_STEAK, Rarity.COMMON, false), true));\r\n\r\n        COOKED_SNIFFER_STEAK = REGISTER.register(\"cooked_sniffer_steak\", () ->\r\n                new ConsumableItem(fantasticFoodItem(ImmortalersDelightFoodProperties.COOKED_SNIFFER_STEAK, Rarity.COMMON, false), true));\r\n\r\n        SNIFFER_ROTATING_ROAST_MEAT = REGISTER.register(\"sniffer_rotating_roast_meat\",()->\r\n                new ItemNameBlockItem(ImmortalersDelightBlocks.SNIFFER_ROTATING_ROAST_MEAT.get(), new Item.Properties()));\r\n\r\n        SNIFFER_FUR = registerWithTab(\"sniffer_fur\", () ->\r\n                new ConsumableItem(fantasticItem(Rarity.COMMON)));\r\n\r\n        BRUSH = REGISTER.register(\"brush\",()->\r\n                new SnifferBrushItem((new Item.Properties()).durability(64)));\r\n\r\n\r\n        SNIFFER_FUR_BRUSH = registerWithTab(\"sniffer_fur_brush\", () ->\r\n                new SnifferBrushItem(fantasticItem(Rarity.UNCOMMON).durability(384)));\r\n\r\n        SACHETS = registerWithTab(\"sachets\", () ->\r\n                new SachetsItem(fantasticItem(Rarity.UNCOMMON).durability(64),false,true));\r\n\r\n        DRILL_ROD_WAND = registerWithTab(\"drill_rod_wand\", () ->\r\n                new DrillRodItem(1,-2.4F, ImmortalersTiers.MAGIC_POWERED, BlockTags.MINEABLE_WITH_PICKAXE,ImmortalersDelightTags.MINEABLE_WITH_DRILL_ROD,fantasticItem(Rarity.RARE),4));\r\n\r\n        RUSTY_ANCIENT_BLADE = registerWithTab(\"rusty_ancient_blade\", () ->\r\n                new ImmortalersKnifeItem(1,ImmortalersTiers.RUSTY_IRON,2,-2.0f,new Item.Properties()));\r\n\r\n        ANCIENT_BLADE = registerWithTab(\"ancient_blade\", () ->\r\n                new ImmortalersKnifeItem(2,ImmortalersTiers.ANCIENT_KNIFE,3.5f,-2.0f,fantasticItem(Rarity.UNCOMMON)));\r\n\r\n        REPEATING_CROSSBOW = registerWithTab(\"repeating_crossbow\",()->\r\n                new RepeatingCrossbowItem((new Item.Properties()).stacksTo(1).durability(465)));\r\n\r\n        SEALED_ANCIENT_RATIONS = registerWithTab(\"sealed_ancient_rations\",()->\r\n                new PowerfulAbleFoodItem(new Item.Properties().food(ImmortalersDelightFoodProperties.SEALED_ANCIENT_RATIONS),ImmortalersDelightFoodProperties.SEALED_ANCIENT_RATIONS_POWERED,true,false));\r\n\r\n        /*\r\n        火把花相关物品\r\n        */\r\n\r\n        TORCHFLOWER_MUSTARD = registerWithTab(\"torchflower_mustard\",()->\r\n                new Item(new Item.Properties()));\r\n\r\n        TORCHFLOWER_COOKIE = foodItem(\"torchflower_cookie\",ImmortalersDelightFoodProperties.TORCHFLOWER_COOKIE,true);\r\n\r\n        TORCHFLOWER_CAKE = foodItem(\"torchflower_cake\",ImmortalersDelightFoodProperties.TORCHFLOWER_CAKE,true);\r\n\r\n        TORCHFLOWER_CURRY_RICE = registerWithTab(\"torchflower_curry_rice\",()->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.TORCHFLOWER_CURRY_RICE), ImmortalersDelightFoodProperties.TORCHFLOWER_CURRY_RICE_POWERED,true,false));\r\n\r\n        EXTRA_SPICY_PASTA = registerWithTab(\"extra_spicy_pasta\",()->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.EXTRA_SPICY_PASTA),ImmortalersDelightFoodProperties.EXTRA_SPICY_PASTA_POWERED,true,false));\r\n\r\n        HOT_HI_SOUP = registerWithTab(\"hot_hi_soup\",()->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.HOT_HI_SOUP),ImmortalersDelightFoodProperties.HOT_HI_SOUP_POWERED,true,false));\r\n\r\n        INCANDESCENCE_SUSHI = registerWithTab(\"incandescence_sushi\",() -> new PowerfulAbleFoodItem(foodItem(ImmortalersDelightFoodProperties.INCANDESCENCE_SUSHI),ImmortalersDelightFoodProperties.INCANDESCENCE_SUSHI_POWERED,true,false));\r\n\r\n        /*\r\n        瓶子草相关物品\r\n         */\r\n        PITCHER_PLANT_BARBECUE = registerWithTab(\"pitcher_plant_barbecue\",()->\r\n                new PowerfulAbleFoodItem(new Item.Properties().food(ImmortalersDelightFoodProperties.PITCHER_PLANT_BARBECUE),ImmortalersDelightFoodProperties.PITCHER_PLANT_BARBECUE_POWERED,true,false));\r\n\r\n        POD_SHELL_BURGER_MEAT = block(ImmortalersDelightBlocks.POD_SHELL_BURGER_MEAT);\r\n\r\n        POD_SHELL_BURGER_MEAT_CUBE = registerWithTab(\"pod_shell_burger_meat_cube\",()->\r\n                new PowerfulAbleFoodItem(new Item.Properties().food(ImmortalersDelightFoodProperties.POD_SHELL_BURGER_MEAT_CUBE), ImmortalersDelightFoodProperties.POD_SHELL_BURGER_MEAT_CUBE_POWERED,true,false));\r\n\r\n        AROMATIC_POD_AFFOGATO = registerWithTab(\"aromatic_pod_affogato\",()->\r\n                new ConsumableItem(drinkItem(ImmortalersDelightFoodProperties.AROMATIC_POD_AFFOGATO),true, false));\r\n\r\n        ALFALFA_PORRIDGE = registerWithTab(\"alfalfa_porridge\",()->\r\n                new PowerfulAbleFoodItem(bowlFoodItem(ImmortalersDelightFoodProperties.ALFALFA_PORRIDGE),ImmortalersDelightFoodProperties.ALFALFA_PORRIDGE_POWERED,true,false));\r\n\r\n\r\n        //酒品\r\n        DREUMK_WINE = registerWithTab(\"dreumk_wine\",()->\r\n                new InebriatedToxicDrinkBlockItem(ImmortalersDelightBlocks.DREUMK_WINE.get(), drinkItem(ImmortalersDelightFoodProperties.DREUMK_WINE),true));\r\n\r\n        EVOLUTCORN_BEER = registerWithTab(\"evolutcorn_beer\",()->\r\n                new InebriatedToxicDrinkBlockItem(ImmortalersDelightBlocks.EVOLUTCORN_BEER.get(),drinkItem(ImmortalersDelightFoodProperties.EVOLUTCORN_BEER), true));\r\n\r\n        STICKY_BEER = registerWithTab(\"sticky_beer\",()->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.STICKY_BEER), true, false));\r\n\r\n        VULCAN_COKTAIL = registerWithTab(\"vulcan_coktail\",()->\r\n                new InebriatedToxicDrinkBlockItem(ImmortalersDelightBlocks.VULCAN_COKTAIL.get(), drinkItem(ImmortalersDelightFoodProperties.VULCAN_COKTAIL),true));\r\n\r\n        CLEAR_WATER_VODKA = registerWithTab(\"clear_water_vodka\", () ->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.CLEAR_WATER_VODKA),true,false,false,true));\r\n\r\n        NETHER_KVASS = registerWithTab(\"nether_kvass\", () ->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.NETHER_KVASS),true,false));\r\n\r\n        PURGATORY_ALE = registerWithTab(\"purgatory_ale\",()->\r\n                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.PURGATORY_ALE),true,false));\r\n\r\n        PIGLIN_ODORI_SAKE = registerWithTab(\"piglin_odori_sake\",()->\r\n                new InebriatedToxicDrinkBlockItem(ImmortalersDelightBlocks.PIGLIN_ODORI_SAKE.get(), (new Item.Properties()).craftRemainder(Items.WITHER_SKELETON_SKULL).stacksTo(16).food(ImmortalersDelightFoodProperties.PIGLIN_ODORI_SAKE),true));\r\n\r\n        TRAVEER = registerWithTab(\"traveer\",()-> new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.TRAVEER),true,false));\r\n\r\n        TRAVASTRUGGLER_LOG = block(ImmortalersDelightBlocks.TRAVASTRUGGLER_LOG);\r\n        STRIPPED_TRAVASTRUGGLER_LOG = block(ImmortalersDelightBlocks.STRIPPED_TRAVASTRUGGLER_LOG);\r\n        TRAVA_PLANKS = block(ImmortalersDelightBlocks.TRAVA_PLANKS);\r\n        TRAVASTRUGGLER_LEAVES = block(ImmortalersDelightBlocks.TRAVASTRUGGLER_LEAVES);\r\n        TRAVASTRUGGLER_LEAVES_TRAVARICE = block(ImmortalersDelightBlocks.TRAVASTRUGGLER_LEAVES_TRAVARICE);\r\n\r\n//        PALE_DEW_WINE = registerWithTab(\"pale_dew_wine\",()->\r\n//                new InebriatedToxicFoodItem(drinkItem(ImmortalersDelightFoodProperties.PALE_DEW_WINE),true,false));\r\n\r\n        //刷怪蛋\r\n//        STRANGE_ARMOUR_STAND_SPAWN_EGG = registerWithTab(\"strange_armour_stand_spawn_egg\",()->\r\n//                new ForgeSpawnEggItem(ImmortalersDelightEntities.STRANGE_ARMOUR_STAND,1645516,6845733,new Item.Properties()));\r\n\r\n        SKELVERFISH_AMBUSHER_SPAWN_EGG = registerWithTab(\"skelverfish_ambusher_spawn_egg\",()->\r\n                new ForgeSpawnEggItem(ImmortalersDelightEntities.SKELVERFISH_AMBUSHER,1645516,6845733,new Item.Properties()));\r\n        SKELVERFISH_BOMBER_SPAWN_EGG = registerWithTab(\"skelverfish_bomber_spawn_egg\",()->\r\n                new ForgeSpawnEggItem(ImmortalersDelightEntities.SKELVERFISH_BOMBER,1645516,6845733,new Item.Properties()));\r\n        SKELVERFISH_THRASHER_SPAWN_EGG = registerWithTab(\"skelverfish_thrasher_spawn_egg\",()->\r\n                new ForgeSpawnEggItem(ImmortalersDelightEntities.SKELVERFISH_THRASHER,1645516,6845733,new Item.Properties()));\r\n        STRANGE_ARMOUR_STAND_SPAWN_EGG = registerWithTab(\"strange_armour_stand_spawn_egg\",()->\r\n                new ForgeSpawnEggItem(ImmortalersDelightEntities.STRANGE_ARMOUR_STAND,1645516,6845733,new Item.Properties()));\r\n        SCAVENGER_SPAWN_EGG = registerWithTab(\"scavenger_spawn_egg\",()->\r\n                new ForgeSpawnEggItem(ImmortalersDelightEntities.SCAVENGER,1645516,6845733,new Item.Properties()));\r\n\r\n\r\n\r\n    }\r\n\r\n    public static RegistryObject<Item> registerWithTab(String name, Supplier<Item> supplier) {\r\n        RegistryObject<Item> item = REGISTER.register(name, supplier);\r\n        CREATIVE_TAB_ITEMS.add(item);\r\n        return item;\r\n    }\r\n\r\n    public static RegistryObject<Item> register(String name, Supplier<Item> supplier) {\r\n        return REGISTER.register(name, supplier);\r\n    }\r\n\r\n    public static Item.Properties basicItem() {\r\n        return new Item.Properties();\r\n    }\r\n\r\n    public static Item.Properties foodItem(FoodProperties food) {\r\n        return (new Item.Properties()).food(food);\r\n    }\r\n\r\n    public static RegistryObject<Item> foodItem(String name,FoodProperties food) {\r\n        return registerWithTab(name,()->new Item(new Item.Properties().food(food)));\r\n    }\r\n\r\n    public static RegistryObject<Item> foodItem(String name,FoodProperties food,boolean hasFoodEffectTooltip) {\r\n        return registerWithTab(name,()->new ConsumableItem(new Item.Properties().food(food),hasFoodEffectTooltip));\r\n    }\r\n\r\n    public static Item.Properties bowlFoodItem(FoodProperties food) {\r\n        return (new Item.Properties()).food(food).craftRemainder(Items.BOWL).stacksTo(16);\r\n    }\r\n\r\n    public static Item.Properties drinkItem(FoodProperties foodProperties) {\r\n        return (new Item.Properties()).craftRemainder(Items.GLASS_BOTTLE).stacksTo(16).food(foodProperties);\r\n    }\r\n\r\n    public static Item.Properties leisambooDrinksItem(FoodProperties foodProperties) {\r\n        return (new Item.Properties()).craftRemainder(EMPTY_BAMBOO_CUP.get()).stacksTo(16).food(foodProperties);\r\n    }\r\n    private static Item.Properties fantasticItem(Rarity soCool) {\r\n        return (new Item.Properties()).rarity(soCool);\r\n    }\r\n\r\n\r\n    private static Item.Properties fantasticFoodItem(FoodProperties foodProperties, Rarity soCool, boolean isBowl) {\r\n        if (isBowl) {\r\n            return new Item.Properties().rarity(soCool).food(foodProperties).craftRemainder(Items.BOWL).stacksTo(16);\r\n        }\r\n        return (new Item.Properties().rarity(soCool).food(foodProperties));\r\n    }\r\n\r\n    private static RegistryObject<Item> block(RegistryObject<Block> block) {\r\n        return registerWithTab(block.getId().getPath(), () -> new BlockItem(block.get(), new Item.Properties()));\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java
--- a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersDelightItems.java	(date 1760782039094)
@@ -330,6 +330,7 @@
     public static final RegistryObject<Item> DRILL_ROD_WAND;
     public static final RegistryObject<Item> RUSTY_ANCIENT_BLADE;
     public static final RegistryObject<Item> ANCIENT_BLADE;
+    public static final RegistryObject<Item> PILLAGER_KNIFE;
     public static final RegistryObject<Item> REPEATING_CROSSBOW;
     public static final RegistryObject<Item> SEALED_ANCIENT_RATIONS;
 
@@ -945,10 +946,13 @@
                 new DrillRodItem(1,-2.4F, ImmortalersTiers.MAGIC_POWERED, BlockTags.MINEABLE_WITH_PICKAXE,ImmortalersDelightTags.MINEABLE_WITH_DRILL_ROD,fantasticItem(Rarity.RARE),4));
 
         RUSTY_ANCIENT_BLADE = registerWithTab("rusty_ancient_blade", () ->
-                new ImmortalersKnifeItem(1,ImmortalersTiers.RUSTY_IRON,2,-2.0f,new Item.Properties()));
+                new ImmortalersKnifeItem(ImmortalersKnifeItem.ANCIENT_KNIFE_TYPE,ImmortalersTiers.RUSTY_IRON,2,-2.0f,new Item.Properties()));
 
         ANCIENT_BLADE = registerWithTab("ancient_blade", () ->
-                new ImmortalersKnifeItem(2,ImmortalersTiers.ANCIENT_KNIFE,3.5f,-2.0f,fantasticItem(Rarity.UNCOMMON)));
+                new ImmortalersKnifeItem(ImmortalersKnifeItem.NEW_ANCIENT_KNIFE_TYPE,ImmortalersTiers.ANCIENT_KNIFE,3.5f,-2.0f,fantasticItem(Rarity.UNCOMMON)));
+
+        PILLAGER_KNIFE = registerWithTab("pillager_knife", () ->
+                new PillagersKnifeItem(ImmortalersKnifeItem.PILLAGER_KNIFE_TYPE,ImmortalersTiers.PILLAGER_KNIFE,3,-2.0f,fantasticItem(Rarity.UNCOMMON)));
 
         REPEATING_CROSSBOW = registerWithTab("repeating_crossbow",()->
                 new RepeatingCrossbowItem((new Item.Properties()).stacksTo(1).durability(465)));
Index: src/main/java/com/renyigesai/immortalers_delight/client/model/TerracottaGolemSideModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/client/model/TerracottaGolemSideModel.java b/src/main/java/com/renyigesai/immortalers_delight/client/model/TerracottaGolemSideModel.java
new file mode 100644
--- /dev/null	(date 1754960475810)
+++ b/src/main/java/com/renyigesai/immortalers_delight/client/model/TerracottaGolemSideModel.java	(date 1754960475810)
@@ -0,0 +1,92 @@
+package com.renyigesai.immortalers_delight.client.model;
+import com.renyigesai.immortalers_delight.client.animation.TerracottaGolemAnimation;
+import com.renyigesai.immortalers_delight.entities.living.TerracottaGolem;
+import net.minecraft.client.model.HierarchicalModel;
+import net.minecraft.client.model.geom.ModelLayerLocation;
+import net.minecraft.client.model.geom.ModelPart;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.RenderType;
+import net.minecraft.client.resources.model.Material;
+import net.minecraft.core.Direction;
+import net.minecraft.resources.ResourceLocation;
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.blaze3d.vertex.VertexConsumer;
+import com.renyigesai.immortalers_delight.ImmortalersDelightMod;
+import net.minecraft.client.model.geom.PartPose;
+import net.minecraft.client.model.geom.builders.*;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.item.Items;
+import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nullable;
+import java.util.EnumSet;
+
+public class TerracottaGolemSideModel <T extends Entity> extends HierarchicalModel<T> {
+    // This layer location should be baked with EntityRendererProvider.Context in the entity renderer and passed into this model's constructor
+    public static final ModelLayerLocation TERRACOTTA_GOLEM_SIDE_LAYER = new ModelLayerLocation(new ResourceLocation("modid", "terracotta_golem_side_model"), "main");
+    private final ModelPart root;
+    private final ModelPart back;
+    private final ModelPart left;
+    private final ModelPart right;
+
+    public TerracottaGolemSideModel(ModelPart pRoot) {
+        this.root = pRoot;
+        this.back = pRoot.getChild("back");
+        this.left = pRoot.getChild("left");
+        this.right = pRoot.getChild("right");
+    }
+
+    public static LayerDefinition createBodyLayer() {
+        MeshDefinition meshdefinition = new MeshDefinition();
+        PartDefinition partdefinition = meshdefinition.getRoot();
+
+        PartDefinition back = partdefinition.addOrReplaceChild("back", CubeListBuilder.create()
+                .texOffs(0, 0)
+                .addBox(-8.0F, -17.0F, -9.0F, 16.0F, 16.0F, 0.0F, EnumSet.of(Direction.NORTH)),
+                PartPose.offsetAndRotation(0.0F, 20.0F, 1.0F, 0.0F, 3.1416F, 0.0F)
+        );
+
+        PartDefinition left = partdefinition.addOrReplaceChild("left", CubeListBuilder.create()
+                .texOffs(0, 0)
+                .addBox(-8.0F, -17.0F, -9.0F, 16.0F, 16.0F, 0.0F, EnumSet.of(Direction.NORTH)),
+                PartPose.offsetAndRotation(0.0F, 20.0F, 1.0F, 0.0F, 1.5708F, 0.0F)
+        );
+
+        PartDefinition right = partdefinition.addOrReplaceChild("right", CubeListBuilder.create()
+                .texOffs(0, 0)
+                .addBox(-8.0F, -17.0F, -9.0F, 16.0F, 16.0F, 0.0F, EnumSet.of(Direction.NORTH)),
+                PartPose.offsetAndRotation(0.0F, 20.0F, 1.0F, 0.0F, -1.5708F, 0.0F)
+        );
+
+        return LayerDefinition.create(meshdefinition, 16, 16);
+    }
+
+    @Override
+    public void setupAnim(Entity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
+
+    }
+
+    @Override
+    public void renderToBuffer(PoseStack poseStack, VertexConsumer vertexConsumer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {
+        back.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
+        left.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
+        right.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
+    }
+
+    public void renderSide(int pSlotID, PoseStack poseStack, VertexConsumer vertexConsumer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {
+        if (pSlotID == 0){
+            left.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
+        }
+        else if (pSlotID == 1){
+            back.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
+        }
+        else if (pSlotID == 2){
+            right.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
+        }
+    }
+
+    @Override
+    public ModelPart root() {
+        return root;
+    }
+}
Index: src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersTiers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.init;\r\n\r\nimport com.renyigesai.immortalers_delight.item.ImmortalersBoatItem;\r\nimport net.minecraft.tags.ItemTags;\r\nimport net.minecraft.util.LazyLoadedValue;\r\nimport net.minecraft.world.item.Items;\r\nimport net.minecraft.world.item.Tier;\r\nimport net.minecraft.world.item.crafting.Ingredient;\r\n\r\nimport java.util.function.Supplier;\r\n\r\npublic enum ImmortalersTiers implements Tier {\r\n//    WOOD(0, 59, 2.0F, 0.0F, 15, () -> {\r\n//        return Ingredient.of(ItemTags.PLANKS);\r\n//    }),\r\n//    STONE(1, 131, 4.0F, 1.0F, 5, () -> {\r\n//        return Ingredient.of(ItemTags.STONE_TOOL_MATERIALS);\r\n//    }),\r\n//    IRON(2, 250, 6.0F, 2.0F, 14, () -> {\r\n//        return Ingredient.of(Items.IRON_INGOT);\r\n//    }),\r\n//    DIAMOND(3, 1561, 8.0F, 3.0F, 10, () -> {\r\n//        return Ingredient.of(Items.DIAMOND);\r\n//    }),\r\n//    GOLD(0, 32, 12.0F, 0.0F, 22, () -> {\r\n//        return Ingredient.of(Items.GOLD_INGOT);\r\n//    }),\r\n//    NETHERITE(4, 2031, 9.0F, 4.0F, 15, () -> {\r\n//        return Ingredient.of(Items.NETHERITE_INGOT);\r\n//    }),\r\n    RUSTY_IRON(1, 225, 5.0F, 1.0F, 11, () -> {\r\n        return Ingredient.of(Items.IRON_INGOT);\r\n    }),\r\n    ANCIENT_KNIFE(2, 750, 6.0F, 2.0F, 14, () -> {\r\n        return Ingredient.of(ImmortalersDelightItems.RUSTY_ANCIENT_BLADE.get());\r\n    }),\r\n    MAGIC_POWERED(4, 32, 25.0F, 4.0F, 22, () -> {\r\n        return Ingredient.of(Items.LAPIS_BLOCK);\r\n    });\r\n\r\n    private final int level;\r\n    private final int uses;\r\n    private final float speed;\r\n    private final float damage;\r\n    private final int enchantmentValue;\r\n    private final LazyLoadedValue<Ingredient> repairIngredient;\r\n\r\n    private ImmortalersTiers(int pLevel, int pUses, float pSpeed, float pDamage, int pEnchantmentValue, Supplier<Ingredient> pRepairIngredient) {\r\n        this.level = pLevel;\r\n        this.uses = pUses;\r\n        this.speed = pSpeed;\r\n        this.damage = pDamage;\r\n        this.enchantmentValue = pEnchantmentValue;\r\n        this.repairIngredient = new LazyLoadedValue<>(pRepairIngredient);\r\n    }\r\n\r\n    public int getUses() {\r\n        return this.uses;\r\n    }\r\n\r\n    public float getSpeed() {\r\n        return this.speed;\r\n    }\r\n\r\n    public float getAttackDamageBonus() {\r\n        return this.damage;\r\n    }\r\n\r\n    public int getLevel() {\r\n        return this.level;\r\n    }\r\n\r\n    public int getEnchantmentValue() {\r\n        return this.enchantmentValue;\r\n    }\r\n\r\n    public Ingredient getRepairIngredient() {\r\n        return this.repairIngredient.get();\r\n    }\r\n\r\n    //@org.jetbrains.annotations.Nullable public net.minecraft.tags.TagKey<net.minecraft.world.level.block.Block> getTag() { return net.minecraftforge.common.ForgeHooks.getTagFromVanillaTier(this); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersTiers.java b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersTiers.java
--- a/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersTiers.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/init/ImmortalersTiers.java	(date 1760781091721)
@@ -34,6 +34,9 @@
     ANCIENT_KNIFE(2, 750, 6.0F, 2.0F, 14, () -> {
         return Ingredient.of(ImmortalersDelightItems.RUSTY_ANCIENT_BLADE.get());
     }),
+    PILLAGER_KNIFE(1, 250, 4.0F, 1.0F, 11, () -> {
+        return Ingredient.of(Items.IRON_INGOT);
+    }),
     MAGIC_POWERED(4, 32, 25.0F, 4.0F, 22, () -> {
         return Ingredient.of(Items.LAPIS_BLOCK);
     });
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <annotationProcessing>\r\n      <profile name=\"Gradle Imported\" enabled=\"true\">\r\n        <outputRelativeToContentRoot value=\"true\" />\r\n        <processorPath useClasspath=\"false\">\r\n          <entry name=\"$PROJECT_DIR$/../../new/.gradle/caches/modules-2/files-2.1/org.spongepowered/mixin/0.8.5/6d1c8bf4c28e697f472a83bd6add76ec4951734/mixin-0.8.5-processor.jar\" />\r\n        </processorPath>\r\n        <module name=\"immortalers_delight.main\" />\r\n      </profile>\r\n    </annotationProcessing>\r\n    <bytecodeTargetLevel target=\"17\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/.idea/compiler.xml	(date 1754875785654)
@@ -5,7 +5,7 @@
       <profile name="Gradle Imported" enabled="true">
         <outputRelativeToContentRoot value="true" />
         <processorPath useClasspath="false">
-          <entry name="$PROJECT_DIR$/../../new/.gradle/caches/modules-2/files-2.1/org.spongepowered/mixin/0.8.5/6d1c8bf4c28e697f472a83bd6add76ec4951734/mixin-0.8.5-processor.jar" />
+          <entry name="$USER_HOME$/.gradle/caches/modules-2/files-2.1/org.spongepowered/mixin/0.8.5/6d1c8bf4c28e697f472a83bd6add76ec4951734/mixin-0.8.5-processor.jar" />
         </processorPath>
         <module name="immortalers_delight.main" />
       </profile>
Index: src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformSentinel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformSentinel.java b/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformSentinel.java
new file mode 100644
--- /dev/null	(date 1759571519133)
+++ b/src/main/java/com/renyigesai/immortalers_delight/entities/living/lost_barracks/CuneiformSentinel.java	(date 1759571519133)
@@ -0,0 +1,4 @@
+package com.renyigesai.immortalers_delight.entities.living.lost_barracks;
+
+public class CuneiformSentinel {
+}
Index: src/main/java/com/renyigesai/immortalers_delight/client/renderer/entity/ScavengerRenderer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.client.renderer.entity;\r\n\r\nimport com.mojang.blaze3d.vertex.PoseStack;\r\nimport com.mojang.math.Axis;\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport com.renyigesai.immortalers_delight.client.model.ScavengerModel;\r\nimport com.renyigesai.immortalers_delight.entities.living.Scavenger;\r\nimport net.minecraft.client.Minecraft;\r\nimport net.minecraft.client.model.IllagerModel;\r\nimport net.minecraft.client.model.geom.ModelLayers;\r\nimport net.minecraft.client.renderer.MultiBufferSource;\r\nimport net.minecraft.client.renderer.entity.EntityRendererProvider;\r\nimport net.minecraft.client.renderer.entity.IllagerRenderer;\r\nimport net.minecraft.client.renderer.entity.ItemRenderer;\r\nimport net.minecraft.client.renderer.entity.MobRenderer;\r\nimport net.minecraft.client.renderer.entity.layers.CustomHeadLayer;\r\nimport net.minecraft.client.renderer.entity.layers.ItemInHandLayer;\r\nimport net.minecraft.client.renderer.texture.OverlayTexture;\r\nimport net.minecraft.client.resources.model.BakedModel;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.effect.MobEffects;\r\nimport net.minecraft.world.entity.monster.AbstractIllager;\r\nimport net.minecraft.world.entity.monster.AbstractSkeleton;\r\nimport net.minecraft.world.item.ItemDisplayContext;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.Items;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\npublic class ScavengerRenderer extends IllagerRenderer<Scavenger> {\r\n    private static final ResourceLocation TEXTURE_LOCATION = new ResourceLocation(ImmortalersDelightMod.MODID, \"textures/entity/scavenger.png\");\r\n    private static int degree = 0;\r\n    public ScavengerRenderer(EntityRendererProvider.Context context) {\r\n        super(context, new IllagerModel<>(context.bakeLayer(ScavengerModel.SCARVENGER_MODEL)),\r\n                0.5f);\r\n        //this.addLayer(new CustomHeadLayer(this, context.getModelSet(), context.getItemInHandRenderer()));\r\n        this.addLayer(new ItemInHandLayer<>(this, context.getItemInHandRenderer()) {\r\n\r\n            @Override\r\n            public void render(PoseStack pPoseStack, MultiBufferSource vertexConsumerProvider, int i, Scavenger vindicatorEntity, float f, float g, float h, float j, float k, float l) {\r\n                if (vindicatorEntity.getSpellCastingType() == 3) {\r\n                    if(degree==30){\r\n                        degree=0;\r\n                    }\r\n                    degree++;\r\n\r\n                    if (!vindicatorEntity.isTeleporting()) {\r\n                        pPoseStack.pushPose();\r\n                        pPoseStack.translate(0.0F, 0.5F, 0.0F);\r\n                        float xOffset = -1 / 32f;\r\n                        float zOffset = 0;\r\n                        pPoseStack.translate(-xOffset, 0, -zOffset);\r\n                        pPoseStack.mulPose(Axis.YP.rotationDegrees(degree * 6));\r\n                        pPoseStack.translate(xOffset, 0, zOffset);\r\n                        ItemRenderer itemRenderer = Minecraft.getInstance().getItemRenderer();\r\n                        ItemStack stack = new ItemStack(Items.ENDER_PEARL);\r\n                        BakedModel bakedModel = itemRenderer.getModel(stack,vindicatorEntity.level(),null,0);\r\n                        itemRenderer.render(stack, ItemDisplayContext.FIXED,true,pPoseStack,vertexConsumerProvider,i, OverlayTexture.NO_OVERLAY,bakedModel);\r\n                        pPoseStack.popPose();\r\n                    }\r\n                }\r\n                if (vindicatorEntity.getSpellCastingType() != 3) {\r\n                    super.render(pPoseStack, vertexConsumerProvider, i, (Scavenger) vindicatorEntity, f, g, h, j, k, l);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public @NotNull ResourceLocation getTextureLocation(@NotNull Scavenger vindicatorEntity) {\r\n        return TEXTURE_LOCATION;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/client/renderer/entity/ScavengerRenderer.java b/src/main/java/com/renyigesai/immortalers_delight/client/renderer/entity/ScavengerRenderer.java
--- a/src/main/java/com/renyigesai/immortalers_delight/client/renderer/entity/ScavengerRenderer.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/client/renderer/entity/ScavengerRenderer.java	(date 1758330931359)
@@ -63,6 +63,7 @@
                 }
             }
         });
+        this.model.getHat().visible = true;
     }
 
     @Override
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>org.gradle.jvmargs=-Xmx3G\r\norg.gradle.daemon=false\r\nminecraft_version=1.20.1\r\nminecraft_version_range=[1.20.1,1.21)\r\nforge_version=47.1.0\r\nforgegradle_version = 6.0.6\r\nforge_version_range=[47,)\r\nloader_version_range=[47,)\r\nmapping_channel=parchment\r\nmapping_version=2023.09.03-1.20.1\r\nmod_id=immortalers_delight\r\nmod_name=immortalers_delight-1.20.1-forge-1.1.0\r\nmod_license=MIT\r\nmod_version=1.20.1-forge-1.1.0\r\nmod_group_id=com.renyigesai\r\nmod_authors=\"Komeiji_Hako,Renyigesai,babel491734,ShangguanXi\"\r\nmod_description=\r\njei_version=15.20.0.105\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
--- a/gradle.properties	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/gradle.properties	(date 1758359357642)
@@ -9,9 +9,9 @@
 mapping_channel=parchment
 mapping_version=2023.09.03-1.20.1
 mod_id=immortalers_delight
-mod_name=immortalers_delight-1.20.1-forge-1.1.0
+mod_name=immortalers_delight-1.20.1-forge-1.1.4514
 mod_license=MIT
-mod_version=1.20.1-forge-1.1.0
+mod_version=1.20.1-forge-1.1.4514
 mod_group_id=com.renyigesai
 mod_authors="Komeiji_Hako,Renyigesai,babel491734,ShangguanXi"
 mod_description=
Index: src/main/java/com/renyigesai/immortalers_delight/client/model/ScavengerModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.client.model;\r\n\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport com.mojang.blaze3d.vertex.PoseStack;\r\nimport com.mojang.blaze3d.vertex.VertexConsumer;\r\nimport net.minecraft.client.model.ArmedModel;\r\nimport net.minecraft.client.model.IllagerModel;\r\nimport net.minecraft.client.model.geom.ModelLayerLocation;\r\nimport net.minecraft.client.model.geom.ModelPart;\r\nimport net.minecraft.client.model.geom.PartPose;\r\nimport net.minecraft.client.model.geom.builders.*;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.world.entity.HumanoidArm;\r\nimport net.minecraft.world.entity.monster.AbstractIllager;\r\n\r\npublic class ScavengerModel<T extends AbstractIllager> extends IllagerModel<T> implements ArmedModel {\r\n    // This layer location should be baked with EntityRendererProvider.Context in the entity renderer and passed into this model's constructor\r\n    public static final ModelLayerLocation SCARVENGER_MODEL = new ModelLayerLocation(new ResourceLocation(ImmortalersDelightMod.MODID, \"scavenger\"), \"main\");\r\n    private final ModelPart waist;\r\n    private final ModelPart Body;\r\n    private final ModelPart head;\r\n    private final ModelPart arms;\r\n    private final ModelPart nose;\r\n    private final ModelPart leftLeg;\r\n    private final ModelPart rightLeg;\r\n    private final ModelPart rightArm;\r\n    private final ModelPart leftArm;\r\n    private final ModelPart hat;\r\n\r\n    public ScavengerModel(ModelPart root) {\r\n        super(root);\r\n        this.waist = root.getChild(\"waist\");\r\n        this.Body = this.waist.getChild(\"Body\");\r\n        this.head = root.getChild(\"head\");\r\n        this.hat = this.head.getChild(\"hat\");\r\n        this.hat.visible = false;\r\n        this.arms = root.getChild(\"arms\");\r\n        this.arms.visible = false;\r\n        this.nose = this.head.getChild(\"nose\");\r\n        this.leftLeg = root.getChild(\"left_leg\");\r\n        this.rightLeg = root.getChild(\"right_leg\");\r\n        this.rightArm = root.getChild(\"right_arm\");\r\n        this.leftArm = root.getChild(\"left_arm\");\r\n    }\r\n\r\n    public static LayerDefinition createBodyLayer() {\r\n        MeshDefinition meshdefinition = new MeshDefinition();\r\n        PartDefinition partdefinition = meshdefinition.getRoot();\r\n\r\n        PartDefinition waist = partdefinition.addOrReplaceChild(\"waist\", CubeListBuilder.create(), PartPose.offset(0.0F, 12.0F, 0.0F));\r\n\r\n        PartDefinition Body = waist.addOrReplaceChild(\"Body\", CubeListBuilder.create().texOffs(16, 84).addBox(-4.0F, -24.0F, -3.0F, 8.0F, 18.0F, 6.0F, new CubeDeformation(0.5F))\r\n                .texOffs(16, 20).addBox(-4.0F, -24.0F, -3.0F, 8.0F, 12.0F, 6.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 12.0F, 0.0F));\r\n\r\n        PartDefinition head = partdefinition.addOrReplaceChild(\"head\", CubeListBuilder.create().texOffs(0, 0).addBox(-4.0F, -10.0F, -4.0F, 8.0F, 10.0F, 8.0F, new CubeDeformation(0.0F))\r\n                .texOffs(39, 0).addBox(-4.5F, -10.5F, -4.5F, 9.0F, 11.0F, 9.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 0.0F, 0.0F));\r\n        PartDefinition arms = partdefinition.addOrReplaceChild(\"arms\", CubeListBuilder.create().texOffs(0, 0).addBox(-4.0F, -10.0F, -4.0F, 8.0F, 10.0F, 8.0F, new CubeDeformation(0.0F))\r\n                .texOffs(39, 0).addBox(-4.5F, -10.5F, -4.5F, 9.0F, 11.0F, 9.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 0.0F, 0.0F));\r\n\r\n        PartDefinition nose = head.addOrReplaceChild(\"nose\", CubeListBuilder.create().texOffs(24, 0).addBox(-1.0F, -1.0F, -6.0F, 2.0F, 4.0F, 2.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, -2.0F, 0.0F));\r\n        PartDefinition hat = head.addOrReplaceChild(\"hat\", CubeListBuilder.create().texOffs(24, 0).addBox(-1.0F, -1.0F, -6.0F, 2.0F, 4.0F, 2.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, -2.0F, 0.0F));\r\n\r\n        PartDefinition LeftLeg = partdefinition.addOrReplaceChild(\"left_leg\", CubeListBuilder.create().texOffs(0, 22).addBox(-2.0F, 0.0F, -2.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.0F))\r\n                .texOffs(0, 86).addBox(-2.0F, 0.0F, -2.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.5F)), PartPose.offset(2.0F, 12.0F, 0.0F));\r\n\r\n        PartDefinition RightLeg = partdefinition.addOrReplaceChild(\"right_leg\", CubeListBuilder.create().texOffs(0, 22).mirror().addBox(-2.0F, 0.0F, -2.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.0F)).mirror(false)\r\n                .texOffs(0, 86).mirror().addBox(-2.0F, 0.0F, -2.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.5F)).mirror(false), PartPose.offset(-2.0F, 12.0F, 0.0F));\r\n\r\n        PartDefinition RightArm = partdefinition.addOrReplaceChild(\"right_arm\", CubeListBuilder.create().texOffs(40, 46).addBox(-3.0F, -2.0F, -2.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.0F))\r\n                .texOffs(40, 110).addBox(-3.0F, -2.0F, -2.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.5F)), PartPose.offset(-5.0F, 2.0F, 0.0F));\r\n\r\n        PartDefinition LeftArm = partdefinition.addOrReplaceChild(\"left_arm\", CubeListBuilder.create().texOffs(40, 46).mirror().addBox(-1.0F, -2.0F, -2.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.0F)).mirror(false)\r\n                .texOffs(40, 110).mirror().addBox(-1.0F, -2.0F, -2.0F, 4.0F, 12.0F, 4.0F, new CubeDeformation(0.5F)).mirror(false), PartPose.offset(5.0F, 2.0F, 0.0F));\r\n\r\n        return LayerDefinition.create(meshdefinition, 128, 128);\r\n    }\r\n\r\n    @Override\r\n    public void renderToBuffer(PoseStack poseStack, VertexConsumer vertexConsumer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {\r\n        waist.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);\r\n        head.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);\r\n        leftLeg.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);\r\n        rightLeg.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);\r\n        rightArm.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);\r\n        leftArm.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);\r\n    }\r\n\r\n    @Override\r\n    public void translateToHand(HumanoidArm pSide, PoseStack pPoseStack) {\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/client/model/ScavengerModel.java b/src/main/java/com/renyigesai/immortalers_delight/client/model/ScavengerModel.java
--- a/src/main/java/com/renyigesai/immortalers_delight/client/model/ScavengerModel.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/client/model/ScavengerModel.java	(date 1758331498607)
@@ -17,7 +17,7 @@
     // This layer location should be baked with EntityRendererProvider.Context in the entity renderer and passed into this model's constructor
     public static final ModelLayerLocation SCARVENGER_MODEL = new ModelLayerLocation(new ResourceLocation(ImmortalersDelightMod.MODID, "scavenger"), "main");
     private final ModelPart waist;
-    private final ModelPart Body;
+    private final ModelPart body;
     private final ModelPart head;
     private final ModelPart arms;
     private final ModelPart nose;
@@ -30,7 +30,7 @@
     public ScavengerModel(ModelPart root) {
         super(root);
         this.waist = root.getChild("waist");
-        this.Body = this.waist.getChild("Body");
+        this.body = this.waist.getChild("body");
         this.head = root.getChild("head");
         this.hat = this.head.getChild("hat");
         this.hat.visible = false;
@@ -49,7 +49,7 @@
 
         PartDefinition waist = partdefinition.addOrReplaceChild("waist", CubeListBuilder.create(), PartPose.offset(0.0F, 12.0F, 0.0F));
 
-        PartDefinition Body = waist.addOrReplaceChild("Body", CubeListBuilder.create().texOffs(16, 84).addBox(-4.0F, -24.0F, -3.0F, 8.0F, 18.0F, 6.0F, new CubeDeformation(0.5F))
+        PartDefinition Body = waist.addOrReplaceChild("body", CubeListBuilder.create().texOffs(16, 84).addBox(-4.0F, -24.0F, -3.0F, 8.0F, 18.0F, 6.0F, new CubeDeformation(0.5F))
                 .texOffs(16, 20).addBox(-4.0F, -24.0F, -3.0F, 8.0F, 12.0F, 6.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 12.0F, 0.0F));
 
         PartDefinition head = partdefinition.addOrReplaceChild("head", CubeListBuilder.create().texOffs(0, 0).addBox(-4.0F, -10.0F, -4.0F, 8.0F, 10.0F, 8.0F, new CubeDeformation(0.0F))
Index: src/main/java/com/renyigesai/immortalers_delight/entities/living/illager_archaeological_team/Surveyor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/entities/living/illager_archaeological_team/Surveyor.java b/src/main/java/com/renyigesai/immortalers_delight/entities/living/illager_archaeological_team/Surveyor.java
new file mode 100644
--- /dev/null	(date 1760759874578)
+++ b/src/main/java/com/renyigesai/immortalers_delight/entities/living/illager_archaeological_team/Surveyor.java	(date 1760759874578)
@@ -0,0 +1,4 @@
+package com.renyigesai.immortalers_delight.entities.living.illager_archaeological_team;
+
+public class Surveyor {
+}
Index: src/main/java/com/renyigesai/immortalers_delight/item/ImmortalersKnifeItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.renyigesai.immortalers_delight.item;\r\n\r\nimport com.google.common.collect.HashMultimap;\r\nimport com.google.common.collect.Multimap;\r\nimport com.renyigesai.immortalers_delight.ImmortalersDelightMod;\r\nimport com.renyigesai.immortalers_delight.event.DifficultyModeHelper;\r\nimport com.renyigesai.immortalers_delight.event.ImmortalersDelightEvent;\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightItems;\r\nimport com.renyigesai.immortalers_delight.init.ImmortalersDelightMobEffect;\r\nimport net.minecraft.ChatFormatting;\r\nimport net.minecraft.nbt.CompoundTag;\r\nimport net.minecraft.nbt.Tag;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.network.chat.MutableComponent;\r\nimport net.minecraft.server.level.ServerPlayer;\r\nimport net.minecraft.tags.DamageTypeTags;\r\nimport net.minecraft.world.InteractionHand;\r\nimport net.minecraft.world.effect.MobEffectInstance;\r\nimport net.minecraft.world.effect.MobEffects;\r\nimport net.minecraft.world.entity.Entity;\r\nimport net.minecraft.world.entity.EquipmentSlot;\r\nimport net.minecraft.world.entity.LivingEntity;\r\nimport net.minecraft.world.entity.ai.attributes.Attribute;\r\nimport net.minecraft.world.entity.ai.attributes.AttributeModifier;\r\nimport net.minecraft.world.entity.ai.attributes.Attributes;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.Tier;\r\nimport net.minecraft.world.item.TooltipFlag;\r\nimport net.minecraft.world.item.enchantment.Enchantment;\r\nimport net.minecraft.world.item.enchantment.EnchantmentHelper;\r\nimport net.minecraft.world.item.enchantment.Enchantments;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraftforge.event.entity.living.LivingHurtEvent;\r\nimport net.minecraftforge.event.entity.living.LivingKnockBackEvent;\r\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\r\nimport net.minecraftforge.fml.common.Mod;\r\nimport net.minecraftforge.registries.ForgeRegistries;\r\nimport vectorwing.farmersdelight.common.Configuration;\r\nimport vectorwing.farmersdelight.common.item.KnifeItem;\r\nimport vectorwing.farmersdelight.common.utility.TextUtils;\r\n\r\nimport java.util.List;\r\n\r\npublic class ImmortalersKnifeItem extends KnifeItem {\r\n    public static final String ANCIENT_KNIFE_COMBO_SKILL = ImmortalersDelightMod.MODID + \"_ancient_knife_combo_skill\";\r\n    private int type_id;\r\n    private final float attackDamage;\r\n    private final float attackSpeed;\r\n    public int getTypeId() {return this.type_id;}\r\n    public ImmortalersKnifeItem(int type, Tier tier, float attackDamage, float attackSpeed, Properties properties) {\r\n        super(tier, attackDamage, attackSpeed, properties);\r\n        this.type_id = type;\r\n        this.attackDamage = attackDamage + tier.getAttackDamageBonus();\r\n        this.attackSpeed = attackSpeed;\r\n    }\r\n\r\n    @Override\r\n    public int getEnchantmentLevel(ItemStack stack, Enchantment enchantment) {\r\n        int level = EnchantmentHelper.getTagEnchantmentLevel(enchantment, stack);\r\n        boolean isPowerful = DifficultyModeHelper.isPowerBattleMode();\r\n        int type = this.type_id;\r\n        if (type == 2) {\r\n            if (enchantment == Enchantments.MOB_LOOTING) level += isPowerful ? 4 : 2;\r\n        }\r\n        return level;\r\n    }\r\n\r\n    @Override\r\n    public Multimap<Attribute, AttributeModifier> getAttributeModifiers(EquipmentSlot equipmentSlot, ItemStack stack)\r\n    {\r\n        Multimap<Attribute, AttributeModifier> multimap = HashMultimap.<Attribute, AttributeModifier>create();\r\n        boolean isPowerful = DifficultyModeHelper.isPowerBattleMode();\r\n        if (equipmentSlot == EquipmentSlot.MAINHAND) {\r\n            multimap.put(Attributes.ATTACK_DAMAGE, new AttributeModifier(BASE_ATTACK_DAMAGE_UUID, \"Tool modifier\", (double)this.attackDamage + (isPowerful ? 2.0F : 0), AttributeModifier.Operation.ADDITION));\r\n            multimap.put(Attributes.ATTACK_SPEED, new AttributeModifier(BASE_ATTACK_SPEED_UUID, \"Tool modifier\", (double)attackSpeed, AttributeModifier.Operation.ADDITION));\r\n            return multimap;\r\n        }\r\n//        else if (equipmentSlot == EquipmentSlot.OFFHAND) {\r\n//            boolean flag = stack.getOrCreateTag().contains(ANCIENT_KNIFE_COMBO_SKILL, Tag.TAG_BYTE)\r\n//                    && stack.getOrCreateTag().getBoolean(ANCIENT_KNIFE_COMBO_SKILL);\r\n//            multimap.put(Attributes.ATTACK_DAMAGE, new AttributeModifier(BASE_ATTACK_DAMAGE_UUID, \"Tool modifier\", flag ? (isPowerful ? 2.125F : 1.333F) : 0, AttributeModifier.Operation.MULTIPLY_TOTAL));\r\n//            return multimap;\r\n//        }\r\n        return super.getDefaultAttributeModifiers(equipmentSlot);\r\n    }\r\n\r\n    @Override\r\n    public void appendHoverText(ItemStack stack, @javax.annotation.Nullable Level level, List<Component> tooltip, TooltipFlag isAdvanced) {\r\n        if ((Boolean) Configuration.FOOD_EFFECT_TOOLTIP.get()) {\r\n            if (this.type_id == 1) {\r\n                MutableComponent textEmpty = TextUtils.getTranslation(\"tooltip.\" + this, new Object[0]);\r\n                tooltip.add(textEmpty.withStyle(ChatFormatting.BLUE));\r\n            }\r\n            if (this.type_id == 2) {\r\n                for (int i = 0; i < 3; i++) {\r\n                    MutableComponent textEmpty = TextUtils.getTranslation(\"tooltip.\" + this + \".\" + ((i == 2 && DifficultyModeHelper.isPowerBattleMode()) ? \"power\" : i), new Object[0]);\r\n                    if(i == 1) {\r\n                        tooltip.add(textEmpty.withStyle(ChatFormatting.GRAY));\r\n                    } else if (i == 2) {\r\n                        tooltip.add(textEmpty.withStyle(ChatFormatting.DARK_GREEN));\r\n                    } else {\r\n                        tooltip.add(textEmpty.withStyle(ChatFormatting.BLUE));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n//    @Override\r\n//    public void inventoryTick(ItemStack pStack, Level pLevel, Entity pEntity, int pSlotId, boolean pIsSelected) {\r\n//        super.inventoryTick(pStack, pLevel, pEntity, pSlotId, pIsSelected);\r\n//        System.out.println(\"这里是inventoryTick方法，当前物品为：\" + ForgeRegistries.ITEMS.getKey(pStack.getItem()));\r\n//        if (pStack.getItem() instanceof ImmortalersKnifeItem immKnife && immKnife.getTypeId() == 2) {\r\n//            if (pEntity instanceof LivingEntity livingEntity) {\r\n//                if (pIsSelected && !livingEntity.level().isClientSide()) {\r\n//                    CompoundTag tag = pStack.getOrCreateTag();\r\n//                    if (livingEntity.getItemInHand(InteractionHand.MAIN_HAND) == pStack) {\r\n//                        tag.putBoolean(ANCIENT_KNIFE_COMBO_SKILL,true);\r\n//                        if (livingEntity.getItemInHand(InteractionHand.OFF_HAND).getItem() instanceof ImmortalersKnifeItem immKnife1\r\n//                                && immKnife1.getTypeId() == 2) {\r\n//                            livingEntity.getItemInHand(InteractionHand.OFF_HAND).getOrCreateTag().putBoolean(ANCIENT_KNIFE_COMBO_SKILL,true);\r\n//                        }\r\n//                    }\r\n//\r\n//                    if (!tag.contains(ANCIENT_KNIFE_COMBO_SKILL, Tag.TAG_BYTE)) {\r\n//                        tag.putBoolean(ANCIENT_KNIFE_COMBO_SKILL,false);\r\n//                    } else if (tag.getBoolean(ANCIENT_KNIFE_COMBO_SKILL)) {\r\n//                        if (!(livingEntity.getItemInHand(InteractionHand.MAIN_HAND).getItem() instanceof ImmortalersKnifeItem immKnife2\r\n//                                && immKnife2.getTypeId() == 2)) {\r\n//                            tag.putBoolean(ANCIENT_KNIFE_COMBO_SKILL,false);\r\n//                        }\r\n//                    }\r\n//                }\r\n//            }\r\n//        }\r\n//    }\r\n\r\n    @Mod.EventBusSubscriber(\r\n            modid = ImmortalersDelightMod.MODID,\r\n            bus = Mod.EventBusSubscriber.Bus.FORGE\r\n    )\r\n    public static class ImmortalersKnifeEvents {\r\n        @SubscribeEvent\r\n        public static void ImmortalersKnifeAttack(LivingHurtEvent event) {\r\n            if (event.isCanceled()) return;\r\n\r\n            boolean isPowerful = DifficultyModeHelper.isPowerBattleMode();\r\n            LivingEntity hurtOne = event.getEntity();\r\n            if (hurtOne.level().isClientSide) return;\r\n\r\n            if (event.getSource().getEntity() instanceof LivingEntity attacker){\r\n                ItemStack toolStack = attacker.getItemInHand(InteractionHand.MAIN_HAND);\r\n                if (!toolStack.isEmpty() && toolStack.getItem() instanceof ImmortalersKnifeItem knife) {\r\n                    if (knife.getTypeId() == 1) {\r\n                        hurtOne.addEffect(new MobEffectInstance(ImmortalersDelightMobEffect.WEAK_WITHER.get(), 320, isPowerful ? 2 : 1));\r\n                    }\r\n                    if (knife.getTypeId() == 2) {\r\n                        ItemStack toolStack2 = attacker.getItemInHand(InteractionHand.OFF_HAND);\r\n                        if (!toolStack2.isEmpty() && toolStack2.is(ImmortalersDelightItems.ANCIENT_BLADE.get())) {\r\n                            float buffer = event.getAmount() * 0.6F;\r\n                            if (!isPowerful && buffer > 4) buffer = 4;\r\n                            event.setAmount(event.getAmount() + buffer);\r\n                            if (attacker instanceof ServerPlayer serverPlayer && !serverPlayer.getAbilities().instabuild) {\r\n                                toolStack2.hurtAndBreak(1, serverPlayer, (action) -> {\r\n                                    action.broadcastBreakEvent(InteractionHand.OFF_HAND);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/renyigesai/immortalers_delight/item/ImmortalersKnifeItem.java b/src/main/java/com/renyigesai/immortalers_delight/item/ImmortalersKnifeItem.java
--- a/src/main/java/com/renyigesai/immortalers_delight/item/ImmortalersKnifeItem.java	(revision 81f24ccc3da5480dc7c6428500e01b840a046318)
+++ b/src/main/java/com/renyigesai/immortalers_delight/item/ImmortalersKnifeItem.java	(date 1760779895598)
@@ -7,14 +7,19 @@
 import com.renyigesai.immortalers_delight.event.ImmortalersDelightEvent;
 import com.renyigesai.immortalers_delight.init.ImmortalersDelightItems;
 import com.renyigesai.immortalers_delight.init.ImmortalersDelightMobEffect;
+import com.renyigesai.immortalers_delight.init.ImmortalersDelightTags;
 import net.minecraft.ChatFormatting;
+import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.DamageTypeTags;
 import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
@@ -30,23 +35,36 @@
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
+import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.CakeBlock;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraftforge.event.entity.living.LivingHurtEvent;
 import net.minecraftforge.event.entity.living.LivingKnockBackEvent;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.registries.ForgeRegistries;
 import vectorwing.farmersdelight.common.Configuration;
 import vectorwing.farmersdelight.common.item.KnifeItem;
+import vectorwing.farmersdelight.common.registry.ModItems;
+import vectorwing.farmersdelight.common.tag.ModTags;
+import vectorwing.farmersdelight.common.utility.ItemUtils;
 import vectorwing.farmersdelight.common.utility.TextUtils;
 
 import java.util.List;
 
 public class ImmortalersKnifeItem extends KnifeItem {
+    public static final int ANCIENT_KNIFE_TYPE = 1;
+    public static final int NEW_ANCIENT_KNIFE_TYPE = 2;
+    public static final int PILLAGER_KNIFE_TYPE = 3;
+    public static final int BONE_KNIFE_TYPE = 4;
     public static final String ANCIENT_KNIFE_COMBO_SKILL = ImmortalersDelightMod.MODID + "_ancient_knife_combo_skill";
-    private int type_id;
-    private final float attackDamage;
-    private final float attackSpeed;
+    protected int type_id;
+    protected final float attackDamage;
+    protected final float attackSpeed;
     public int getTypeId() {return this.type_id;}
     public ImmortalersKnifeItem(int type, Tier tier, float attackDamage, float attackSpeed, Properties properties) {
         super(tier, attackDamage, attackSpeed, properties);
@@ -60,7 +78,7 @@
         int level = EnchantmentHelper.getTagEnchantmentLevel(enchantment, stack);
         boolean isPowerful = DifficultyModeHelper.isPowerBattleMode();
         int type = this.type_id;
-        if (type == 2) {
+        if (type == PILLAGER_KNIFE_TYPE) {
             if (enchantment == Enchantments.MOB_LOOTING) level += isPowerful ? 4 : 2;
         }
         return level;
@@ -72,7 +90,7 @@
         Multimap<Attribute, AttributeModifier> multimap = HashMultimap.<Attribute, AttributeModifier>create();
         boolean isPowerful = DifficultyModeHelper.isPowerBattleMode();
         if (equipmentSlot == EquipmentSlot.MAINHAND) {
-            multimap.put(Attributes.ATTACK_DAMAGE, new AttributeModifier(BASE_ATTACK_DAMAGE_UUID, "Tool modifier", (double)this.attackDamage + (isPowerful ? 2.0F : 0), AttributeModifier.Operation.ADDITION));
+            multimap.put(Attributes.ATTACK_DAMAGE, new AttributeModifier(BASE_ATTACK_DAMAGE_UUID, "Tool modifier", (double)this.attackDamage, AttributeModifier.Operation.ADDITION));
             multimap.put(Attributes.ATTACK_SPEED, new AttributeModifier(BASE_ATTACK_SPEED_UUID, "Tool modifier", (double)attackSpeed, AttributeModifier.Operation.ADDITION));
             return multimap;
         }
@@ -87,21 +105,19 @@
 
     @Override
     public void appendHoverText(ItemStack stack, @javax.annotation.Nullable Level level, List<Component> tooltip, TooltipFlag isAdvanced) {
-        if ((Boolean) Configuration.FOOD_EFFECT_TOOLTIP.get()) {
-            if (this.type_id == 1) {
-                MutableComponent textEmpty = TextUtils.getTranslation("tooltip." + this, new Object[0]);
-                tooltip.add(textEmpty.withStyle(ChatFormatting.BLUE));
-            }
-            if (this.type_id == 2) {
-                for (int i = 0; i < 3; i++) {
-                    MutableComponent textEmpty = TextUtils.getTranslation("tooltip." + this + "." + ((i == 2 && DifficultyModeHelper.isPowerBattleMode()) ? "power" : i), new Object[0]);
-                    if(i == 1) {
-                        tooltip.add(textEmpty.withStyle(ChatFormatting.GRAY));
-                    } else if (i == 2) {
-                        tooltip.add(textEmpty.withStyle(ChatFormatting.DARK_GREEN));
-                    } else {
-                        tooltip.add(textEmpty.withStyle(ChatFormatting.BLUE));
-                    }
+        if (this.type_id == ANCIENT_KNIFE_TYPE) {
+            MutableComponent textEmpty = TextUtils.getTranslation("tooltip." + this, new Object[0]);
+            tooltip.add(textEmpty.withStyle(ChatFormatting.BLUE));
+        }
+        if (this.type_id == NEW_ANCIENT_KNIFE_TYPE) {
+            for (int i = 0; i < 3; i++) {
+                MutableComponent textEmpty = TextUtils.getTranslation("tooltip." + this + "." + ((i == 2 && DifficultyModeHelper.isPowerBattleMode()) ? "power" : i), new Object[0]);
+                if(i == 1) {
+                    tooltip.add(textEmpty.withStyle(ChatFormatting.GRAY));
+                } else if (i == 2) {
+                    tooltip.add(textEmpty.withStyle(ChatFormatting.DARK_GREEN));
+                } else {
+                    tooltip.add(textEmpty.withStyle(ChatFormatting.BLUE));
                 }
             }
         }
@@ -174,5 +190,39 @@
 
         }
 
+        @SubscribeEvent
+        public static void onCakeInteraction(PlayerInteractEvent.RightClickBlock event) {
+            ItemStack toolStack = event.getEntity().getItemInHand(event.getHand());
+            if (toolStack.is(ImmortalersDelightTags.IMMORTAL_KNIVES)) {
+                Level level = event.getLevel();
+                BlockPos pos = event.getPos();
+                BlockState state = event.getLevel().getBlockState(pos);
+                Block block = state.getBlock();
+                if (state.is(ModTags.DROPS_CAKE_SLICE)) {
+                    level.setBlock(pos, (BlockState) Blocks.CAKE.defaultBlockState().setValue(CakeBlock.BITES, 1), 3);
+                    Block.dropResources(state, level, pos);
+                    ItemUtils.spawnItemEntity(level, new ItemStack((ItemLike) ModItems.CAKE_SLICE.get()), (double)pos.getX(), (double)pos.getY() + 0.2, (double)pos.getZ() + 0.5, -0.05, 0.0, 0.0);
+                    level.playSound((Player)null, pos, SoundEvents.WOOL_BREAK, SoundSource.PLAYERS, 0.8F, 0.8F);
+                    event.setCancellationResult(InteractionResult.SUCCESS);
+                    event.setCanceled(true);
+                }
+
+                if (block == Blocks.CAKE) {
+                    int bites = (Integer)state.getValue(CakeBlock.BITES);
+                    if (bites < 6) {
+                        level.setBlock(pos, (BlockState)state.setValue(CakeBlock.BITES, bites + 1), 3);
+                    } else {
+                        level.removeBlock(pos, false);
+                    }
+
+                    ItemUtils.spawnItemEntity(level, new ItemStack((ItemLike)ModItems.CAKE_SLICE.get()), (double)pos.getX() + (double)bites * 0.1, (double)pos.getY() + 0.2, (double)pos.getZ() + 0.5, -0.05, 0.0, 0.0);
+                    level.playSound((Player)null, pos, SoundEvents.WOOL_BREAK, SoundSource.PLAYERS, 0.8F, 0.8F);
+                    event.setCancellationResult(InteractionResult.SUCCESS);
+                    event.setCanceled(true);
+                }
+
+            }
+        }
+
     }
 }
